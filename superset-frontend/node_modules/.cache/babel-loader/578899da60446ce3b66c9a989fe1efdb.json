{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs3/core-js-stable/date/now\";import _Array$from from \"@babel/runtime-corejs3/core-js-stable/array/from\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _sliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/slice\";import _Set from \"@babel/runtime-corejs3/core-js-stable/set\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _isString from \"lodash/isString\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport shortid from 'shortid';\nimport { CategoricalColorNamespace } from '@superset-ui/core';\n\nimport { initSliceEntities } from 'src/dashboard/reducers/sliceEntities';\nimport { getInitialState as getInitialNativeFilterState } from 'src/dashboard/reducers/nativeFilters';\nimport { getParam } from 'src/modules/utils';\nimport { applyDefaultFormData } from 'src/explore/store';\nimport { buildActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport {\nDASHBOARD_FILTER_SCOPE_GLOBAL,\ndashboardFilter } from\n'./dashboardFilters';\nimport { chart } from '../../chart/chartReducer';\nimport {\nDASHBOARD_HEADER_ID,\nGRID_DEFAULT_CHART_WIDTH,\nGRID_COLUMN_COUNT } from\n'../util/constants';\nimport {\nDASHBOARD_HEADER_TYPE,\nCHART_TYPE,\nROW_TYPE } from\n'../util/componentTypes';\nimport findFirstParentContainerId from '../util/findFirstParentContainer';\nimport getEmptyLayout from '../util/getEmptyLayout';\nimport getFilterConfigsFromFormdata from '../util/getFilterConfigsFromFormdata';\nimport getLocationHash from '../util/getLocationHash';\nimport newComponentFactory from '../util/newComponentFactory';\nimport { TIME_RANGE } from '../../visualizations/FilterBox/FilterBox';\n\nexport default function getInitialState(bootstrapData) {var _context2, _context3;\n  const { user_id, datasources, common, editMode, urlParams } = bootstrapData;\n\n  const dashboard = { ...bootstrapData.dashboard_data };\n  let preselectFilters = {};\n  try {\n    // allow request parameter overwrite dashboard metadata\n    preselectFilters = JSON.parse(\n    getParam('preselect_filters') || dashboard.metadata.default_filters);\n\n  } catch (e) {\n    //\n  }\n\n  // Priming the color palette with user's label-color mapping provided in\n  // the dashboard's JSON metadata\n  if (dashboard.metadata && dashboard.metadata.label_colors) {var _context;\n    const scheme = dashboard.metadata.color_scheme;\n    const namespace = dashboard.metadata.color_namespace;\n    const colorMap = _isString(dashboard.metadata.label_colors) ?\n    JSON.parse(dashboard.metadata.label_colors) :\n    dashboard.metadata.label_colors;\n    _forEachInstanceProperty(_context = _Object$keys(colorMap)).call(_context, label => {\n      CategoricalColorNamespace.getScale(scheme, namespace).setColor(\n      label,\n      colorMap[label]);\n\n    });\n  }\n\n  // dashboard layout\n  const { position_json: positionJson } = dashboard;\n  // new dash: positionJson could be {} or null\n  const layout =\n  positionJson && _Object$keys(positionJson).length > 0 ?\n  positionJson :\n  getEmptyLayout();\n\n  // create a lookup to sync layout names with slice names\n  const chartIdToLayoutId = {};\n  _forEachInstanceProperty(_context2 = _Object$values(layout)).call(_context2, layoutComponent => {\n    if (layoutComponent.type === CHART_TYPE) {\n      chartIdToLayoutId[layoutComponent.meta.chartId] = layoutComponent.id;\n    }\n  });\n\n  // find root level chart container node for newly-added slices\n  const parentId = findFirstParentContainerId(layout);\n  const parent = layout[parentId];\n  let newSlicesContainer;\n  let newSlicesContainerWidth = 0;\n\n  const filterScopes = dashboard.metadata.filter_scopes || {};\n\n  const chartQueries = {};\n  const dashboardFilters = {};\n  const slices = {};\n  const sliceIds = new _Set();\n  _forEachInstanceProperty(_context3 = dashboard.slices).call(_context3, slice => {\n    const key = slice.slice_id;\n    const form_data = {\n      ...slice.form_data,\n      url_params: {\n        ...slice.form_data.url_params,\n        ...urlParams } };\n\n\n    chartQueries[key] = {\n      ...chart,\n      id: key,\n      form_data,\n      formData: applyDefaultFormData(form_data) };\n\n\n    slices[key] = {\n      slice_id: key,\n      slice_url: slice.slice_url,\n      slice_name: slice.slice_name,\n      form_data: slice.form_data,\n      viz_type: slice.form_data.viz_type,\n      datasource: slice.form_data.datasource,\n      description: slice.description,\n      description_markeddown: slice.description_markeddown,\n      owners: slice.owners,\n      modified: slice.modified,\n      changed_on: new Date(slice.changed_on).getTime() };\n\n\n    sliceIds.add(key);\n\n    // if there are newly added slices from explore view, fill slices into 1 or more rows\n    if (!chartIdToLayoutId[key] && layout[parentId]) {var _context5;\n      if (\n      newSlicesContainerWidth === 0 ||\n      newSlicesContainerWidth + GRID_DEFAULT_CHART_WIDTH > GRID_COLUMN_COUNT)\n      {var _context4;\n        newSlicesContainer = newComponentFactory(\n        ROW_TYPE,\n        _sliceInstanceProperty(_context4 = parent.parents || []).call(_context4));\n\n        layout[newSlicesContainer.id] = newSlicesContainer;\n        parent.children.push(newSlicesContainer.id);\n        newSlicesContainerWidth = 0;\n      }\n\n      const chartHolder = newComponentFactory(\n      CHART_TYPE,\n      {\n        chartId: slice.slice_id },\n\n      _sliceInstanceProperty(_context5 = newSlicesContainer.parents || []).call(_context5));\n\n\n      layout[chartHolder.id] = chartHolder;\n      newSlicesContainer.children.push(chartHolder.id);\n      chartIdToLayoutId[chartHolder.meta.chartId] = chartHolder.id;\n      newSlicesContainerWidth += GRID_DEFAULT_CHART_WIDTH;\n    }\n\n    // build DashboardFilters for interactive filter features\n    if (\n    slice.form_data.viz_type === 'filter_box' ||\n    slice.form_data.viz_type === 'filter_select')\n    {var _context7, _context8, _context9;\n      const configs = getFilterConfigsFromFormdata(slice.form_data);\n      let { columns } = configs;\n      const { labels } = configs;\n      if (preselectFilters[key]) {var _context6;\n        _forEachInstanceProperty(_context6 = _Object$keys(columns)).call(_context6, col => {\n          if (preselectFilters[key][col]) {\n            columns = {\n              ...columns,\n              [col]: preselectFilters[key][col] };\n\n          }\n        });\n      }\n\n      const scopesByChartId = _reduceInstanceProperty(_context7 = _Object$keys(columns)).call(_context7, (map, column) => {\n        const scopeSettings = {\n          ...filterScopes[key] };\n\n        const { scope, immune } = {\n          ...DASHBOARD_FILTER_SCOPE_GLOBAL,\n          ...scopeSettings[column] };\n\n\n        return {\n          ...map,\n          [column]: {\n            scope,\n            immune } };\n\n\n      }, {});\n\n      const componentId = chartIdToLayoutId[key];\n      const directPathToFilter = _sliceInstanceProperty(_context8 = layout[componentId].parents || []).call(_context8);\n      directPathToFilter.push(componentId);\n      dashboardFilters[key] = {\n        ...dashboardFilter,\n        chartId: key,\n        componentId,\n        datasourceId: slice.form_data.datasource,\n        filterName: slice.slice_name,\n        directPathToFilter,\n        columns,\n        labels,\n        scopes: scopesByChartId,\n        isInstantFilter: !!slice.form_data.instant_filtering,\n        isDateFilter: _includesInstanceProperty(_context9 = _Object$keys(columns)).call(_context9, TIME_RANGE) };\n\n    }\n\n    // sync layout names with current slice names in case a slice was edited\n    // in explore since the layout was updated. name updates go through layout for undo/redo\n    // functionality and python updates slice names based on layout upon dashboard save\n    const layoutId = chartIdToLayoutId[key];\n    if (layoutId && layout[layoutId]) {\n      layout[layoutId].meta.sliceName = slice.slice_name;\n    }\n  });\n  buildActiveFilters({\n    dashboardFilters,\n    components: layout });\n\n\n  // store the header as a layout component so we can undo/redo changes\n  layout[DASHBOARD_HEADER_ID] = {\n    id: DASHBOARD_HEADER_ID,\n    type: DASHBOARD_HEADER_TYPE,\n    meta: {\n      text: dashboard.dashboard_title } };\n\n\n\n  const dashboardLayout = {\n    past: [],\n    present: layout,\n    future: [] };\n\n\n  // find direct link component and path from root\n  const directLinkComponentId = getLocationHash();\n  let directPathToChild = [];\n  if (layout[directLinkComponentId]) {var _context10;\n    directPathToChild = _sliceInstanceProperty(_context10 = layout[directLinkComponentId].parents || []).call(_context10);\n    directPathToChild.push(directLinkComponentId);\n  }\n\n  const nativeFilters = getInitialNativeFilterState({\n    filterConfig: dashboard.metadata.native_filter_configuration || [],\n    filterSetsConfig: dashboard.metadata.filter_sets_configuration || [] });\n\n\n  return {\n    datasources,\n    sliceEntities: { ...initSliceEntities, slices, isLoading: false },\n    charts: chartQueries,\n    // read-only data\n    dashboardInfo: {\n      id: dashboard.id,\n      slug: dashboard.slug,\n      metadata: dashboard.metadata,\n      userId: user_id,\n      dash_edit_perm: dashboard.dash_edit_perm,\n      dash_save_perm: dashboard.dash_save_perm,\n      superset_can_explore: dashboard.superset_can_explore,\n      superset_can_csv: dashboard.superset_can_csv,\n      slice_can_edit: dashboard.slice_can_edit,\n      common: {\n        flash_messages: common.flash_messages,\n        conf: common.conf },\n\n      lastModifiedTime: dashboard.last_modified_time },\n\n    dashboardFilters,\n    nativeFilters,\n    dashboardState: {\n      sliceIds: _Array$from(sliceIds),\n      directPathToChild,\n      directPathLastUpdated: _Date$now(),\n      focusedFilterField: null,\n      expandedSlices: dashboard.metadata.expanded_slices || {},\n      refreshFrequency: dashboard.metadata.refresh_frequency || 0,\n      // dashboard viewers can set refresh frequency for the current visit,\n      // only persistent refreshFrequency will be saved to backend\n      shouldPersistRefreshFrequency: false,\n      css: dashboard.css || '',\n      colorNamespace: dashboard.metadata.color_namespace,\n      colorScheme: dashboard.metadata.color_scheme,\n      editMode: dashboard.dash_edit_perm && editMode,\n      isPublished: dashboard.published,\n      hasUnsavedChanges: false,\n      maxUndoHistoryExceeded: false,\n      lastModifiedTime: dashboard.last_modified_time },\n\n    dashboardLayout,\n    messageToasts: [],\n    impressionId: shortid.generate() };\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getInitialState, \"getInitialState\", \"/app/superset-frontend/src/dashboard/reducers/getInitialState.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/reducers/getInitialState.js"],"names":["shortid","CategoricalColorNamespace","initSliceEntities","getInitialState","getInitialNativeFilterState","getParam","applyDefaultFormData","buildActiveFilters","DASHBOARD_FILTER_SCOPE_GLOBAL","dashboardFilter","chart","DASHBOARD_HEADER_ID","GRID_DEFAULT_CHART_WIDTH","GRID_COLUMN_COUNT","DASHBOARD_HEADER_TYPE","CHART_TYPE","ROW_TYPE","findFirstParentContainerId","getEmptyLayout","getFilterConfigsFromFormdata","getLocationHash","newComponentFactory","TIME_RANGE","bootstrapData","user_id","datasources","common","editMode","urlParams","dashboard","dashboard_data","preselectFilters","JSON","parse","metadata","default_filters","e","label_colors","scheme","color_scheme","namespace","color_namespace","colorMap","label","getScale","setColor","position_json","positionJson","layout","length","chartIdToLayoutId","layoutComponent","type","meta","chartId","id","parentId","parent","newSlicesContainer","newSlicesContainerWidth","filterScopes","filter_scopes","chartQueries","dashboardFilters","slices","sliceIds","slice","key","slice_id","form_data","url_params","formData","slice_url","slice_name","viz_type","datasource","description","description_markeddown","owners","modified","changed_on","Date","getTime","add","parents","children","push","chartHolder","configs","columns","labels","col","scopesByChartId","map","column","scopeSettings","scope","immune","componentId","directPathToFilter","datasourceId","filterName","scopes","isInstantFilter","instant_filtering","isDateFilter","layoutId","sliceName","components","text","dashboard_title","dashboardLayout","past","present","future","directLinkComponentId","directPathToChild","nativeFilters","filterConfig","native_filter_configuration","filterSetsConfig","filter_sets_configuration","sliceEntities","isLoading","charts","dashboardInfo","slug","userId","dash_edit_perm","dash_save_perm","superset_can_explore","superset_can_csv","slice_can_edit","flash_messages","conf","lastModifiedTime","last_modified_time","dashboardState","directPathLastUpdated","focusedFilterField","expandedSlices","expanded_slices","refreshFrequency","refresh_frequency","shouldPersistRefreshFrequency","css","colorNamespace","colorScheme","isPublished","published","hasUnsavedChanges","maxUndoHistoryExceeded","messageToasts","impressionId","generate"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport { isString } from 'lodash';\nimport shortid from 'shortid';\nimport { CategoricalColorNamespace } from '@superset-ui/core';\n\nimport { initSliceEntities } from 'src/dashboard/reducers/sliceEntities';\nimport { getInitialState as getInitialNativeFilterState } from 'src/dashboard/reducers/nativeFilters';\nimport { getParam } from 'src/modules/utils';\nimport { applyDefaultFormData } from 'src/explore/store';\nimport { buildActiveFilters } from 'src/dashboard/util/activeDashboardFilters';\nimport {\n  DASHBOARD_FILTER_SCOPE_GLOBAL,\n  dashboardFilter,\n} from './dashboardFilters';\nimport { chart } from '../../chart/chartReducer';\nimport {\n  DASHBOARD_HEADER_ID,\n  GRID_DEFAULT_CHART_WIDTH,\n  GRID_COLUMN_COUNT,\n} from '../util/constants';\nimport {\n  DASHBOARD_HEADER_TYPE,\n  CHART_TYPE,\n  ROW_TYPE,\n} from '../util/componentTypes';\nimport findFirstParentContainerId from '../util/findFirstParentContainer';\nimport getEmptyLayout from '../util/getEmptyLayout';\nimport getFilterConfigsFromFormdata from '../util/getFilterConfigsFromFormdata';\nimport getLocationHash from '../util/getLocationHash';\nimport newComponentFactory from '../util/newComponentFactory';\nimport { TIME_RANGE } from '../../visualizations/FilterBox/FilterBox';\n\nexport default function getInitialState(bootstrapData) {\n  const { user_id, datasources, common, editMode, urlParams } = bootstrapData;\n\n  const dashboard = { ...bootstrapData.dashboard_data };\n  let preselectFilters = {};\n  try {\n    // allow request parameter overwrite dashboard metadata\n    preselectFilters = JSON.parse(\n      getParam('preselect_filters') || dashboard.metadata.default_filters,\n    );\n  } catch (e) {\n    //\n  }\n\n  // Priming the color palette with user's label-color mapping provided in\n  // the dashboard's JSON metadata\n  if (dashboard.metadata && dashboard.metadata.label_colors) {\n    const scheme = dashboard.metadata.color_scheme;\n    const namespace = dashboard.metadata.color_namespace;\n    const colorMap = isString(dashboard.metadata.label_colors)\n      ? JSON.parse(dashboard.metadata.label_colors)\n      : dashboard.metadata.label_colors;\n    Object.keys(colorMap).forEach(label => {\n      CategoricalColorNamespace.getScale(scheme, namespace).setColor(\n        label,\n        colorMap[label],\n      );\n    });\n  }\n\n  // dashboard layout\n  const { position_json: positionJson } = dashboard;\n  // new dash: positionJson could be {} or null\n  const layout =\n    positionJson && Object.keys(positionJson).length > 0\n      ? positionJson\n      : getEmptyLayout();\n\n  // create a lookup to sync layout names with slice names\n  const chartIdToLayoutId = {};\n  Object.values(layout).forEach(layoutComponent => {\n    if (layoutComponent.type === CHART_TYPE) {\n      chartIdToLayoutId[layoutComponent.meta.chartId] = layoutComponent.id;\n    }\n  });\n\n  // find root level chart container node for newly-added slices\n  const parentId = findFirstParentContainerId(layout);\n  const parent = layout[parentId];\n  let newSlicesContainer;\n  let newSlicesContainerWidth = 0;\n\n  const filterScopes = dashboard.metadata.filter_scopes || {};\n\n  const chartQueries = {};\n  const dashboardFilters = {};\n  const slices = {};\n  const sliceIds = new Set();\n  dashboard.slices.forEach(slice => {\n    const key = slice.slice_id;\n    const form_data = {\n      ...slice.form_data,\n      url_params: {\n        ...slice.form_data.url_params,\n        ...urlParams,\n      },\n    };\n    chartQueries[key] = {\n      ...chart,\n      id: key,\n      form_data,\n      formData: applyDefaultFormData(form_data),\n    };\n\n    slices[key] = {\n      slice_id: key,\n      slice_url: slice.slice_url,\n      slice_name: slice.slice_name,\n      form_data: slice.form_data,\n      viz_type: slice.form_data.viz_type,\n      datasource: slice.form_data.datasource,\n      description: slice.description,\n      description_markeddown: slice.description_markeddown,\n      owners: slice.owners,\n      modified: slice.modified,\n      changed_on: new Date(slice.changed_on).getTime(),\n    };\n\n    sliceIds.add(key);\n\n    // if there are newly added slices from explore view, fill slices into 1 or more rows\n    if (!chartIdToLayoutId[key] && layout[parentId]) {\n      if (\n        newSlicesContainerWidth === 0 ||\n        newSlicesContainerWidth + GRID_DEFAULT_CHART_WIDTH > GRID_COLUMN_COUNT\n      ) {\n        newSlicesContainer = newComponentFactory(\n          ROW_TYPE,\n          (parent.parents || []).slice(),\n        );\n        layout[newSlicesContainer.id] = newSlicesContainer;\n        parent.children.push(newSlicesContainer.id);\n        newSlicesContainerWidth = 0;\n      }\n\n      const chartHolder = newComponentFactory(\n        CHART_TYPE,\n        {\n          chartId: slice.slice_id,\n        },\n        (newSlicesContainer.parents || []).slice(),\n      );\n\n      layout[chartHolder.id] = chartHolder;\n      newSlicesContainer.children.push(chartHolder.id);\n      chartIdToLayoutId[chartHolder.meta.chartId] = chartHolder.id;\n      newSlicesContainerWidth += GRID_DEFAULT_CHART_WIDTH;\n    }\n\n    // build DashboardFilters for interactive filter features\n    if (\n      slice.form_data.viz_type === 'filter_box' ||\n      slice.form_data.viz_type === 'filter_select'\n    ) {\n      const configs = getFilterConfigsFromFormdata(slice.form_data);\n      let { columns } = configs;\n      const { labels } = configs;\n      if (preselectFilters[key]) {\n        Object.keys(columns).forEach(col => {\n          if (preselectFilters[key][col]) {\n            columns = {\n              ...columns,\n              [col]: preselectFilters[key][col],\n            };\n          }\n        });\n      }\n\n      const scopesByChartId = Object.keys(columns).reduce((map, column) => {\n        const scopeSettings = {\n          ...filterScopes[key],\n        };\n        const { scope, immune } = {\n          ...DASHBOARD_FILTER_SCOPE_GLOBAL,\n          ...scopeSettings[column],\n        };\n\n        return {\n          ...map,\n          [column]: {\n            scope,\n            immune,\n          },\n        };\n      }, {});\n\n      const componentId = chartIdToLayoutId[key];\n      const directPathToFilter = (layout[componentId].parents || []).slice();\n      directPathToFilter.push(componentId);\n      dashboardFilters[key] = {\n        ...dashboardFilter,\n        chartId: key,\n        componentId,\n        datasourceId: slice.form_data.datasource,\n        filterName: slice.slice_name,\n        directPathToFilter,\n        columns,\n        labels,\n        scopes: scopesByChartId,\n        isInstantFilter: !!slice.form_data.instant_filtering,\n        isDateFilter: Object.keys(columns).includes(TIME_RANGE),\n      };\n    }\n\n    // sync layout names with current slice names in case a slice was edited\n    // in explore since the layout was updated. name updates go through layout for undo/redo\n    // functionality and python updates slice names based on layout upon dashboard save\n    const layoutId = chartIdToLayoutId[key];\n    if (layoutId && layout[layoutId]) {\n      layout[layoutId].meta.sliceName = slice.slice_name;\n    }\n  });\n  buildActiveFilters({\n    dashboardFilters,\n    components: layout,\n  });\n\n  // store the header as a layout component so we can undo/redo changes\n  layout[DASHBOARD_HEADER_ID] = {\n    id: DASHBOARD_HEADER_ID,\n    type: DASHBOARD_HEADER_TYPE,\n    meta: {\n      text: dashboard.dashboard_title,\n    },\n  };\n\n  const dashboardLayout = {\n    past: [],\n    present: layout,\n    future: [],\n  };\n\n  // find direct link component and path from root\n  const directLinkComponentId = getLocationHash();\n  let directPathToChild = [];\n  if (layout[directLinkComponentId]) {\n    directPathToChild = (layout[directLinkComponentId].parents || []).slice();\n    directPathToChild.push(directLinkComponentId);\n  }\n\n  const nativeFilters = getInitialNativeFilterState({\n    filterConfig: dashboard.metadata.native_filter_configuration || [],\n    filterSetsConfig: dashboard.metadata.filter_sets_configuration || [],\n  });\n\n  return {\n    datasources,\n    sliceEntities: { ...initSliceEntities, slices, isLoading: false },\n    charts: chartQueries,\n    // read-only data\n    dashboardInfo: {\n      id: dashboard.id,\n      slug: dashboard.slug,\n      metadata: dashboard.metadata,\n      userId: user_id,\n      dash_edit_perm: dashboard.dash_edit_perm,\n      dash_save_perm: dashboard.dash_save_perm,\n      superset_can_explore: dashboard.superset_can_explore,\n      superset_can_csv: dashboard.superset_can_csv,\n      slice_can_edit: dashboard.slice_can_edit,\n      common: {\n        flash_messages: common.flash_messages,\n        conf: common.conf,\n      },\n      lastModifiedTime: dashboard.last_modified_time,\n    },\n    dashboardFilters,\n    nativeFilters,\n    dashboardState: {\n      sliceIds: Array.from(sliceIds),\n      directPathToChild,\n      directPathLastUpdated: Date.now(),\n      focusedFilterField: null,\n      expandedSlices: dashboard.metadata.expanded_slices || {},\n      refreshFrequency: dashboard.metadata.refresh_frequency || 0,\n      // dashboard viewers can set refresh frequency for the current visit,\n      // only persistent refreshFrequency will be saved to backend\n      shouldPersistRefreshFrequency: false,\n      css: dashboard.css || '',\n      colorNamespace: dashboard.metadata.color_namespace,\n      colorScheme: dashboard.metadata.color_scheme,\n      editMode: dashboard.dash_edit_perm && editMode,\n      isPublished: dashboard.published,\n      hasUnsavedChanges: false,\n      maxUndoHistoryExceeded: false,\n      lastModifiedTime: dashboard.last_modified_time,\n    },\n    dashboardLayout,\n    messageToasts: [],\n    impressionId: shortid.generate(),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}