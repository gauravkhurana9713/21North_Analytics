{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs3/core-js-stable/date/now\";import _Array$from from \"@babel/runtime-corejs3/core-js-stable/array/from\";import _sliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/slice\";import _Set from \"@babel/runtime-corejs3/core-js-stable/set\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\nADD_SLICE,\nON_CHANGE,\nON_SAVE,\nREMOVE_SLICE,\nSET_COLOR_SCHEME,\nSET_EDIT_MODE,\nSET_MAX_UNDO_HISTORY_EXCEEDED,\nSET_UNSAVED_CHANGES,\nSHOW_BUILDER_PANE,\nTOGGLE_EXPAND_SLICE,\nTOGGLE_FAVE_STAR,\nTOGGLE_PUBLISHED,\nUPDATE_CSS,\nSET_REFRESH_FREQUENCY,\nSET_DIRECT_PATH,\nSET_FOCUSED_FILTER_FIELD,\nUNSET_FOCUSED_FILTER_FIELD } from\n'../actions/dashboardState';\n\nexport default function dashboardStateReducer(state = {}, action) {\n  const actionHandlers = {\n    [UPDATE_CSS]() {\n      return { ...state, css: action.css };\n    },\n    [ADD_SLICE]() {\n      const updatedSliceIds = new _Set(state.sliceIds);\n      updatedSliceIds.add(_sliceInstanceProperty(action).slice_id);\n      return {\n        ...state,\n        sliceIds: _Array$from(updatedSliceIds) };\n\n    },\n    [REMOVE_SLICE]() {\n      const { sliceId } = action;\n      const updatedSliceIds = new _Set(state.sliceIds);\n      updatedSliceIds.delete(sliceId);\n\n      return {\n        ...state,\n        sliceIds: _Array$from(updatedSliceIds) };\n\n    },\n    [TOGGLE_FAVE_STAR]() {\n      return { ...state, isStarred: action.isStarred };\n    },\n    [TOGGLE_PUBLISHED]() {\n      return { ...state, isPublished: action.isPublished };\n    },\n    [SET_EDIT_MODE]() {\n      return {\n        ...state,\n        editMode: action.editMode };\n\n    },\n    [SET_MAX_UNDO_HISTORY_EXCEEDED]() {\n      const { maxUndoHistoryExceeded = true } = action.payload;\n      return { ...state, maxUndoHistoryExceeded };\n    },\n    [SHOW_BUILDER_PANE]() {\n      return { ...state };\n    },\n    [SET_COLOR_SCHEME]() {\n      return {\n        ...state,\n        colorScheme: action.colorScheme,\n        updatedColorScheme: true };\n\n    },\n    [TOGGLE_EXPAND_SLICE]() {\n      const updatedExpandedSlices = { ...state.expandedSlices };\n      const { sliceId } = action;\n      if (updatedExpandedSlices[sliceId]) {\n        delete updatedExpandedSlices[sliceId];\n      } else {\n        updatedExpandedSlices[sliceId] = true;\n      }\n      return { ...state, expandedSlices: updatedExpandedSlices };\n    },\n    [ON_CHANGE]() {\n      return { ...state, hasUnsavedChanges: true };\n    },\n    [ON_SAVE]() {\n      return {\n        ...state,\n        hasUnsavedChanges: false,\n        maxUndoHistoryExceeded: false,\n        editMode: false,\n        updatedColorScheme: false,\n        // server-side returns last_modified_time for latest change\n        lastModifiedTime: action.lastModifiedTime };\n\n    },\n    [SET_UNSAVED_CHANGES]() {\n      const { hasUnsavedChanges } = action.payload;\n      return { ...state, hasUnsavedChanges };\n    },\n    [SET_REFRESH_FREQUENCY]() {\n      return {\n        ...state,\n        refreshFrequency: action.refreshFrequency,\n        shouldPersistRefreshFrequency: action.isPersistent,\n        hasUnsavedChanges: action.isPersistent };\n\n    },\n    [SET_DIRECT_PATH]() {\n      return {\n        ...state,\n        directPathToChild: action.path,\n        directPathLastUpdated: _Date$now() };\n\n    },\n    [SET_FOCUSED_FILTER_FIELD]() {\n      return {\n        ...state,\n        focusedFilterField: {\n          chartId: action.chartId,\n          column: action.column } };\n\n\n    },\n    [UNSET_FOCUSED_FILTER_FIELD]() {\n      // dashboard only has 1 focused filter field at a time,\n      // but when user switch different filter boxes,\n      // browser didn't always fire onBlur and onFocus events in order.\n      if (\n      !state.focusedFilterField ||\n      action.chartId !== state.focusedFilterField.chartId ||\n      action.column !== state.focusedFilterField.column)\n      {\n        return state;\n      }\n      return {\n        ...state,\n        focusedFilterField: null };\n\n    } };\n\n\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(dashboardStateReducer, \"dashboardStateReducer\", \"/app/superset-frontend/src/dashboard/reducers/dashboardState.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/reducers/dashboardState.js"],"names":["ADD_SLICE","ON_CHANGE","ON_SAVE","REMOVE_SLICE","SET_COLOR_SCHEME","SET_EDIT_MODE","SET_MAX_UNDO_HISTORY_EXCEEDED","SET_UNSAVED_CHANGES","SHOW_BUILDER_PANE","TOGGLE_EXPAND_SLICE","TOGGLE_FAVE_STAR","TOGGLE_PUBLISHED","UPDATE_CSS","SET_REFRESH_FREQUENCY","SET_DIRECT_PATH","SET_FOCUSED_FILTER_FIELD","UNSET_FOCUSED_FILTER_FIELD","dashboardStateReducer","state","action","actionHandlers","css","updatedSliceIds","sliceIds","add","slice_id","sliceId","delete","isStarred","isPublished","editMode","maxUndoHistoryExceeded","payload","colorScheme","updatedColorScheme","updatedExpandedSlices","expandedSlices","hasUnsavedChanges","lastModifiedTime","refreshFrequency","shouldPersistRefreshFrequency","isPersistent","directPathToChild","path","directPathLastUpdated","focusedFilterField","chartId","column","type"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable camelcase */\nimport {\n  ADD_SLICE,\n  ON_CHANGE,\n  ON_SAVE,\n  REMOVE_SLICE,\n  SET_COLOR_SCHEME,\n  SET_EDIT_MODE,\n  SET_MAX_UNDO_HISTORY_EXCEEDED,\n  SET_UNSAVED_CHANGES,\n  SHOW_BUILDER_PANE,\n  TOGGLE_EXPAND_SLICE,\n  TOGGLE_FAVE_STAR,\n  TOGGLE_PUBLISHED,\n  UPDATE_CSS,\n  SET_REFRESH_FREQUENCY,\n  SET_DIRECT_PATH,\n  SET_FOCUSED_FILTER_FIELD,\n  UNSET_FOCUSED_FILTER_FIELD,\n} from '../actions/dashboardState';\n\nexport default function dashboardStateReducer(state = {}, action) {\n  const actionHandlers = {\n    [UPDATE_CSS]() {\n      return { ...state, css: action.css };\n    },\n    [ADD_SLICE]() {\n      const updatedSliceIds = new Set(state.sliceIds);\n      updatedSliceIds.add(action.slice.slice_id);\n      return {\n        ...state,\n        sliceIds: Array.from(updatedSliceIds),\n      };\n    },\n    [REMOVE_SLICE]() {\n      const { sliceId } = action;\n      const updatedSliceIds = new Set(state.sliceIds);\n      updatedSliceIds.delete(sliceId);\n\n      return {\n        ...state,\n        sliceIds: Array.from(updatedSliceIds),\n      };\n    },\n    [TOGGLE_FAVE_STAR]() {\n      return { ...state, isStarred: action.isStarred };\n    },\n    [TOGGLE_PUBLISHED]() {\n      return { ...state, isPublished: action.isPublished };\n    },\n    [SET_EDIT_MODE]() {\n      return {\n        ...state,\n        editMode: action.editMode,\n      };\n    },\n    [SET_MAX_UNDO_HISTORY_EXCEEDED]() {\n      const { maxUndoHistoryExceeded = true } = action.payload;\n      return { ...state, maxUndoHistoryExceeded };\n    },\n    [SHOW_BUILDER_PANE]() {\n      return { ...state };\n    },\n    [SET_COLOR_SCHEME]() {\n      return {\n        ...state,\n        colorScheme: action.colorScheme,\n        updatedColorScheme: true,\n      };\n    },\n    [TOGGLE_EXPAND_SLICE]() {\n      const updatedExpandedSlices = { ...state.expandedSlices };\n      const { sliceId } = action;\n      if (updatedExpandedSlices[sliceId]) {\n        delete updatedExpandedSlices[sliceId];\n      } else {\n        updatedExpandedSlices[sliceId] = true;\n      }\n      return { ...state, expandedSlices: updatedExpandedSlices };\n    },\n    [ON_CHANGE]() {\n      return { ...state, hasUnsavedChanges: true };\n    },\n    [ON_SAVE]() {\n      return {\n        ...state,\n        hasUnsavedChanges: false,\n        maxUndoHistoryExceeded: false,\n        editMode: false,\n        updatedColorScheme: false,\n        // server-side returns last_modified_time for latest change\n        lastModifiedTime: action.lastModifiedTime,\n      };\n    },\n    [SET_UNSAVED_CHANGES]() {\n      const { hasUnsavedChanges } = action.payload;\n      return { ...state, hasUnsavedChanges };\n    },\n    [SET_REFRESH_FREQUENCY]() {\n      return {\n        ...state,\n        refreshFrequency: action.refreshFrequency,\n        shouldPersistRefreshFrequency: action.isPersistent,\n        hasUnsavedChanges: action.isPersistent,\n      };\n    },\n    [SET_DIRECT_PATH]() {\n      return {\n        ...state,\n        directPathToChild: action.path,\n        directPathLastUpdated: Date.now(),\n      };\n    },\n    [SET_FOCUSED_FILTER_FIELD]() {\n      return {\n        ...state,\n        focusedFilterField: {\n          chartId: action.chartId,\n          column: action.column,\n        },\n      };\n    },\n    [UNSET_FOCUSED_FILTER_FIELD]() {\n      // dashboard only has 1 focused filter field at a time,\n      // but when user switch different filter boxes,\n      // browser didn't always fire onBlur and onFocus events in order.\n      if (\n        !state.focusedFilterField ||\n        action.chartId !== state.focusedFilterField.chartId ||\n        action.column !== state.focusedFilterField.column\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        focusedFilterField: null,\n      };\n    },\n  };\n\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}