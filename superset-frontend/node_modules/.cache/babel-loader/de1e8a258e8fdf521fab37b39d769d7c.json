{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs3/core-js-stable/parse-int\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _reverseInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reverse\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { Well } from 'react-bootstrap';\nimport ProgressBar from 'src/components/ProgressBar';\nimport Label from 'src/components/Label';\nimport { t } from '@superset-ui/core';\n\nimport TableView from 'src/components/TableView';\nimport Button from 'src/components/Button';\nimport { fDuration } from 'src/modules/dates';\nimport { IconTooltip } from '../../components/IconTooltip';\nimport ResultSet from './ResultSet';\nimport ModalTrigger from '../../components/ModalTrigger';\nimport HighlightedSql from './HighlightedSql';\nimport QueryStateLabel from './QueryStateLabel';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst propTypes = {\n  columns: PropTypes.array,\n  actions: PropTypes.object,\n  queries: PropTypes.array,\n  onUserClicked: PropTypes.func,\n  onDbClicked: PropTypes.func,\n  displayLimit: PropTypes.number.isRequired };\n\nconst defaultProps = {\n  columns: ['started', 'duration', 'rows'],\n  queries: [],\n  onUserClicked: () => {},\n  onDbClicked: () => {} };\n\n\nconst openQuery = id => {\n  const url = `/superset/sqllab?queryId=${id}`;\n  window.open(url);\n};\n\nconst QueryTable = props => {\n  const columns = useMemo(\n  () => {var _context;return (\n      _mapInstanceProperty(_context = props.columns).call(_context, column => ({\n        accessor: column,\n        Header: column,\n        disableSortBy: true })));},\n\n  [props.columns]);\n\n\n  const data = useMemo(() => {var _context2, _context3;\n    const restoreSql = query => {\n      props.actions.queryEditorSetSql({ id: query.sqlEditorId }, query.sql);\n    };\n\n    const openQueryInNewTab = query => {\n      props.actions.cloneQueryToNewTab(query, true);\n    };\n\n    const openAsyncResults = (query, displayLimit) => {\n      props.actions.fetchQueryResults(query, displayLimit);\n    };\n\n    const clearQueryResults = query => {\n      props.actions.clearQueryResults(query);\n    };\n\n    const removeQuery = query => {\n      props.actions.removeQuery(query);\n    };\n\n    return _reverseInstanceProperty(_context2 = _mapInstanceProperty(_context3 = props.queries).call(_context3,\n    query => {\n      const q = { ...query };\n      if (q.endDttm) {\n        q.duration = fDuration(q.startDttm, q.endDttm);\n      }\n      const time = moment(q.startDttm).format().split('T');\n      q.time =\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(\"span\", null,\n      time[0], \" \", ___EmotionJSX(\"br\", null), \" \", time[1]));\n\n\n\n      q.user =\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"link\",\n        onClick: () => props.onUserClicked(q.userId) },\n\n      q.user);\n\n\n      q.db =\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"link\",\n        onClick: () => props.onDbClicked(q.dbId) },\n\n      q.db);\n\n\n      q.started = moment(q.startDttm).format('HH:mm:ss');\n      q.querylink =\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"link\",\n        onClick: () => openQuery(q.queryId) },\n\n      ___EmotionJSX(\"i\", { className: \"fa fa-external-link m-r-3\" }),\n      t('Edit'));\n\n\n      q.sql =\n      ___EmotionJSX(Well, null,\n      ___EmotionJSX(HighlightedSql, {\n        sql: q.sql,\n        rawSql: q.executedSql,\n        shrink: true,\n        maxWidth: 60 }));\n\n\n\n      if (q.resultsKey) {\n        q.output =\n        ___EmotionJSX(ModalTrigger, {\n          className: \"ResultsModal\",\n          triggerNode:\n          ___EmotionJSX(Label, { type: \"info\", className: \"pointer\" },\n          t('View results')),\n\n\n          modalTitle: t('Data preview'),\n          beforeOpen: () => openAsyncResults(query, props.displayLimit),\n          onExit: () => clearQueryResults(query),\n          modalBody:\n          ___EmotionJSX(ResultSet, {\n            showSql: true,\n            query: query,\n            actions: props.actions,\n            height: 400,\n            displayLimit: props.displayLimit }),\n\n\n          responsive: true });\n\n\n      } else {var _context4, _context5;\n        // if query was run using ctas and force_ctas_schema was set\n        // tempTable will have the schema\n        const schemaUsed =\n        q.ctas && q.tempTable && _includesInstanceProperty(_context4 = q.tempTable).call(_context4, '.') ? '' : q.schema;\n        q.output = _filterInstanceProperty(_context5 = [schemaUsed, q.tempTable]).call(_context5, v => v).join('.');\n      }\n      q.progress =\n      ___EmotionJSX(ProgressBar, { percent: _parseInt(q.progress.toFixed(0), 10), striped: true });\n\n      let errorTooltip;\n      if (q.errorMessage) {\n        errorTooltip =\n        ___EmotionJSX(IconTooltip, { tooltip: q.errorMessage },\n        ___EmotionJSX(\"i\", { className: \"fa fa-exclamation-circle text-danger\" }));\n\n\n      }\n      q.state =\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(QueryStateLabel, { query: query }),\n      errorTooltip);\n\n\n      q.actions =\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(IconTooltip, {\n        className: \"fa fa-pencil m-r-3 pointer\",\n        onClick: () => restoreSql(query),\n        tooltip: t(\n        'Overwrite text in the editor with a query on this table'),\n\n        placement: \"top\" }),\n\n      ___EmotionJSX(IconTooltip, {\n        className: \"fa fa-plus-circle m-r-3 pointer\",\n        onClick: () => openQueryInNewTab(query),\n        tooltip: t('Run query in a new tab'),\n        placement: \"top\" }),\n\n      ___EmotionJSX(IconTooltip, {\n        className: \"fa fa-trash m-r-3 pointer\",\n        tooltip: t('Remove query from log'),\n        onClick: () => removeQuery(query) }));\n\n\n\n      return q;\n    })).call(_context2);\n\n  }, [props]);\n\n  return (\n    ___EmotionJSX(\"div\", { className: \"QueryTable\" },\n    ___EmotionJSX(TableView, {\n      columns: columns,\n      data: data,\n      className: \"table-condensed\",\n      pageSize: 50 })));\n\n\n\n};__signature__(QueryTable, \"useMemo{columns}\\nuseMemo{data}\");\n\nQueryTable.propTypes = propTypes;\nQueryTable.defaultProps = defaultProps;const _default =\n\nQueryTable;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/SqlLab/components/QueryTable.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/SqlLab/components/QueryTable.jsx\");reactHotLoader.register(openQuery, \"openQuery\", \"/app/superset-frontend/src/SqlLab/components/QueryTable.jsx\");reactHotLoader.register(QueryTable, \"QueryTable\", \"/app/superset-frontend/src/SqlLab/components/QueryTable.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/SqlLab/components/QueryTable.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/SqlLab/components/QueryTable.jsx"],"names":["React","useMemo","PropTypes","moment","Well","ProgressBar","Label","t","TableView","Button","fDuration","IconTooltip","ResultSet","ModalTrigger","HighlightedSql","QueryStateLabel","propTypes","columns","array","actions","object","queries","onUserClicked","func","onDbClicked","displayLimit","number","isRequired","defaultProps","openQuery","id","url","window","open","QueryTable","props","column","accessor","Header","disableSortBy","data","restoreSql","query","queryEditorSetSql","sqlEditorId","sql","openQueryInNewTab","cloneQueryToNewTab","openAsyncResults","fetchQueryResults","clearQueryResults","removeQuery","q","endDttm","duration","startDttm","time","format","split","user","userId","db","dbId","started","querylink","queryId","executedSql","resultsKey","output","schemaUsed","ctas","tempTable","schema","v","join","progress","toFixed","errorTooltip","errorMessage","state"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { Well } from 'react-bootstrap';\nimport ProgressBar from 'src/components/ProgressBar';\nimport Label from 'src/components/Label';\nimport { t } from '@superset-ui/core';\n\nimport TableView from 'src/components/TableView';\nimport Button from 'src/components/Button';\nimport { fDuration } from 'src/modules/dates';\nimport { IconTooltip } from '../../components/IconTooltip';\nimport ResultSet from './ResultSet';\nimport ModalTrigger from '../../components/ModalTrigger';\nimport HighlightedSql from './HighlightedSql';\nimport QueryStateLabel from './QueryStateLabel';\n\nconst propTypes = {\n  columns: PropTypes.array,\n  actions: PropTypes.object,\n  queries: PropTypes.array,\n  onUserClicked: PropTypes.func,\n  onDbClicked: PropTypes.func,\n  displayLimit: PropTypes.number.isRequired,\n};\nconst defaultProps = {\n  columns: ['started', 'duration', 'rows'],\n  queries: [],\n  onUserClicked: () => {},\n  onDbClicked: () => {},\n};\n\nconst openQuery = id => {\n  const url = `/superset/sqllab?queryId=${id}`;\n  window.open(url);\n};\n\nconst QueryTable = props => {\n  const columns = useMemo(\n    () =>\n      props.columns.map(column => ({\n        accessor: column,\n        Header: column,\n        disableSortBy: true,\n      })),\n    [props.columns],\n  );\n\n  const data = useMemo(() => {\n    const restoreSql = query => {\n      props.actions.queryEditorSetSql({ id: query.sqlEditorId }, query.sql);\n    };\n\n    const openQueryInNewTab = query => {\n      props.actions.cloneQueryToNewTab(query, true);\n    };\n\n    const openAsyncResults = (query, displayLimit) => {\n      props.actions.fetchQueryResults(query, displayLimit);\n    };\n\n    const clearQueryResults = query => {\n      props.actions.clearQueryResults(query);\n    };\n\n    const removeQuery = query => {\n      props.actions.removeQuery(query);\n    };\n\n    return props.queries\n      .map(query => {\n        const q = { ...query };\n        if (q.endDttm) {\n          q.duration = fDuration(q.startDttm, q.endDttm);\n        }\n        const time = moment(q.startDttm).format().split('T');\n        q.time = (\n          <div>\n            <span>\n              {time[0]} <br /> {time[1]}\n            </span>\n          </div>\n        );\n        q.user = (\n          <Button\n            buttonSize=\"small\"\n            buttonStyle=\"link\"\n            onClick={() => props.onUserClicked(q.userId)}\n          >\n            {q.user}\n          </Button>\n        );\n        q.db = (\n          <Button\n            buttonSize=\"small\"\n            buttonStyle=\"link\"\n            onClick={() => props.onDbClicked(q.dbId)}\n          >\n            {q.db}\n          </Button>\n        );\n        q.started = moment(q.startDttm).format('HH:mm:ss');\n        q.querylink = (\n          <Button\n            buttonSize=\"small\"\n            buttonStyle=\"link\"\n            onClick={() => openQuery(q.queryId)}\n          >\n            <i className=\"fa fa-external-link m-r-3\" />\n            {t('Edit')}\n          </Button>\n        );\n        q.sql = (\n          <Well>\n            <HighlightedSql\n              sql={q.sql}\n              rawSql={q.executedSql}\n              shrink\n              maxWidth={60}\n            />\n          </Well>\n        );\n        if (q.resultsKey) {\n          q.output = (\n            <ModalTrigger\n              className=\"ResultsModal\"\n              triggerNode={\n                <Label type=\"info\" className=\"pointer\">\n                  {t('View results')}\n                </Label>\n              }\n              modalTitle={t('Data preview')}\n              beforeOpen={() => openAsyncResults(query, props.displayLimit)}\n              onExit={() => clearQueryResults(query)}\n              modalBody={\n                <ResultSet\n                  showSql\n                  query={query}\n                  actions={props.actions}\n                  height={400}\n                  displayLimit={props.displayLimit}\n                />\n              }\n              responsive\n            />\n          );\n        } else {\n          // if query was run using ctas and force_ctas_schema was set\n          // tempTable will have the schema\n          const schemaUsed =\n            q.ctas && q.tempTable && q.tempTable.includes('.') ? '' : q.schema;\n          q.output = [schemaUsed, q.tempTable].filter(v => v).join('.');\n        }\n        q.progress = (\n          <ProgressBar percent={parseInt(q.progress.toFixed(0), 10)} striped />\n        );\n        let errorTooltip;\n        if (q.errorMessage) {\n          errorTooltip = (\n            <IconTooltip tooltip={q.errorMessage}>\n              <i className=\"fa fa-exclamation-circle text-danger\" />\n            </IconTooltip>\n          );\n        }\n        q.state = (\n          <div>\n            <QueryStateLabel query={query} />\n            {errorTooltip}\n          </div>\n        );\n        q.actions = (\n          <div>\n            <IconTooltip\n              className=\"fa fa-pencil m-r-3 pointer\"\n              onClick={() => restoreSql(query)}\n              tooltip={t(\n                'Overwrite text in the editor with a query on this table',\n              )}\n              placement=\"top\"\n            />\n            <IconTooltip\n              className=\"fa fa-plus-circle m-r-3 pointer\"\n              onClick={() => openQueryInNewTab(query)}\n              tooltip={t('Run query in a new tab')}\n              placement=\"top\"\n            />\n            <IconTooltip\n              className=\"fa fa-trash m-r-3 pointer\"\n              tooltip={t('Remove query from log')}\n              onClick={() => removeQuery(query)}\n            />\n          </div>\n        );\n        return q;\n      })\n      .reverse();\n  }, [props]);\n\n  return (\n    <div className=\"QueryTable\">\n      <TableView\n        columns={columns}\n        data={data}\n        className=\"table-condensed\"\n        pageSize={50}\n      />\n    </div>\n  );\n};\n\nQueryTable.propTypes = propTypes;\nQueryTable.defaultProps = defaultProps;\n\nexport default QueryTable;\n"]},"metadata":{},"sourceType":"module"}