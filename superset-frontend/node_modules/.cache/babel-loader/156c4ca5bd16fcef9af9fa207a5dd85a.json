{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/cjs/light';\nimport htmlSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/htmlbars';\nimport markdownSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/markdown';\nimport sqlSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/sql';\nimport jsonSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/json';\nimport github from 'react-syntax-highlighter/dist/cjs/styles/hljs/github';\nimport { styled, t } from '@superset-ui/core';\nimport { Dropdown, Menu } from 'src/common/components';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport { getChartDataRequest } from 'src/chart/chartAction';\nimport downloadAsImage from 'src/utils/downloadAsImage';\nimport Loading from 'src/components/Loading';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { sliceUpdated } from 'src/explore/actions/exploreActions';\nimport { CopyButton } from 'src/explore/components/DataTableControl';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nSyntaxHighlighter.registerLanguage('markdown', markdownSyntax);\nSyntaxHighlighter.registerLanguage('html', htmlSyntax);\nSyntaxHighlighter.registerLanguage('sql', sqlSyntax);\nSyntaxHighlighter.registerLanguage('json', jsonSyntax);\n\nconst propTypes = {\n  onOpenPropertiesModal: PropTypes.func,\n  onOpenInEditor: PropTypes.func,\n  chartStatus: PropTypes.string,\n  latestQueryFormData: PropTypes.object.isRequired,\n  slice: PropTypes.object };\n\n\nconst MENU_KEYS = {\n  EDIT_PROPERTIES: 'edit_properties',\n  RUN_IN_SQL_LAB: 'run_in_sql_lab',\n  DOWNLOAD_AS_IMAGE: 'download_as_image' };\n\n\nconst CopyButtonViewQuery = styled(CopyButton)`\n  && {\n    margin: 0 0 ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nexport const DisplayQueryButton = props => {\n  const { datasource } = props.latestQueryFormData;\n\n  const [language, setLanguage] = useState(null);\n  const [query, setQuery] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [sqlSupported] = useState(\n  datasource && datasource.split('__')[1] === 'table');\n\n\n  const beforeOpen = resultType => {\n    setIsLoading(true);\n\n    getChartDataRequest({\n      formData: props.latestQueryFormData,\n      resultFormat: 'json',\n      resultType }).\n\n    then(response => {\n      // Only displaying the first query is currently supported\n      const result = response.result[0];\n      setLanguage(result.language);\n      setQuery(result.query);\n      setIsLoading(false);\n      setError(null);\n    }).\n    catch(response => {\n      getClientErrorObject(response).then(\n      ({ error, message, statusText }) => {\n        setError(\n        error || message || statusText || t('Sorry, An error occurred'));\n\n        setIsLoading(false);\n      });\n\n    });\n  };\n\n  const handleMenuClick = ({ key, domEvent }) => {var _slice$slice_name;\n    const { slice, onOpenInEditor, latestQueryFormData } = props;\n    switch (key) {\n      case MENU_KEYS.EDIT_PROPERTIES:\n        props.onOpenPropertiesModal();\n        break;\n      case MENU_KEYS.RUN_IN_SQL_LAB:\n        onOpenInEditor(latestQueryFormData);\n        break;\n      case MENU_KEYS.DOWNLOAD_AS_IMAGE:\n        downloadAsImage(\n        '.panel-body > .chart-container',\n        // eslint-disable-next-line camelcase\n        (_slice$slice_name = slice == null ? void 0 : slice.slice_name) != null ? _slice$slice_name : t('New chart'),\n        {},\n        true)(\n        domEvent);\n        break;\n      default:\n        break;}\n\n  };\n\n  const renderQueryModalBody = () => {\n    if (isLoading) {\n      return ___EmotionJSX(Loading, null);\n    }\n    if (error) {\n      return ___EmotionJSX(\"pre\", null, error);\n    }\n    if (query) {\n      return (\n        ___EmotionJSX(\"div\", null,\n        ___EmotionJSX(CopyToClipboard, {\n          text: query,\n          shouldShowText: false,\n          copyNode:\n          ___EmotionJSX(CopyButtonViewQuery, { buttonSize: \"xsmall\" },\n          ___EmotionJSX(\"i\", { className: \"fa fa-clipboard\" })) }),\n\n\n\n        ___EmotionJSX(SyntaxHighlighter, { language: language, style: github },\n        query)));\n\n\n\n    }\n    return null;\n  };\n\n  const { slice } = props;\n  return (\n    ___EmotionJSX(Dropdown, {\n      trigger: \"click\",\n      \"data-test\": \"query-dropdown\",\n      overlay:\n      ___EmotionJSX(Menu, { onClick: handleMenuClick, selectable: false },\n      slice &&\n      ___EmotionJSX(Menu.Item, { key: MENU_KEYS.EDIT_PROPERTIES },\n      t('Edit properties')),\n\n\n      ___EmotionJSX(Menu.Item, null,\n      ___EmotionJSX(ModalTrigger, {\n        triggerNode:\n        ___EmotionJSX(\"span\", { \"data-test\": \"view-query-menu-item\" }, t('View query')),\n\n        modalTitle: t('View query'),\n        beforeOpen: () => beforeOpen('query'),\n        modalBody: renderQueryModalBody(),\n        responsive: true })),\n\n\n      sqlSupported &&\n      ___EmotionJSX(Menu.Item, { key: MENU_KEYS.RUN_IN_SQL_LAB },\n      t('Run in SQL Lab')),\n\n\n      ___EmotionJSX(Menu.Item, { key: MENU_KEYS.DOWNLOAD_AS_IMAGE },\n      t('Download as image'))) },\n\n\n\n\n    ___EmotionJSX(\"div\", {\n      role: \"button\",\n      id: \"query\",\n      tabIndex: 0,\n      className: \"btn btn-default btn-sm\" },\n\n    ___EmotionJSX(\"i\", { role: \"img\", className: \"fa fa-bars\" }))));\n\n\n\n};__signature__(DisplayQueryButton, \"useState{[language, setLanguage](null)}\\nuseState{[query, setQuery](null)}\\nuseState{[isLoading, setIsLoading](false)}\\nuseState{[error, setError](null)}\\nuseState{[sqlSupported](datasource && datasource.split('__')[1] === 'table')}\");\n\nDisplayQueryButton.propTypes = propTypes;\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ sliceUpdated }, dispatch);\n}const _default =\n\nconnect(null, mapDispatchToProps)(DisplayQueryButton);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/explore/components/DisplayQueryButton/index.jsx\");reactHotLoader.register(MENU_KEYS, \"MENU_KEYS\", \"/app/superset-frontend/src/explore/components/DisplayQueryButton/index.jsx\");reactHotLoader.register(CopyButtonViewQuery, \"CopyButtonViewQuery\", \"/app/superset-frontend/src/explore/components/DisplayQueryButton/index.jsx\");reactHotLoader.register(DisplayQueryButton, \"DisplayQueryButton\", \"/app/superset-frontend/src/explore/components/DisplayQueryButton/index.jsx\");reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/app/superset-frontend/src/explore/components/DisplayQueryButton/index.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/explore/components/DisplayQueryButton/index.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/DisplayQueryButton/index.jsx"],"names":["React","useState","connect","bindActionCreators","PropTypes","SyntaxHighlighter","htmlSyntax","markdownSyntax","sqlSyntax","jsonSyntax","github","styled","t","Dropdown","Menu","getClientErrorObject","CopyToClipboard","getChartDataRequest","downloadAsImage","Loading","ModalTrigger","sliceUpdated","CopyButton","registerLanguage","propTypes","onOpenPropertiesModal","func","onOpenInEditor","chartStatus","string","latestQueryFormData","object","isRequired","slice","MENU_KEYS","EDIT_PROPERTIES","RUN_IN_SQL_LAB","DOWNLOAD_AS_IMAGE","CopyButtonViewQuery","theme","gridUnit","DisplayQueryButton","props","datasource","language","setLanguage","query","setQuery","isLoading","setIsLoading","error","setError","sqlSupported","split","beforeOpen","resultType","formData","resultFormat","then","response","result","catch","message","statusText","handleMenuClick","key","domEvent","slice_name","renderQueryModalBody","mapDispatchToProps","dispatch"],"mappings":"iWAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,iBAAP,MAA8B,yCAA9B;AACA,OAAOC,UAAP,MAAuB,2DAAvB;AACA,OAAOC,cAAP,MAA2B,2DAA3B;AACA,OAAOC,SAAP,MAAsB,sDAAtB;AACA,OAAOC,UAAP,MAAuB,uDAAvB;AACA,OAAOC,MAAP,MAAmB,sDAAnB;AACA,SAASC,MAAT,EAAiBC,CAAjB,QAA0B,mBAA1B;AACA,SAASC,QAAT,EAAmBC,IAAnB,QAA+B,uBAA/B;AACA,SAASC,oBAAT,QAAqC,gCAArC;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,SAASC,YAAT,QAA6B,oCAA7B;AACA,SAASC,UAAT,QAA2B,yCAA3B,C;;AAEAjB,iBAAiB,CAACkB,gBAAlB,CAAmC,UAAnC,EAA+ChB,cAA/C;AACAF,iBAAiB,CAACkB,gBAAlB,CAAmC,MAAnC,EAA2CjB,UAA3C;AACAD,iBAAiB,CAACkB,gBAAlB,CAAmC,KAAnC,EAA0Cf,SAA1C;AACAH,iBAAiB,CAACkB,gBAAlB,CAAmC,MAAnC,EAA2Cd,UAA3C;;AAEA,MAAMe,SAAS,GAAG;AAChBC,EAAAA,qBAAqB,EAAErB,SAAS,CAACsB,IADjB;AAEhBC,EAAAA,cAAc,EAAEvB,SAAS,CAACsB,IAFV;AAGhBE,EAAAA,WAAW,EAAExB,SAAS,CAACyB,MAHP;AAIhBC,EAAAA,mBAAmB,EAAE1B,SAAS,CAAC2B,MAAV,CAAiBC,UAJtB;AAKhBC,EAAAA,KAAK,EAAE7B,SAAS,CAAC2B,MALD,EAAlB;;;AAQA,MAAMG,SAAS,GAAG;AAChBC,EAAAA,eAAe,EAAE,iBADD;AAEhBC,EAAAA,cAAc,EAAE,gBAFA;AAGhBC,EAAAA,iBAAiB,EAAE,mBAHH,EAAlB;;;AAMA,MAAMC,mBAAmB,GAAG3B,MAAM,CAACW,UAAD,CAAa;AAC/C;AACA,kBAAkB,CAAC,EAAEiB,KAAF,EAAD,KAAeA,KAAK,CAACC,QAAS;AAChD;AACA,CAJA;;AAMA,OAAO,MAAMC,kBAAkB,GAAGC,KAAK,IAAI;AACzC,QAAM,EAAEC,UAAF,KAAiBD,KAAK,CAACZ,mBAA7B;;AAEA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0B5C,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAAC6C,KAAD,EAAQC,QAAR,IAAoB9C,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAAC+C,SAAD,EAAYC,YAAZ,IAA4BhD,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACiD,KAAD,EAAQC,QAAR,IAAoBlD,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACmD,YAAD,IAAiBnD,QAAQ;AAC7B0C,EAAAA,UAAU,IAAIA,UAAU,CAACU,KAAX,CAAiB,IAAjB,EAAuB,CAAvB,MAA8B,OADf,CAA/B;;;AAIA,QAAMC,UAAU,GAAGC,UAAU,IAAI;AAC/BN,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEAhC,IAAAA,mBAAmB,CAAC;AAClBuC,MAAAA,QAAQ,EAAEd,KAAK,CAACZ,mBADE;AAElB2B,MAAAA,YAAY,EAAE,MAFI;AAGlBF,MAAAA,UAHkB,EAAD,CAAnB;;AAKGG,IAAAA,IALH,CAKQC,QAAQ,IAAI;AAChB;AACA,YAAMC,MAAM,GAAGD,QAAQ,CAACC,MAAT,CAAgB,CAAhB,CAAf;AACAf,MAAAA,WAAW,CAACe,MAAM,CAAChB,QAAR,CAAX;AACAG,MAAAA,QAAQ,CAACa,MAAM,CAACd,KAAR,CAAR;AACAG,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAZH;AAaGU,IAAAA,KAbH,CAaSF,QAAQ,IAAI;AACjB5C,MAAAA,oBAAoB,CAAC4C,QAAD,CAApB,CAA+BD,IAA/B;AACE,OAAC,EAAER,KAAF,EAASY,OAAT,EAAkBC,UAAlB,EAAD,KAAoC;AAClCZ,QAAAA,QAAQ;AACND,QAAAA,KAAK,IAAIY,OAAT,IAAoBC,UAApB,IAAkCnD,CAAC,CAAC,0BAAD,CAD7B,CAAR;;AAGAqC,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OANH;;AAQD,KAtBH;AAuBD,GA1BD;;AA4BA,QAAMe,eAAe,GAAG,CAAC,EAAEC,GAAF,EAAOC,QAAP,EAAD,KAAuB;AAC7C,UAAM,EAAEjC,KAAF,EAASN,cAAT,EAAyBG,mBAAzB,KAAiDY,KAAvD;AACA,YAAQuB,GAAR;AACE,WAAK/B,SAAS,CAACC,eAAf;AACEO,QAAAA,KAAK,CAACjB,qBAAN;AACA;AACF,WAAKS,SAAS,CAACE,cAAf;AACET,QAAAA,cAAc,CAACG,mBAAD,CAAd;AACA;AACF,WAAKI,SAAS,CAACG,iBAAf;AACEnB,QAAAA,eAAe;AACb,wCADa;AAEb;AAFa,6BAGbe,KAHa,oBAGbA,KAAK,CAAEkC,UAHM,gCAGQvD,CAAC,CAAC,WAAD,CAHT;AAIb,UAJa;AAKb,YALa,CAAf;AAMEsD,QAAAA,QANF;AAOA;AACF;AACE,cAjBJ;;AAmBD,GArBD;;AAuBA,QAAME,oBAAoB,GAAG,MAAM;AACjC,QAAIpB,SAAJ,EAAe;AACb,aAAO,cAAC,OAAD,OAAP;AACD;AACD,QAAIE,KAAJ,EAAW;AACT,aAAO,2BAAMA,KAAN,CAAP;AACD;AACD,QAAIJ,KAAJ,EAAW;AACT;AACE;AACE,sBAAC,eAAD;AACE,UAAA,IAAI,EAAEA,KADR;AAEE,UAAA,cAAc,EAAE,KAFlB;AAGE,UAAA,QAAQ;AACN,wBAAC,mBAAD,IAAqB,UAAU,EAAC,QAAhC;AACE,+BAAG,SAAS,EAAC,iBAAb,GADF,CAJJ,GADF;;;;AAUE,sBAAC,iBAAD,IAAmB,QAAQ,EAAEF,QAA7B,EAAuC,KAAK,EAAElC,MAA9C;AACGoC,QAAAA,KADH,CAVF,CADF;;;;AAgBD;AACD,WAAO,IAAP;AACD,GA1BD;;AA4BA,QAAM,EAAEb,KAAF,KAAYS,KAAlB;AACA;AACE,kBAAC,QAAD;AACE,MAAA,OAAO,EAAC,OADV;AAEE,mBAAU,gBAFZ;AAGE,MAAA,OAAO;AACL,oBAAC,IAAD,IAAM,OAAO,EAAEsB,eAAf,EAAgC,UAAU,EAAE,KAA5C;AACG/B,MAAAA,KAAK;AACJ,oBAAC,IAAD,CAAM,IAAN,IAAW,GAAG,EAAEC,SAAS,CAACC,eAA1B;AACGvB,MAAAA,CAAC,CAAC,iBAAD,CADJ,CAFJ;;;AAME,oBAAC,IAAD,CAAM,IAAN;AACE,oBAAC,YAAD;AACE,QAAA,WAAW;AACT,gCAAM,aAAU,sBAAhB,IAAwCA,CAAC,CAAC,YAAD,CAAzC,CAFJ;;AAIE,QAAA,UAAU,EAAEA,CAAC,CAAC,YAAD,CAJf;AAKE,QAAA,UAAU,EAAE,MAAM0C,UAAU,CAAC,OAAD,CAL9B;AAME,QAAA,SAAS,EAAEc,oBAAoB,EANjC;AAOE,QAAA,UAAU,MAPZ,GADF,CANF;;;AAiBGhB,MAAAA,YAAY;AACX,oBAAC,IAAD,CAAM,IAAN,IAAW,GAAG,EAAElB,SAAS,CAACE,cAA1B;AACGxB,MAAAA,CAAC,CAAC,gBAAD,CADJ,CAlBJ;;;AAsBE,oBAAC,IAAD,CAAM,IAAN,IAAW,GAAG,EAAEsB,SAAS,CAACG,iBAA1B;AACGzB,MAAAA,CAAC,CAAC,mBAAD,CADJ,CAtBF,CAJJ;;;;;AAgCE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,EAAE,EAAC,OAFL;AAGE,MAAA,QAAQ,EAAE,CAHZ;AAIE,MAAA,SAAS,EAAC,wBAJZ;;AAME,yBAAG,IAAI,EAAC,KAAR,EAAc,SAAS,EAAC,YAAxB,GANF,CAhCF,CADF;;;;AA2CD,CAtIM,C,cAAM6B,kB;;AAwIbA,kBAAkB,CAACjB,SAAnB,GAA+BA,SAA/B;;AAEA,SAAS6C,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAOnE,kBAAkB,CAAC,EAAEkB,YAAF,EAAD,EAAmBiD,QAAnB,CAAzB;AACD,C;;AAEcpE,OAAO,CAAC,IAAD,EAAOmE,kBAAP,CAAP,CAAkC5B,kBAAlC,C,CAAf,wB,iLAlKMjB,S,qHAQAU,S,qHAMAI,mB,+HAMOG,kB,8HA0IJ4B,kB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/cjs/light';\nimport htmlSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/htmlbars';\nimport markdownSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/markdown';\nimport sqlSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/sql';\nimport jsonSyntax from 'react-syntax-highlighter/dist/cjs/languages/hljs/json';\nimport github from 'react-syntax-highlighter/dist/cjs/styles/hljs/github';\nimport { styled, t } from '@superset-ui/core';\nimport { Dropdown, Menu } from 'src/common/components';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\nimport CopyToClipboard from 'src/components/CopyToClipboard';\nimport { getChartDataRequest } from 'src/chart/chartAction';\nimport downloadAsImage from 'src/utils/downloadAsImage';\nimport Loading from 'src/components/Loading';\nimport ModalTrigger from 'src/components/ModalTrigger';\nimport { sliceUpdated } from 'src/explore/actions/exploreActions';\nimport { CopyButton } from 'src/explore/components/DataTableControl';\n\nSyntaxHighlighter.registerLanguage('markdown', markdownSyntax);\nSyntaxHighlighter.registerLanguage('html', htmlSyntax);\nSyntaxHighlighter.registerLanguage('sql', sqlSyntax);\nSyntaxHighlighter.registerLanguage('json', jsonSyntax);\n\nconst propTypes = {\n  onOpenPropertiesModal: PropTypes.func,\n  onOpenInEditor: PropTypes.func,\n  chartStatus: PropTypes.string,\n  latestQueryFormData: PropTypes.object.isRequired,\n  slice: PropTypes.object,\n};\n\nconst MENU_KEYS = {\n  EDIT_PROPERTIES: 'edit_properties',\n  RUN_IN_SQL_LAB: 'run_in_sql_lab',\n  DOWNLOAD_AS_IMAGE: 'download_as_image',\n};\n\nconst CopyButtonViewQuery = styled(CopyButton)`\n  && {\n    margin: 0 0 ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\nexport const DisplayQueryButton = props => {\n  const { datasource } = props.latestQueryFormData;\n\n  const [language, setLanguage] = useState(null);\n  const [query, setQuery] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [sqlSupported] = useState(\n    datasource && datasource.split('__')[1] === 'table',\n  );\n\n  const beforeOpen = resultType => {\n    setIsLoading(true);\n\n    getChartDataRequest({\n      formData: props.latestQueryFormData,\n      resultFormat: 'json',\n      resultType,\n    })\n      .then(response => {\n        // Only displaying the first query is currently supported\n        const result = response.result[0];\n        setLanguage(result.language);\n        setQuery(result.query);\n        setIsLoading(false);\n        setError(null);\n      })\n      .catch(response => {\n        getClientErrorObject(response).then(\n          ({ error, message, statusText }) => {\n            setError(\n              error || message || statusText || t('Sorry, An error occurred'),\n            );\n            setIsLoading(false);\n          },\n        );\n      });\n  };\n\n  const handleMenuClick = ({ key, domEvent }) => {\n    const { slice, onOpenInEditor, latestQueryFormData } = props;\n    switch (key) {\n      case MENU_KEYS.EDIT_PROPERTIES:\n        props.onOpenPropertiesModal();\n        break;\n      case MENU_KEYS.RUN_IN_SQL_LAB:\n        onOpenInEditor(latestQueryFormData);\n        break;\n      case MENU_KEYS.DOWNLOAD_AS_IMAGE:\n        downloadAsImage(\n          '.panel-body > .chart-container',\n          // eslint-disable-next-line camelcase\n          slice?.slice_name ?? t('New chart'),\n          {},\n          true,\n        )(domEvent);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const renderQueryModalBody = () => {\n    if (isLoading) {\n      return <Loading />;\n    }\n    if (error) {\n      return <pre>{error}</pre>;\n    }\n    if (query) {\n      return (\n        <div>\n          <CopyToClipboard\n            text={query}\n            shouldShowText={false}\n            copyNode={\n              <CopyButtonViewQuery buttonSize=\"xsmall\">\n                <i className=\"fa fa-clipboard\" />\n              </CopyButtonViewQuery>\n            }\n          />\n          <SyntaxHighlighter language={language} style={github}>\n            {query}\n          </SyntaxHighlighter>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const { slice } = props;\n  return (\n    <Dropdown\n      trigger=\"click\"\n      data-test=\"query-dropdown\"\n      overlay={\n        <Menu onClick={handleMenuClick} selectable={false}>\n          {slice && (\n            <Menu.Item key={MENU_KEYS.EDIT_PROPERTIES}>\n              {t('Edit properties')}\n            </Menu.Item>\n          )}\n          <Menu.Item>\n            <ModalTrigger\n              triggerNode={\n                <span data-test=\"view-query-menu-item\">{t('View query')}</span>\n              }\n              modalTitle={t('View query')}\n              beforeOpen={() => beforeOpen('query')}\n              modalBody={renderQueryModalBody()}\n              responsive\n            />\n          </Menu.Item>\n          {sqlSupported && (\n            <Menu.Item key={MENU_KEYS.RUN_IN_SQL_LAB}>\n              {t('Run in SQL Lab')}\n            </Menu.Item>\n          )}\n          <Menu.Item key={MENU_KEYS.DOWNLOAD_AS_IMAGE}>\n            {t('Download as image')}\n          </Menu.Item>\n        </Menu>\n      }\n    >\n      <div\n        role=\"button\"\n        id=\"query\"\n        tabIndex={0}\n        className=\"btn btn-default btn-sm\"\n      >\n        <i role=\"img\" className=\"fa fa-bars\" />\n      </div>\n    </Dropdown>\n  );\n};\n\nDisplayQueryButton.propTypes = propTypes;\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ sliceUpdated }, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(DisplayQueryButton);\n"]},"metadata":{},"sourceType":"module"}