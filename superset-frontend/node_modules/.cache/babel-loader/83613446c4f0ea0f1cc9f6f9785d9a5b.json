{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect } from 'react';\nimport { getChartDataRequest } from 'src/chart/chartAction';\nimport { t } from '@superset-ui/core';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\nimport { setNativeFilterFieldValues, useForceUpdate } from './utils';\nimport { getFormData } from '../../utils';\n// When some fields in form changed we need re-fetch data for Filter defaultValue\n// eslint-disable-next-line import/prefer-default-export\nexport const useBackendFormUpdate = (form, filterId, filterToEdit, hasDatasource, hasColumn) => {var _formFilter$dataset4;\n  const forceUpdate = useForceUpdate();\n  const formFilter = (form.getFieldValue('filters') || {})[filterId];\n  useEffect(() => {var _formFilter$dataset, _formFilter$dataset2;\n    let resolvedDefaultValue = null;\n    if (!hasDatasource) {\n      forceUpdate();\n      return;\n    }\n    // No need to check data set change because it cascading update column\n    // So check that column exists is enough\n    if (hasColumn && !(formFilter != null && formFilter.column)) {\n      setNativeFilterFieldValues(form, filterId, {\n        defaultValueQueriesData: [],\n        defaultValue: resolvedDefaultValue });\n\n      return;\n    }\n    if (!(formFilter != null && (_formFilter$dataset = formFilter.dataset) != null && _formFilter$dataset.value)) {\n      // no need to make chart data request if no dataset is defined\n      return;\n    }\n    const formData = getFormData({\n      datasetId: formFilter == null ? void 0 : (_formFilter$dataset2 = formFilter.dataset) == null ? void 0 : _formFilter$dataset2.value,\n      groupby: formFilter == null ? void 0 : formFilter.column,\n      defaultValue: formFilter == null ? void 0 : formFilter.defaultValue,\n      ...formFilter });\n\n    setNativeFilterFieldValues(form, filterId, {\n      defaultValueQueriesData: null,\n      defaultValue: resolvedDefaultValue });\n\n    forceUpdate();\n    getChartDataRequest({\n      formData,\n      force: false,\n      requestParams: { dashboardId: 0 } }).\n    then(response => {var _formFilter$dataset3, _filterToEdit$targets;\n      if ((filterToEdit == null ? void 0 : filterToEdit.filterType) === (formFilter == null ? void 0 : formFilter.filterType) &&\n      (filterToEdit == null ? void 0 : filterToEdit.targets[0].datasetId) === (formFilter == null ? void 0 : (_formFilter$dataset3 = formFilter.dataset) == null ? void 0 : _formFilter$dataset3.value) && (\n      !hasColumn ||\n      (formFilter == null ? void 0 : formFilter.column) === (filterToEdit == null ? void 0 : (_filterToEdit$targets = filterToEdit.targets[0].column) == null ? void 0 : _filterToEdit$targets.name))) {\n        resolvedDefaultValue = filterToEdit == null ? void 0 : filterToEdit.defaultValue;\n      }\n      if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n        // deal with getChartDataRequest transforming the response data\n        const result = 'result' in response ? response.result[0] : response;\n        waitForAsyncData(result).\n        then(asyncResult => {\n          setNativeFilterFieldValues(form, filterId, {\n            defaultValueQueriesData: asyncResult,\n            defaultValue: resolvedDefaultValue });\n\n          forceUpdate();\n        }).\n        catch(error => {\n          // TODO: show error once this logic is moved into new NativeFilter\n          //  component\n          console.error(error.message || error.error || t('Check configuration'));\n        });\n      } else\n      {\n        setNativeFilterFieldValues(form, filterId, {\n          defaultValueQueriesData: response.result,\n          defaultValue: resolvedDefaultValue });\n\n        forceUpdate();\n      }\n    });\n  }, [\n  formFilter == null ? void 0 : formFilter.filterType,\n  formFilter == null ? void 0 : formFilter.column,\n  formFilter == null ? void 0 : (_formFilter$dataset4 = formFilter.dataset) == null ? void 0 : _formFilter$dataset4.value,\n  filterId]);\n\n};__signature__(useBackendFormUpdate, \"useForceUpdate{forceUpdate}\\nuseEffect{}\", () => [useForceUpdate]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(useBackendFormUpdate, \"useBackendFormUpdate\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/state.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/state.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect } from 'react';\nimport { FormInstance } from 'antd/lib/form';\nimport { getChartDataRequest } from 'src/chart/chartAction';\nimport { ChartDataResponseResult, t } from '@superset-ui/core';\nimport { FeatureFlag, isFeatureEnabled } from 'src/featureFlags';\nimport { waitForAsyncData } from 'src/middleware/asyncEvent';\nimport { ClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { NativeFiltersForm } from '../types';\nimport { setNativeFilterFieldValues, useForceUpdate } from './utils';\nimport { Filter } from '../../types';\nimport { getFormData } from '../../utils';\n\n// When some fields in form changed we need re-fetch data for Filter defaultValue\n// eslint-disable-next-line import/prefer-default-export\nexport const useBackendFormUpdate = (\n  form: FormInstance<NativeFiltersForm>,\n  filterId: string,\n  filterToEdit?: Filter,\n  hasDatasource?: boolean,\n  hasColumn?: boolean,\n) => {\n  const forceUpdate = useForceUpdate();\n  const formFilter = (form.getFieldValue('filters') || {})[filterId];\n  useEffect(() => {\n    let resolvedDefaultValue: any = null;\n    if (!hasDatasource) {\n      forceUpdate();\n      return;\n    }\n    // No need to check data set change because it cascading update column\n    // So check that column exists is enough\n    if (hasColumn && !formFilter?.column) {\n      setNativeFilterFieldValues(form, filterId, {\n        defaultValueQueriesData: [],\n        defaultValue: resolvedDefaultValue,\n      });\n      return;\n    }\n    if (!formFilter?.dataset?.value) {\n      // no need to make chart data request if no dataset is defined\n      return;\n    }\n    const formData = getFormData({\n      datasetId: formFilter?.dataset?.value,\n      groupby: formFilter?.column,\n      defaultValue: formFilter?.defaultValue,\n      ...formFilter,\n    });\n    setNativeFilterFieldValues(form, filterId, {\n      defaultValueQueriesData: null,\n      defaultValue: resolvedDefaultValue,\n    });\n    forceUpdate();\n    getChartDataRequest({\n      formData,\n      force: false,\n      requestParams: { dashboardId: 0 },\n    }).then(response => {\n      if (\n        filterToEdit?.filterType === formFilter?.filterType &&\n        filterToEdit?.targets[0].datasetId === formFilter?.dataset?.value &&\n        (!hasColumn ||\n          formFilter?.column === filterToEdit?.targets[0].column?.name)\n      ) {\n        resolvedDefaultValue = filterToEdit?.defaultValue;\n      }\n      if (isFeatureEnabled(FeatureFlag.GLOBAL_ASYNC_QUERIES)) {\n        // deal with getChartDataRequest transforming the response data\n        const result = 'result' in response ? response.result[0] : response;\n        waitForAsyncData(result)\n          .then((asyncResult: ChartDataResponseResult[]) => {\n            setNativeFilterFieldValues(form, filterId, {\n              defaultValueQueriesData: asyncResult,\n              defaultValue: resolvedDefaultValue,\n            });\n            forceUpdate();\n          })\n          .catch((error: ClientErrorObject) => {\n            // TODO: show error once this logic is moved into new NativeFilter\n            //  component\n            console.error(\n              error.message || error.error || t('Check configuration'),\n            );\n          });\n      } else {\n        setNativeFilterFieldValues(form, filterId, {\n          defaultValueQueriesData: response.result,\n          defaultValue: resolvedDefaultValue,\n        });\n        forceUpdate();\n      }\n    });\n  }, [\n    formFilter?.filterType,\n    formFilter?.column,\n    formFilter?.dataset?.value,\n    filterId,\n  ]);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}