{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _trimInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/trim\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport InfoTooltip from 'src/common/components/InfoTooltip';\nimport { useSingleViewResource, testDatabaseConnection } from 'src/views/CRUD/hooks';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport Icon from 'src/components/Icon';\nimport Modal from 'src/common/components/Modal';\nimport Tabs from 'src/common/components/Tabs';\nimport Button from 'src/components/Button';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport { JsonEditor } from 'src/components/AsyncAceEditor';\nimport { useCommonConf } from './state';import { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst DEFAULT_TAB_KEY = '1';\nconst StyledIcon = styled(Icon)`\n  margin: auto ${({ theme }) => theme.gridUnit * 2}px auto 0;\n`;\nconst StyledInputContainer = styled.div`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .helper {\n    display: block;\n    padding: ${({ theme }) => theme.gridUnit}px 0;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n    font-size: ${({ theme }) => theme.typography.sizes.s - 1}px;\n    text-align: left;\n\n    .required {\n      margin-left: ${({ theme }) => theme.gridUnit / 2}px;\n      color: ${({ theme }) => theme.colors.error.base};\n    }\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\nconst StyledJsonEditor = styled(JsonEditor)`\n  flex: 1 1 auto;\n  border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  border-radius: ${({ theme }) => theme.gridUnit}px;\n`;\nconst DatabaseModal = ({ addDangerToast, addSuccessToast, onDatabaseAdd, onHide, show, database = null }) => {var _conf$SQLALCHEMY_DOCS, _conf$SQLALCHEMY_DISP, _ref;\n  const [disableSave, setDisableSave] = useState(true);\n  const [db, setDB] = useState(null);\n  const [isHidden, setIsHidden] = useState(true);\n  const [tabKey, setTabKey] = useState(DEFAULT_TAB_KEY);\n  const conf = useCommonConf();\n  const isEditMode = database !== null;\n  const defaultExtra = '{\\n  \"metadata_params\": {},\\n  \"engine_params\": {},' +\n  '\\n  \"metadata_cache_timeout\": {},\\n  \"schemas_allowed_for_csv_upload\": [] \\n}';\n  // Database fetch logic\n  const { state: { loading: dbLoading, resource: dbFetched }, fetchResource, createResource, updateResource } = useSingleViewResource('database', t('database'), addDangerToast);\n  // Test Connection logic\n  const testConnection = () => {var _context, _context2;\n    if (!db || !db.sqlalchemy_uri || !db.sqlalchemy_uri.length) {\n      addDangerToast(t('Please enter a SQLAlchemy URI to test'));\n      return;\n    }\n    const connection = {\n      sqlalchemy_uri: db ? db.sqlalchemy_uri : '',\n      database_name: db && _trimInstanceProperty(_context = db.database_name).call(_context).length ?\n      _trimInstanceProperty(_context2 = db.database_name).call(_context2) :\n      undefined,\n      impersonate_user: db ? db.impersonate_user || undefined : undefined,\n      extra: db && db.extra && db.extra.length ? db.extra : undefined,\n      encrypted_extra: db ? db.encrypted_extra || undefined : undefined,\n      server_cert: db ? db.server_cert || undefined : undefined };\n\n    testDatabaseConnection(connection, addDangerToast, addSuccessToast);\n  };\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n  };\n  const onSave = () => {\n    if (isEditMode) {var _context3;\n      // Edit\n      const update = {\n        database_name: db ? _trimInstanceProperty(_context3 = db.database_name).call(_context3) : '',\n        sqlalchemy_uri: db ? db.sqlalchemy_uri : '',\n        ...db };\n\n      // Need to clean update object\n      if (update.id) {\n        delete update.id;\n      }\n      if (db && db.id) {\n        updateResource(db.id, update).then(result => {\n          if (result) {\n            if (onDatabaseAdd) {\n              onDatabaseAdd();\n            }\n            hide();\n          }\n        });\n      }\n    } else\n    if (db) {var _context4;\n      // Create\n      db.database_name = _trimInstanceProperty(_context4 = db.database_name).call(_context4);\n      createResource(db).then(dbId => {\n        if (dbId) {\n          if (onDatabaseAdd) {\n            onDatabaseAdd();\n          }\n          hide();\n        }\n      });\n    }\n  };\n  const onInputChange = event => {\n    const { target } = event;\n    const data = {\n      database_name: db ? db.database_name : '',\n      sqlalchemy_uri: db ? db.sqlalchemy_uri : '',\n      ...db };\n\n    if (target.type === 'checkbox') {\n      data[target.name] = target.checked;\n    } else\n    {\n      data[target.name] = target.value;\n    }\n    setDB(data);\n  };\n  const onTextChange = event => {\n    const { target } = event;\n    const data = {\n      database_name: db ? db.database_name : '',\n      sqlalchemy_uri: db ? db.sqlalchemy_uri : '',\n      ...db };\n\n    data[target.name] = target.value;\n    setDB(data);\n  };\n  const onEditorChange = (json, name) => {\n    const data = {\n      database_name: db ? db.database_name : '',\n      sqlalchemy_uri: db ? db.sqlalchemy_uri : '',\n      ...db };\n\n    data[name] = json;\n    setDB(data);\n  };\n  const validate = () => {var _context5;\n    if (db &&\n    _trimInstanceProperty(_context5 = db.database_name).call(_context5).length &&\n    db.sqlalchemy_uri &&\n    db.sqlalchemy_uri.length) {\n      setDisableSave(false);\n    } else\n    {\n      setDisableSave(true);\n    }\n  };\n  // Initialize\n  if (isEditMode && (\n  !db || !db.id || database && database.id !== db.id || isHidden && show)) {\n    if (database && database.id !== null && !dbLoading) {\n      const id = database.id || 0;\n      setTabKey(DEFAULT_TAB_KEY);\n      fetchResource(id).\n      then(() => {\n        setDB(dbFetched);\n      }).\n      catch(errMsg => addDangerToast(t('Sorry there was an error fetching database information: %s', errMsg.message)));\n    }\n  } else\n  if (!isEditMode && (!db || db.id || isHidden && show)) {\n    setTabKey(DEFAULT_TAB_KEY);\n    setDB({\n      database_name: '',\n      sqlalchemy_uri: '' });\n\n  }\n  // Validation\n  useEffect(() => {\n    validate();\n  }, [db ? db.database_name : null, db ? db.sqlalchemy_uri : null]);\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n  const tabChange = key => {\n    setTabKey(key);\n  };\n  return ___EmotionJSX(Modal, { name: \"database\", className: \"database-modal\", disablePrimaryButton: disableSave, onHandledPrimaryAction: onSave, onHide: hide, primaryButtonName: isEditMode ? t('Save') : t('Add'), width: \"750px\", show: show, title: ___EmotionJSX(\"h4\", null,\n    ___EmotionJSX(StyledIcon, { name: \"database\" }),\n    isEditMode ? t('Edit database') : t('Add database')) },\n\n  ___EmotionJSX(Tabs, { defaultActiveKey: DEFAULT_TAB_KEY, activeKey: tabKey, onTabClick: tabChange },\n  ___EmotionJSX(Tabs.TabPane, { tab: ___EmotionJSX(\"span\", null,\n    t('Connection'),\n    ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n    key: \"1\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('Database name'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"database_name\", value: db ? db.database_name : '', placeholder: t('Name your dataset'), onChange: onInputChange }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  t('SQLAlchemy URI'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"sqlalchemy_uri\", value: db ? db.sqlalchemy_uri : '', autoComplete: \"off\", placeholder: t('dialect+driver://username:password@host:port/database'), onChange: onInputChange }),\n  ___EmotionJSX(Button, { buttonStyle: \"primary\", onClick: testConnection, cta: true },\n  t('Test connection'))),\n\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Refer to the '),\n  ___EmotionJSX(\"a\", { href: (_conf$SQLALCHEMY_DOCS = conf == null ? void 0 : conf.SQLALCHEMY_DOCS_URL) != null ? _conf$SQLALCHEMY_DOCS : '', target: \"_blank\", rel: \"noopener noreferrer\" }, (_conf$SQLALCHEMY_DISP =\n  conf == null ? void 0 : conf.SQLALCHEMY_DISPLAY_TEXT) != null ? _conf$SQLALCHEMY_DISP : ''),\n\n  t(' for more information on how to structure your URI.')))),\n\n\n\n  ___EmotionJSX(Tabs.TabPane, { tab: ___EmotionJSX(\"span\", null, t('Performance')), key: \"2\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Chart cache timeout')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"number\", name: \"cache_timeout\", value: db ? db.cache_timeout || '' : '', placeholder: t('Chart cache timeout'), onChange: onInputChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Duration (in seconds) of the caching timeout for charts of this database.' +\n  ' A timeout of 0 indicates that the cache never expires.' +\n  ' Note this defaults to the global timeout if undefined.'))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_run_async\", indeterminate: false, checked: db ? !!db.allow_run_async : false, onChange: onInputChange }),\n  ___EmotionJSX(\"div\", null, t('Asynchronous query execution')),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Operate the database in asynchronous mode, meaning that the queries ' +\n    'are executed on remote workers as opposed to on the web server itself. ' +\n    'This assumes that you have a Celery worker setup as well as a results ' +\n    'backend. Refer to the installation docs for more information.') })))),\n\n\n\n  ___EmotionJSX(Tabs.TabPane, { tab: ___EmotionJSX(\"span\", null, t('SQL Lab settings')), key: \"3\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"expose_in_sqllab\", indeterminate: false, checked: db ? !!db.expose_in_sqllab : false, onChange: onInputChange }),\n  ___EmotionJSX(\"div\", null, t('Expose in SQL Lab')),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow this database to be queried in SQL Lab') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_ctas\", indeterminate: false, checked: db ? !!db.allow_ctas : false, onChange: onInputChange }),\n  ___EmotionJSX(\"div\", null, t('Allow CREATE TABLE AS')),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow creation of new tables based on queries') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_cvas\", indeterminate: false, checked: db ? !!db.allow_cvas : false, onChange: onInputChange }),\n  ___EmotionJSX(\"div\", null, t('Allow CREATE VIEW AS')),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow creation of new views based on queries') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_dml\", indeterminate: false, checked: db ? !!db.allow_dml : false, onChange: onInputChange }),\n  ___EmotionJSX(\"div\", null, t('Allow DML')),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow manipulation of the database using non-SELECT statements such as UPDATE, DELETE, CREATE, etc.') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_multi_schema_metadata_fetch\", indeterminate: false, checked: db ? !!db.allow_multi_schema_metadata_fetch : false, onChange: onInputChange }),\n  ___EmotionJSX(\"div\", null, t('Allow multi schema metadata fetch')),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('Allow SQL Lab to fetch a list of all tables and all views across all database ' +\n    'schemas. For large data warehouse with thousands of tables, this can be ' +\n    'expensive and put strain on the system.') })))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('CTAS schema')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"input\", { type: \"text\", name: \"force_ctas_schema\", value: db ? db.force_ctas_schema || '' : '', placeholder: t('CTAS schema'), onChange: onInputChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('When allowing CREATE TABLE AS option in SQL Lab, this option ' +\n  'forces the table to be created in this schema.')))),\n\n\n\n  ___EmotionJSX(Tabs.TabPane, { tab: ___EmotionJSX(\"span\", null, t('Security')), key: \"4\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Secure extra')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(StyledJsonEditor, { name: \"encrypted_extra\", value: db ? db.encrypted_extra || '' : '', placeholder: t('Secure extra'), onChange: json => onEditorChange(json, 'encrypted_extra'), width: \"100%\", height: \"160px\" })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  ___EmotionJSX(\"div\", null,\n  t('JSON string containing additional connection configuration.')),\n\n  ___EmotionJSX(\"div\", null,\n  t('This is used to provide connection information for systems like Hive, ' +\n  'Presto, and BigQuery, which do not conform to the username:password syntax ' +\n  'normally used by SQLAlchemy.')))),\n\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Root certificate')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(\"textarea\", { name: \"server_cert\", value: db ? db.server_cert || '' : '', placeholder: t('Root certificate'), onChange: onTextChange })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  t('Optional CA_BUNDLE contents to validate HTTPS requests. Only available on ' +\n  'certain database engines.')))),\n\n\n\n  ___EmotionJSX(Tabs.TabPane, { tab: ___EmotionJSX(\"span\", null, t('Extra')), key: \"5\" },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"impersonate_user\", indeterminate: false, checked: db ? !!db.impersonate_user : false, onChange: onInputChange }),\n  ___EmotionJSX(\"div\", null, t('Impersonate Logged In User (Presto & Hive)')),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('If Presto, all the queries in SQL Lab are going to be executed as the ' +\n    'currently logged on user who must have permission to run them. If Hive ' +\n    'and hive.server2.enable.doAs is enabled, will run the queries as ' +\n    'service account, but impersonate the currently logged on user via ' +\n    'hive.server2.proxy.user property.') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(IndeterminateCheckbox, { id: \"allow_csv_upload\", indeterminate: false, checked: db ? !!db.allow_csv_upload : false, onChange: onInputChange }),\n  ___EmotionJSX(\"div\", null, t('Allow data upload')),\n  ___EmotionJSX(InfoTooltip, { tooltip: t('If selected, please set the schemas allowed for data upload in Extra.') }))),\n\n\n  ___EmotionJSX(StyledInputContainer, { className: \"extra-container\" },\n  ___EmotionJSX(\"div\", { className: \"control-label\" }, t('Extra')),\n  ___EmotionJSX(\"div\", { className: \"input-container\" },\n  ___EmotionJSX(StyledJsonEditor, { name: \"extra\", value: (_ref = db && db.extra) != null ? _ref : defaultExtra, placeholder: t('Secure extra'), onChange: json => onEditorChange(json, 'extra'), width: \"100%\", height: \"160px\" })),\n\n  ___EmotionJSX(\"div\", { className: \"helper\" },\n  ___EmotionJSX(\"div\", null,\n  t('JSON string containing extra configuration elements.')),\n\n  ___EmotionJSX(\"div\", null,\n  t('1. The engine_params object gets unpacked into the sqlalchemy.create_engine ' +\n  'call, while the metadata_params gets unpacked into the sqlalchemy.MetaData ' +\n  'call.')),\n\n  ___EmotionJSX(\"div\", null,\n  t('2. The metadata_cache_timeout is a cache timeout setting in seconds for ' +\n  'metadata fetch of this database. Specify it as \"metadata_cache_timeout\": ' +\n  '{\"schema_cache_timeout\": 600, \"table_cache_timeout\": 600}. If unset, cache ' +\n  'will not be enabled for the functionality. A timeout of 0 indicates that ' +\n  'the cache never expires.')),\n\n  ___EmotionJSX(\"div\", null,\n  t('3. The schemas_allowed_for_csv_upload is a comma separated list of schemas ' +\n  'that CSVs are allowed to upload to. Specify it as ' +\n  '\"schemas_allowed_for_csv_upload\": [\"public\", \"csv_upload\"]. If database ' +\n  'flavor does not support schema or any schema is allowed to be accessed, ' +\n  'just leave the list empty.')),\n\n  ___EmotionJSX(\"div\", null,\n  t(\"4. The version field is a string specifying this db's version. This \" +\n  'should be used with Presto DBs so that the syntax is correct.')),\n\n  ___EmotionJSX(\"div\", null,\n  t('5. The allows_virtual_table_explore field is a boolean specifying whether ' +\n  'or not the Explore button in SQL Lab results is shown.')))))));\n\n\n\n\n\n\n};__signature__(DatabaseModal, \"useState{[disableSave, setDisableSave](true)}\\nuseState{[db, setDB](null)}\\nuseState{[isHidden, setIsHidden](true)}\\nuseState{[tabKey, setTabKey](DEFAULT_TAB_KEY)}\\nuseCommonConf{conf}\\nuseSingleViewResource{{ state: { loading: dbLoading, resource: dbFetched }, fetchResource, createResource, updateResource, }}\\nuseEffect{}\", () => [useCommonConf, useSingleViewResource]);const _default =\nwithToasts(DatabaseModal);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DEFAULT_TAB_KEY, \"DEFAULT_TAB_KEY\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal.tsx\");reactHotLoader.register(StyledIcon, \"StyledIcon\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal.tsx\");reactHotLoader.register(StyledInputContainer, \"StyledInputContainer\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal.tsx\");reactHotLoader.register(StyledJsonEditor, \"StyledJsonEditor\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal.tsx\");reactHotLoader.register(DatabaseModal, \"DatabaseModal\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/views/CRUD/data/database/DatabaseModal.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useState, useEffect } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport InfoTooltip from 'src/common/components/InfoTooltip';\nimport {\n  useSingleViewResource,\n  testDatabaseConnection,\n} from 'src/views/CRUD/hooks';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport Icon from 'src/components/Icon';\nimport Modal from 'src/common/components/Modal';\nimport Tabs from 'src/common/components/Tabs';\nimport Button from 'src/components/Button';\nimport IndeterminateCheckbox from 'src/components/IndeterminateCheckbox';\nimport { JsonEditor } from 'src/components/AsyncAceEditor';\nimport { DatabaseObject } from './types';\nimport { useCommonConf } from './state';\n\ninterface DatabaseModalProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onDatabaseAdd?: (database?: DatabaseObject) => void; // TODO: should we add a separate function for edit?\n  onHide: () => void;\n  show: boolean;\n  database?: DatabaseObject | null; // If included, will go into edit mode\n}\n\nconst DEFAULT_TAB_KEY = '1';\nconst StyledIcon = styled(Icon)`\n  margin: auto ${({ theme }) => theme.gridUnit * 2}px auto 0;\n`;\n\nconst StyledInputContainer = styled.div`\n  margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .helper {\n    display: block;\n    padding: ${({ theme }) => theme.gridUnit}px 0;\n    color: ${({ theme }) => theme.colors.grayscale.base};\n    font-size: ${({ theme }) => theme.typography.sizes.s - 1}px;\n    text-align: left;\n\n    .required {\n      margin-left: ${({ theme }) => theme.gridUnit / 2}px;\n      color: ${({ theme }) => theme.colors.error.base};\n    }\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nconst StyledJsonEditor = styled(JsonEditor)`\n  flex: 1 1 auto;\n  border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n  border-radius: ${({ theme }) => theme.gridUnit}px;\n`;\n\nconst DatabaseModal: FunctionComponent<DatabaseModalProps> = ({\n  addDangerToast,\n  addSuccessToast,\n  onDatabaseAdd,\n  onHide,\n  show,\n  database = null,\n}) => {\n  const [disableSave, setDisableSave] = useState<boolean>(true);\n  const [db, setDB] = useState<DatabaseObject | null>(null);\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [tabKey, setTabKey] = useState<string>(DEFAULT_TAB_KEY);\n  const conf = useCommonConf();\n\n  const isEditMode = database !== null;\n  const defaultExtra =\n    '{\\n  \"metadata_params\": {},\\n  \"engine_params\": {},' +\n    '\\n  \"metadata_cache_timeout\": {},\\n  \"schemas_allowed_for_csv_upload\": [] \\n}';\n\n  // Database fetch logic\n  const {\n    state: { loading: dbLoading, resource: dbFetched },\n    fetchResource,\n    createResource,\n    updateResource,\n  } = useSingleViewResource<DatabaseObject>(\n    'database',\n    t('database'),\n    addDangerToast,\n  );\n\n  // Test Connection logic\n  const testConnection = () => {\n    if (!db || !db.sqlalchemy_uri || !db.sqlalchemy_uri.length) {\n      addDangerToast(t('Please enter a SQLAlchemy URI to test'));\n      return;\n    }\n\n    const connection = {\n      sqlalchemy_uri: db ? db.sqlalchemy_uri : '',\n      database_name:\n        db && db.database_name.trim().length\n          ? db.database_name.trim()\n          : undefined,\n      impersonate_user: db ? db.impersonate_user || undefined : undefined,\n      extra: db && db.extra && db.extra.length ? db.extra : undefined,\n      encrypted_extra: db ? db.encrypted_extra || undefined : undefined,\n      server_cert: db ? db.server_cert || undefined : undefined,\n    };\n\n    testDatabaseConnection(connection, addDangerToast, addSuccessToast);\n  };\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n  };\n\n  const onSave = () => {\n    if (isEditMode) {\n      // Edit\n      const update: DatabaseObject = {\n        database_name: db ? db.database_name.trim() : '',\n        sqlalchemy_uri: db ? db.sqlalchemy_uri : '',\n        ...db,\n      };\n\n      // Need to clean update object\n      if (update.id) {\n        delete update.id;\n      }\n\n      if (db && db.id) {\n        updateResource(db.id, update).then(result => {\n          if (result) {\n            if (onDatabaseAdd) {\n              onDatabaseAdd();\n            }\n            hide();\n          }\n        });\n      }\n    } else if (db) {\n      // Create\n      db.database_name = db.database_name.trim();\n      createResource(db).then(dbId => {\n        if (dbId) {\n          if (onDatabaseAdd) {\n            onDatabaseAdd();\n          }\n          hide();\n        }\n      });\n    }\n  };\n\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    const data = {\n      database_name: db ? db.database_name : '',\n      sqlalchemy_uri: db ? db.sqlalchemy_uri : '',\n      ...db,\n    };\n\n    if (target.type === 'checkbox') {\n      data[target.name] = target.checked;\n    } else {\n      data[target.name] = target.value;\n    }\n\n    setDB(data);\n  };\n\n  const onTextChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const { target } = event;\n    const data = {\n      database_name: db ? db.database_name : '',\n      sqlalchemy_uri: db ? db.sqlalchemy_uri : '',\n      ...db,\n    };\n\n    data[target.name] = target.value;\n    setDB(data);\n  };\n\n  const onEditorChange = (json: string, name: string) => {\n    const data = {\n      database_name: db ? db.database_name : '',\n      sqlalchemy_uri: db ? db.sqlalchemy_uri : '',\n      ...db,\n    };\n\n    data[name] = json;\n    setDB(data);\n  };\n\n  const validate = () => {\n    if (\n      db &&\n      db.database_name.trim().length &&\n      db.sqlalchemy_uri &&\n      db.sqlalchemy_uri.length\n    ) {\n      setDisableSave(false);\n    } else {\n      setDisableSave(true);\n    }\n  };\n\n  // Initialize\n  if (\n    isEditMode &&\n    (!db || !db.id || (database && database.id !== db.id) || (isHidden && show))\n  ) {\n    if (database && database.id !== null && !dbLoading) {\n      const id = database.id || 0;\n      setTabKey(DEFAULT_TAB_KEY);\n\n      fetchResource(id)\n        .then(() => {\n          setDB(dbFetched);\n        })\n        .catch(errMsg =>\n          addDangerToast(\n            t(\n              'Sorry there was an error fetching database information: %s',\n              errMsg.message,\n            ),\n          ),\n        );\n    }\n  } else if (!isEditMode && (!db || db.id || (isHidden && show))) {\n    setTabKey(DEFAULT_TAB_KEY);\n    setDB({\n      database_name: '',\n      sqlalchemy_uri: '',\n    });\n  }\n\n  // Validation\n  useEffect(() => {\n    validate();\n  }, [db ? db.database_name : null, db ? db.sqlalchemy_uri : null]);\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  const tabChange = (key: string) => {\n    setTabKey(key);\n  };\n\n  return (\n    <Modal\n      name=\"database\"\n      className=\"database-modal\"\n      disablePrimaryButton={disableSave}\n      onHandledPrimaryAction={onSave}\n      onHide={hide}\n      primaryButtonName={isEditMode ? t('Save') : t('Add')}\n      width=\"750px\"\n      show={show}\n      title={\n        <h4>\n          <StyledIcon name=\"database\" />\n          {isEditMode ? t('Edit database') : t('Add database')}\n        </h4>\n      }\n    >\n      <Tabs\n        defaultActiveKey={DEFAULT_TAB_KEY}\n        activeKey={tabKey}\n        onTabClick={tabChange}\n      >\n        <Tabs.TabPane\n          tab={\n            <span>\n              {t('Connection')}\n              <span className=\"required\">*</span>\n            </span>\n          }\n          key=\"1\"\n        >\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('Database name')}\n              <span className=\"required\">*</span>\n            </div>\n            <div className=\"input-container\">\n              <input\n                type=\"text\"\n                name=\"database_name\"\n                value={db ? db.database_name : ''}\n                placeholder={t('Name your dataset')}\n                onChange={onInputChange}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">\n              {t('SQLAlchemy URI')}\n              <span className=\"required\">*</span>\n            </div>\n            <div className=\"input-container\">\n              <input\n                type=\"text\"\n                name=\"sqlalchemy_uri\"\n                value={db ? db.sqlalchemy_uri : ''}\n                autoComplete=\"off\"\n                placeholder={t(\n                  'dialect+driver://username:password@host:port/database',\n                )}\n                onChange={onInputChange}\n              />\n              <Button buttonStyle=\"primary\" onClick={testConnection} cta>\n                {t('Test connection')}\n              </Button>\n            </div>\n            <div className=\"helper\">\n              {t('Refer to the ')}\n              <a\n                href={conf?.SQLALCHEMY_DOCS_URL ?? ''}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {conf?.SQLALCHEMY_DISPLAY_TEXT ?? ''}\n              </a>\n              {t(' for more information on how to structure your URI.')}\n            </div>\n          </StyledInputContainer>\n        </Tabs.TabPane>\n        <Tabs.TabPane tab={<span>{t('Performance')}</span>} key=\"2\">\n          <StyledInputContainer>\n            <div className=\"control-label\">{t('Chart cache timeout')}</div>\n            <div className=\"input-container\">\n              <input\n                type=\"number\"\n                name=\"cache_timeout\"\n                value={db ? db.cache_timeout || '' : ''}\n                placeholder={t('Chart cache timeout')}\n                onChange={onInputChange}\n              />\n            </div>\n            <div className=\"helper\">\n              {t(\n                'Duration (in seconds) of the caching timeout for charts of this database.' +\n                  ' A timeout of 0 indicates that the cache never expires.' +\n                  ' Note this defaults to the global timeout if undefined.',\n              )}\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"input-container\">\n              <IndeterminateCheckbox\n                id=\"allow_run_async\"\n                indeterminate={false}\n                checked={db ? !!db.allow_run_async : false}\n                onChange={onInputChange}\n              />\n              <div>{t('Asynchronous query execution')}</div>\n              <InfoTooltip\n                tooltip={t(\n                  'Operate the database in asynchronous mode, meaning that the queries ' +\n                    'are executed on remote workers as opposed to on the web server itself. ' +\n                    'This assumes that you have a Celery worker setup as well as a results ' +\n                    'backend. Refer to the installation docs for more information.',\n                )}\n              />\n            </div>\n          </StyledInputContainer>\n        </Tabs.TabPane>\n        <Tabs.TabPane tab={<span>{t('SQL Lab settings')}</span>} key=\"3\">\n          <StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"input-container\">\n                <IndeterminateCheckbox\n                  id=\"expose_in_sqllab\"\n                  indeterminate={false}\n                  checked={db ? !!db.expose_in_sqllab : false}\n                  onChange={onInputChange}\n                />\n                <div>{t('Expose in SQL Lab')}</div>\n                <InfoTooltip\n                  tooltip={t('Allow this database to be queried in SQL Lab')}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"input-container\">\n                <IndeterminateCheckbox\n                  id=\"allow_ctas\"\n                  indeterminate={false}\n                  checked={db ? !!db.allow_ctas : false}\n                  onChange={onInputChange}\n                />\n                <div>{t('Allow CREATE TABLE AS')}</div>\n                <InfoTooltip\n                  tooltip={t('Allow creation of new tables based on queries')}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"input-container\">\n                <IndeterminateCheckbox\n                  id=\"allow_cvas\"\n                  indeterminate={false}\n                  checked={db ? !!db.allow_cvas : false}\n                  onChange={onInputChange}\n                />\n                <div>{t('Allow CREATE VIEW AS')}</div>\n                <InfoTooltip\n                  tooltip={t('Allow creation of new views based on queries')}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"input-container\">\n                <IndeterminateCheckbox\n                  id=\"allow_dml\"\n                  indeterminate={false}\n                  checked={db ? !!db.allow_dml : false}\n                  onChange={onInputChange}\n                />\n                <div>{t('Allow DML')}</div>\n                <InfoTooltip\n                  tooltip={t(\n                    'Allow manipulation of the database using non-SELECT statements such as UPDATE, DELETE, CREATE, etc.',\n                  )}\n                />\n              </div>\n            </StyledInputContainer>\n            <StyledInputContainer>\n              <div className=\"input-container\">\n                <IndeterminateCheckbox\n                  id=\"allow_multi_schema_metadata_fetch\"\n                  indeterminate={false}\n                  checked={db ? !!db.allow_multi_schema_metadata_fetch : false}\n                  onChange={onInputChange}\n                />\n                <div>{t('Allow multi schema metadata fetch')}</div>\n                <InfoTooltip\n                  tooltip={t(\n                    'Allow SQL Lab to fetch a list of all tables and all views across all database ' +\n                      'schemas. For large data warehouse with thousands of tables, this can be ' +\n                      'expensive and put strain on the system.',\n                  )}\n                />\n              </div>\n            </StyledInputContainer>\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">{t('CTAS schema')}</div>\n            <div className=\"input-container\">\n              <input\n                type=\"text\"\n                name=\"force_ctas_schema\"\n                value={db ? db.force_ctas_schema || '' : ''}\n                placeholder={t('CTAS schema')}\n                onChange={onInputChange}\n              />\n            </div>\n            <div className=\"helper\">\n              {t(\n                'When allowing CREATE TABLE AS option in SQL Lab, this option ' +\n                  'forces the table to be created in this schema.',\n              )}\n            </div>\n          </StyledInputContainer>\n        </Tabs.TabPane>\n        <Tabs.TabPane tab={<span>{t('Security')}</span>} key=\"4\">\n          <StyledInputContainer>\n            <div className=\"control-label\">{t('Secure extra')}</div>\n            <div className=\"input-container\">\n              <StyledJsonEditor\n                name=\"encrypted_extra\"\n                value={db ? db.encrypted_extra || '' : ''}\n                placeholder={t('Secure extra')}\n                onChange={(json: string) =>\n                  onEditorChange(json, 'encrypted_extra')\n                }\n                width=\"100%\"\n                height=\"160px\"\n              />\n            </div>\n            <div className=\"helper\">\n              <div>\n                {t(\n                  'JSON string containing additional connection configuration.',\n                )}\n              </div>\n              <div>\n                {t(\n                  'This is used to provide connection information for systems like Hive, ' +\n                    'Presto, and BigQuery, which do not conform to the username:password syntax ' +\n                    'normally used by SQLAlchemy.',\n                )}\n              </div>\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"control-label\">{t('Root certificate')}</div>\n            <div className=\"input-container\">\n              <textarea\n                name=\"server_cert\"\n                value={db ? db.server_cert || '' : ''}\n                placeholder={t('Root certificate')}\n                onChange={onTextChange}\n              />\n            </div>\n            <div className=\"helper\">\n              {t(\n                'Optional CA_BUNDLE contents to validate HTTPS requests. Only available on ' +\n                  'certain database engines.',\n              )}\n            </div>\n          </StyledInputContainer>\n        </Tabs.TabPane>\n        <Tabs.TabPane tab={<span>{t('Extra')}</span>} key=\"5\">\n          <StyledInputContainer>\n            <div className=\"input-container\">\n              <IndeterminateCheckbox\n                id=\"impersonate_user\"\n                indeterminate={false}\n                checked={db ? !!db.impersonate_user : false}\n                onChange={onInputChange}\n              />\n              <div>{t('Impersonate Logged In User (Presto & Hive)')}</div>\n              <InfoTooltip\n                tooltip={t(\n                  'If Presto, all the queries in SQL Lab are going to be executed as the ' +\n                    'currently logged on user who must have permission to run them. If Hive ' +\n                    'and hive.server2.enable.doAs is enabled, will run the queries as ' +\n                    'service account, but impersonate the currently logged on user via ' +\n                    'hive.server2.proxy.user property.',\n                )}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer>\n            <div className=\"input-container\">\n              <IndeterminateCheckbox\n                id=\"allow_csv_upload\"\n                indeterminate={false}\n                checked={db ? !!db.allow_csv_upload : false}\n                onChange={onInputChange}\n              />\n              <div>{t('Allow data upload')}</div>\n              <InfoTooltip\n                tooltip={t(\n                  'If selected, please set the schemas allowed for data upload in Extra.',\n                )}\n              />\n            </div>\n          </StyledInputContainer>\n          <StyledInputContainer className=\"extra-container\">\n            <div className=\"control-label\">{t('Extra')}</div>\n            <div className=\"input-container\">\n              <StyledJsonEditor\n                name=\"extra\"\n                value={(db && db.extra) ?? defaultExtra}\n                placeholder={t('Secure extra')}\n                onChange={(json: string) => onEditorChange(json, 'extra')}\n                width=\"100%\"\n                height=\"160px\"\n              />\n            </div>\n            <div className=\"helper\">\n              <div>\n                {t('JSON string containing extra configuration elements.')}\n              </div>\n              <div>\n                {t(\n                  '1. The engine_params object gets unpacked into the sqlalchemy.create_engine ' +\n                    'call, while the metadata_params gets unpacked into the sqlalchemy.MetaData ' +\n                    'call.',\n                )}\n              </div>\n              <div>\n                {t(\n                  '2. The metadata_cache_timeout is a cache timeout setting in seconds for ' +\n                    'metadata fetch of this database. Specify it as \"metadata_cache_timeout\": ' +\n                    '{\"schema_cache_timeout\": 600, \"table_cache_timeout\": 600}. If unset, cache ' +\n                    'will not be enabled for the functionality. A timeout of 0 indicates that ' +\n                    'the cache never expires.',\n                )}\n              </div>\n              <div>\n                {t(\n                  '3. The schemas_allowed_for_csv_upload is a comma separated list of schemas ' +\n                    'that CSVs are allowed to upload to. Specify it as ' +\n                    '\"schemas_allowed_for_csv_upload\": [\"public\", \"csv_upload\"]. If database ' +\n                    'flavor does not support schema or any schema is allowed to be accessed, ' +\n                    'just leave the list empty.',\n                )}\n              </div>\n              <div>\n                {t(\n                  \"4. The version field is a string specifying this db's version. This \" +\n                    'should be used with Presto DBs so that the syntax is correct.',\n                )}\n              </div>\n              <div>\n                {t(\n                  '5. The allows_virtual_table_explore field is a boolean specifying whether ' +\n                    'or not the Explore button in SQL Lab results is shown.',\n                )}\n              </div>\n            </div>\n          </StyledInputContainer>\n        </Tabs.TabPane>\n      </Tabs>\n    </Modal>\n  );\n};\n\nexport default withToasts(DatabaseModal);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}