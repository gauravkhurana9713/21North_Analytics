{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable no-param-reassign */\n// <- When we work with Immer, we need reassign, so disabling lint\nimport produce from 'immer';\nimport { DataMaskType } from './types';\nimport { SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE, UPDATE_DATA_MASK } from './actions';\nexport function getInitialMask(id) {\n  return {\n    id,\n    extraFormData: {},\n    currentState: {} };\n\n}\nconst setUnitDataMask = (unitName, action, dataMaskState) => {\n  if (action[unitName]) {\n    dataMaskState[unitName][action.filterId] = {\n      ...action[unitName],\n      id: action.filterId };\n\n  }\n};\nconst dataMaskReducer = produce((draft, action) => {var _context, _context2, _action$filterConfig;\n  const oldData = { ...draft };\n  switch (action.type) {\n    case UPDATE_DATA_MASK:\n      _forEachInstanceProperty(_context = _Object$values(DataMaskType)).call(_context, unitName => setUnitDataMask(unitName, action, draft));\n      break;\n    case SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE:\n      draft[action.unitName] = {};\n      _forEachInstanceProperty(_context2 = (_action$filterConfig = action.filterConfig) != null ? _action$filterConfig : []).call(_context2, filter => {var _oldData$action$unitN;\n        draft[action.unitName][filter.id] = (_oldData$action$unitN =\n        oldData[action.unitName][filter.id]) != null ? _oldData$action$unitN : getInitialMask(filter.id);\n      });\n      break;\n    default:}\n\n}, {\n  [DataMaskType.NativeFilters]: {},\n  [DataMaskType.CrossFilters]: {},\n  [DataMaskType.OwnFilters]: {} });const _default =\n\ndataMaskReducer;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getInitialMask, \"getInitialMask\", \"/app/superset-frontend/src/dataMask/reducer.ts\");reactHotLoader.register(setUnitDataMask, \"setUnitDataMask\", \"/app/superset-frontend/src/dataMask/reducer.ts\");reactHotLoader.register(dataMaskReducer, \"dataMaskReducer\", \"/app/superset-frontend/src/dataMask/reducer.ts\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dataMask/reducer.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dataMask/reducer.ts"],"names":[],"mappings":"wdAAA;;;;;;;;;;;;;;;;;AAiBG;AAEH;AACA;AACA,OAAO,OAAP,MAAoB,OAApB;AACA,SAAqB,YAArB,QAAoE,SAApE;AACA,SAEE,wCAFF,EAGE,gBAHF,QAKO,WALP;AAOA,OAAM,SAAU,cAAV,CAAyB,EAAzB,EAAmC;AACvC,SAAO;AACL,IAAA,EADK;AAEL,IAAA,aAAa,EAAE,EAFV;AAGL,IAAA,YAAY,EAAE,EAHT,EAAP;;AAKD;AAED,MAAM,eAAe,GAAG,CACtB,QADsB,EAEtB,MAFsB,EAGtB,aAHsB,KAIpB;AACF,MAAI,MAAM,CAAC,QAAD,CAAV,EAAsB;AACpB,IAAA,aAAa,CAAC,QAAD,CAAb,CAAwB,MAAM,CAAC,QAA/B,IAA2C;AACzC,SAAI,MAAM,CAAC,QAAD,CAD+B;AAEzC,MAAA,EAAE,EAAE,MAAM,CAAC,QAF8B,EAA3C;;AAID;AACF,CAXD;AAaA,MAAM,eAAe,GAAG,OAAO,CAC7B,CAAC,KAAD,EAA6B,MAA7B,KAA0D;AACxD,QAAM,OAAO,GAAG,EAAE,GAAG,KAAL,EAAhB;AACA,UAAQ,MAAM,CAAC,IAAf;AACE,SAAK,gBAAL;AACE,yDAAc,YAAd,kBAAoC,QAAQ,IAC1C,eAAe,CAAC,QAAD,EAAW,MAAX,EAAmB,KAAnB,CADjB;AAGA;AAEF,SAAK,wCAAL;AACE,MAAA,KAAK,CAAC,MAAM,CAAC,QAAR,CAAL,GAAyB,EAAzB;AACA,mEAAC,MAAM,CAAC,YAAR,mCAAwB,EAAxB,kBAAoC,MAAM,IAAG;AAC3C,QAAA,KAAK,CAAC,MAAM,CAAC,QAAR,CAAL,CAAuB,MAAM,CAAC,EAA9B;AACE,QAAA,OAAO,CAAC,MAAM,CAAC,QAAR,CAAP,CAAyB,MAAM,CAAC,EAAhC,CADF,oCACyC,cAAc,CAAC,MAAM,CAAC,EAAR,CADvD;AAED,OAHD;AAIA;AAEF,YAfF;;AAiBD,CApB4B,EAqB7B;AACE,GAAC,YAAY,CAAC,aAAd,GAA8B,EADhC;AAEE,GAAC,YAAY,CAAC,YAAd,GAA6B,EAF/B;AAGE,GAAC,YAAY,CAAC,UAAd,GAA2B,EAH7B,EArB6B,CAA/B,C;;AA4Be,e,CAAf,wB,iLAjDgB,c,8FAQV,e,+FAaA,e","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/* eslint-disable no-param-reassign */\n// <- When we work with Immer, we need reassign, so disabling lint\nimport produce from 'immer';\nimport { MaskWithId, DataMaskType, DataMaskStateWithId, Mask } from './types';\nimport {\n  AnyDataMaskAction,\n  SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE,\n  UPDATE_DATA_MASK,\n  UpdateDataMask,\n} from './actions';\n\nexport function getInitialMask(id: string): MaskWithId {\n  return {\n    id,\n    extraFormData: {},\n    currentState: {},\n  };\n}\n\nconst setUnitDataMask = (\n  unitName: DataMaskType,\n  action: UpdateDataMask,\n  dataMaskState: DataMaskStateWithId,\n) => {\n  if (action[unitName]) {\n    dataMaskState[unitName][action.filterId] = {\n      ...(action[unitName] as Mask),\n      id: action.filterId,\n    };\n  }\n};\n\nconst dataMaskReducer = produce(\n  (draft: DataMaskStateWithId, action: AnyDataMaskAction) => {\n    const oldData = { ...draft };\n    switch (action.type) {\n      case UPDATE_DATA_MASK:\n        Object.values(DataMaskType).forEach(unitName =>\n          setUnitDataMask(unitName, action, draft),\n        );\n        break;\n\n      case SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE:\n        draft[action.unitName] = {};\n        (action.filterConfig ?? []).forEach(filter => {\n          draft[action.unitName][filter.id] =\n            oldData[action.unitName][filter.id] ?? getInitialMask(filter.id);\n        });\n        break;\n\n      default:\n    }\n  },\n  {\n    [DataMaskType.NativeFilters]: {},\n    [DataMaskType.CrossFilters]: {},\n    [DataMaskType.OwnFilters]: {},\n  },\n);\n\nexport default dataMaskReducer;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}