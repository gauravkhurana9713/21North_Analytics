{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _Object$entries from \"@babel/runtime-corejs3/core-js-stable/object/entries\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled, t, getChartMetadataRegistry, Behavior } from '@superset-ui/core';\nimport React, { useCallback } from 'react';\nimport { Checkbox, Form, Input, Typography } from 'src/common/components';\nimport { Select } from 'src/components/Select';\nimport SupersetResourceSelect from 'src/components/SupersetResourceSelect';\nimport { addDangerToast } from 'src/messageToasts/actions';\nimport { ColumnSelect } from './ColumnSelect';\nimport { datasetToSelectOption, setNativeFilterFieldValues, useForceUpdate } from './utils';\nimport { useBackendFormUpdate } from './state';\nimport { getFormData } from '../../utils';\nimport ControlItems from './ControlItems';\nimport FilterScope from './FilterScope/FilterScope';\nimport RemovedFilter from './RemovedFilter';\nimport DefaultValue from './DefaultValue';import { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst StyledContainer = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  justify-content: space-between;\n`;\nexport const StyledFormItem = styled(Form.Item)`\n  width: 49%;\n  margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n`;\nexport const StyledCheckboxFormItem = styled(Form.Item)`\n  margin-bottom: 0;\n`;\nexport const StyledLabel = styled.span`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s};\n  text-transform: uppercase;\n`;\nconst CleanFormItem = styled(Form.Item)`\n  margin-bottom: 0;\n`;\nconst FILTERS_WITH_ONLY_DATASOURCE = ['filter_timegrain', 'filter_timecolumn'];\n/**\n * The configuration form for a specific filter.\n * Assigns field values to `filters[filterId]` in the form.\n */\nexport const FiltersConfigForm = ({ filterId, filterToEdit, removed, restoreFilter, form, parentFilters }) => {var _context, _context2, _nativeFilterItems$fo, _nativeFilterItems$fo2, _formFilter$dataset, _filterToEdit$targets, _filterToEdit$targets2, _filterToEdit$targets3, _formFilter$dataset2, _formFilter$dataset4;\n  const forceUpdate = useForceUpdate();\n  const formFilter = (form.getFieldValue('filters') || {})[filterId];\n  const nativeFilterItems = getChartMetadataRegistry().items;\n  const nativeFilterVizTypes = _mapInstanceProperty(_context = _filterInstanceProperty(_context2 = _Object$entries(nativeFilterItems)\n  // @ts-ignore\n  ).call(_context2, ([, { value }]) => {var _value$behaviors;return (_value$behaviors = value.behaviors) == null ? void 0 : _includesInstanceProperty(_value$behaviors).call(_value$behaviors, Behavior.NATIVE_FILTER);})).call(_context,\n  ([key]) => key);\n  // @ts-ignore\n  const hasDatasource = !!((_nativeFilterItems$fo = nativeFilterItems[formFilter == null ? void 0 : formFilter.filterType]) != null && (_nativeFilterItems$fo2 = _nativeFilterItems$fo.value) != null && _nativeFilterItems$fo2.\n  datasourceCount);\n  const hasColumn = hasDatasource &&\n  !_includesInstanceProperty(FILTERS_WITH_ONLY_DATASOURCE).call(FILTERS_WITH_ONLY_DATASOURCE, formFilter == null ? void 0 : formFilter.filterType);\n  const hasFilledDatasource = !hasDatasource ||\n  (formFilter == null ? void 0 : (_formFilter$dataset = formFilter.dataset) == null ? void 0 : _formFilter$dataset.value) && ((formFilter == null ? void 0 : formFilter.column) || !hasColumn);\n  useBackendFormUpdate(form, filterId, filterToEdit, hasDatasource, hasColumn);\n  const initDatasetId = filterToEdit == null ? void 0 : (_filterToEdit$targets = filterToEdit.targets[0]) == null ? void 0 : _filterToEdit$targets.datasetId;\n  const initColumn = filterToEdit == null ? void 0 : (_filterToEdit$targets2 = filterToEdit.targets[0]) == null ? void 0 : (_filterToEdit$targets3 = _filterToEdit$targets2.column) == null ? void 0 : _filterToEdit$targets3.name;\n  const newFormData = getFormData({\n    datasetId: formFilter == null ? void 0 : (_formFilter$dataset2 = formFilter.dataset) == null ? void 0 : _formFilter$dataset2.value,\n    groupby: hasColumn ? formFilter == null ? void 0 : formFilter.column : undefined,\n    defaultValue: formFilter == null ? void 0 : formFilter.defaultValue,\n    ...formFilter });\n\n  const onDatasetSelectError = useCallback(({ error, message }) => {\n    let errorText = message || error || t('An error has occurred');\n    if (message === 'Forbidden') {\n      errorText = t('You do not have permission to edit this dashboard');\n    }\n    addDangerToast(errorText);\n  }, []);\n  if (removed) {\n    return ___EmotionJSX(RemovedFilter, { onClick: () => restoreFilter(filterId) });\n  }\n  const parentFilterOptions = _mapInstanceProperty(parentFilters).call(parentFilters, filter => ({\n    value: filter.id,\n    label: filter.title }));\n\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(Typography.Title, { level: 5 }, t('Settings')),\n  ___EmotionJSX(StyledContainer, null,\n  ___EmotionJSX(StyledFormItem, { name: ['filters', filterId, 'name'], label: ___EmotionJSX(StyledLabel, null, t('Filter name')), initialValue: filterToEdit == null ? void 0 : filterToEdit.name, rules: [{ required: !removed, message: t('Name is required') }], \"data-test\": \"name-input\" },\n  ___EmotionJSX(Input, null)),\n\n  ___EmotionJSX(StyledFormItem, { name: ['filters', filterId, 'filterType'], rules: [{ required: !removed, message: t('Name is required') }], initialValue: (filterToEdit == null ? void 0 : filterToEdit.filterType) || 'filter_select', label: ___EmotionJSX(StyledLabel, null, t('Filter Type')) },\n  ___EmotionJSX(Select, { options: _mapInstanceProperty(nativeFilterVizTypes).call(nativeFilterVizTypes, filterType => {var _nativeFilterItems$fi;return {\n        value: filterType,\n        // @ts-ignore\n        label: (_nativeFilterItems$fi = nativeFilterItems[filterType]) == null ? void 0 : _nativeFilterItems$fi.value.name };}),\n    onChange: ({ value }) => {\n      setNativeFilterFieldValues(form, filterId, {\n        filterType: value,\n        defaultValue: null });\n\n      forceUpdate();\n    } }))),\n\n\n  hasDatasource && ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(StyledFormItem, { name: ['filters', filterId, 'dataset'], initialValue: { value: initDatasetId }, label: ___EmotionJSX(StyledLabel, null, t('Datasource')), rules: [\n    { required: !removed, message: t('Datasource is required') }],\n    \"data-test\": \"datasource-input\" },\n  ___EmotionJSX(SupersetResourceSelect, { initialId: initDatasetId, resource: \"dataset\", searchColumn: \"table_name\", transformItem: datasetToSelectOption, isMulti: false, onError: onDatasetSelectError, onChange: e => {var _formFilter$dataset3;\n      // We need reset column when dataset changed\n      const datasetId = formFilter == null ? void 0 : (_formFilter$dataset3 = formFilter.dataset) == null ? void 0 : _formFilter$dataset3.value;\n      if (datasetId && (e == null ? void 0 : e.value) !== datasetId) {\n        setNativeFilterFieldValues(form, filterId, {\n          column: null });\n\n      }\n      forceUpdate();\n    } })),\n\n  hasColumn && ___EmotionJSX(StyledFormItem\n  // don't show the column select unless we have a dataset\n  // style={{ display: datasetId == null ? undefined : 'none' }}\n  , { name: ['filters', filterId, 'column'], initialValue: initColumn, label: ___EmotionJSX(StyledLabel, null, t('Column')), rules: [{ required: !removed, message: t('Field is required') }], \"data-test\": \"field-input\" },\n  ___EmotionJSX(ColumnSelect, { form: form, filterId: filterId, datasetId: formFilter == null ? void 0 : (_formFilter$dataset4 = formFilter.dataset) == null ? void 0 : _formFilter$dataset4.value, onChange: forceUpdate }))),\n\n\n  hasFilledDatasource && ___EmotionJSX(CleanFormItem, { name: ['filters', filterId, 'defaultValueFormData'], hidden: true, initialValue: newFormData }),\n  ___EmotionJSX(CleanFormItem, { name: ['filters', filterId, 'defaultValueQueriesData'], hidden: true, initialValue: null }),\n  ___EmotionJSX(StyledFormItem, { name: ['filters', filterId, 'parentFilter'], label: ___EmotionJSX(StyledLabel, null, t('Parent filter')), initialValue: _findInstanceProperty(parentFilterOptions).call(parentFilterOptions, ({ value }) => value === (filterToEdit == null ? void 0 : filterToEdit.cascadeParentIds[0])), \"data-test\": \"parent-filter-input\" },\n  ___EmotionJSX(Select, { placeholder: t('None'), options: parentFilterOptions, isClearable: true })),\n\n  ___EmotionJSX(StyledFormItem, { name: ['filters', filterId, 'defaultValue'], initialValue: filterToEdit == null ? void 0 : filterToEdit.defaultValue, \"data-test\": \"default-input\", label: ___EmotionJSX(StyledLabel, null, t('Default Value')) },\n  (hasFilledDatasource || !hasDatasource) && ___EmotionJSX(DefaultValue, { setDataMask: ({ nativeFilters }) => {var _nativeFilters$curren;\n      setNativeFilterFieldValues(form, filterId, {\n        defaultValue: nativeFilters == null ? void 0 : (_nativeFilters$curren = nativeFilters.currentState) == null ? void 0 : _nativeFilters$curren.value });\n\n      forceUpdate();\n    }, filterId: filterId, hasDatasource: hasDatasource, form: form, formData: newFormData })),\n\n  ___EmotionJSX(StyledCheckboxFormItem, { name: ['filters', filterId, 'isInstant'], initialValue: (filterToEdit == null ? void 0 : filterToEdit.isInstant) || false, valuePropName: \"checked\", colon: false },\n  ___EmotionJSX(Checkbox, { \"data-test\": \"apply-changes-instantly-checkbox\" },\n  t('Apply changes instantly'))),\n\n\n  ___EmotionJSX(ControlItems, { filterToEdit: filterToEdit, formFilter: formFilter, filterId: filterId, form: form, forceUpdate: forceUpdate }),\n  ___EmotionJSX(FilterScope, { updateFormValues: values => setNativeFilterFieldValues(form, filterId, values), pathToFormValue: ['filters', filterId], forceUpdate: forceUpdate, scope: filterToEdit == null ? void 0 : filterToEdit.scope, formScope: formFilter == null ? void 0 : formFilter.scope, formScoping: formFilter == null ? void 0 : formFilter.scoping }));\n\n};__signature__(FiltersConfigForm, \"useForceUpdate{forceUpdate}\\nuseBackendFormUpdate{}\\nuseCallback{onDatasetSelectError}\", () => [useForceUpdate, useBackendFormUpdate]);const _default =\nFiltersConfigForm;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledContainer, \"StyledContainer\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FiltersConfigForm.tsx\");reactHotLoader.register(StyledFormItem, \"StyledFormItem\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FiltersConfigForm.tsx\");reactHotLoader.register(StyledCheckboxFormItem, \"StyledCheckboxFormItem\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FiltersConfigForm.tsx\");reactHotLoader.register(StyledLabel, \"StyledLabel\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FiltersConfigForm.tsx\");reactHotLoader.register(CleanFormItem, \"CleanFormItem\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FiltersConfigForm.tsx\");reactHotLoader.register(FILTERS_WITH_ONLY_DATASOURCE, \"FILTERS_WITH_ONLY_DATASOURCE\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FiltersConfigForm.tsx\");reactHotLoader.register(FiltersConfigForm, \"FiltersConfigForm\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FiltersConfigForm.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FiltersConfigForm.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/nativeFilters/FiltersConfigModal/FiltersConfigForm/FiltersConfigForm.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  styled,\n  t,\n  getChartMetadataRegistry,\n  Behavior,\n} from '@superset-ui/core';\nimport { FormInstance } from 'antd/lib/form';\nimport React, { useCallback } from 'react';\nimport { Checkbox, Form, Input, Typography } from 'src/common/components';\nimport { Select } from 'src/components/Select';\nimport SupersetResourceSelect from 'src/components/SupersetResourceSelect';\nimport { addDangerToast } from 'src/messageToasts/actions';\nimport { ClientErrorObject } from 'src/utils/getClientErrorObject';\nimport { ColumnSelect } from './ColumnSelect';\nimport { NativeFiltersForm } from '../types';\nimport {\n  datasetToSelectOption,\n  setNativeFilterFieldValues,\n  useForceUpdate,\n} from './utils';\nimport { useBackendFormUpdate } from './state';\nimport { getFormData } from '../../utils';\nimport { Filter } from '../../types';\nimport ControlItems from './ControlItems';\nimport FilterScope from './FilterScope/FilterScope';\nimport RemovedFilter from './RemovedFilter';\nimport DefaultValue from './DefaultValue';\n\nconst StyledContainer = styled.div`\n  display: flex;\n  flex-direction: row-reverse;\n  justify-content: space-between;\n`;\n\nexport const StyledFormItem = styled(Form.Item)`\n  width: 49%;\n  margin-bottom: ${({ theme }) => theme.gridUnit * 4}px;\n`;\n\nexport const StyledCheckboxFormItem = styled(Form.Item)`\n  margin-bottom: 0;\n`;\n\nexport const StyledLabel = styled.span`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s};\n  text-transform: uppercase;\n`;\n\nconst CleanFormItem = styled(Form.Item)`\n  margin-bottom: 0;\n`;\n\nexport interface FiltersConfigFormProps {\n  filterId: string;\n  filterToEdit?: Filter;\n  removed?: boolean;\n  restoreFilter: (filterId: string) => void;\n  form: FormInstance<NativeFiltersForm>;\n  parentFilters: { id: string; title: string }[];\n}\n\nconst FILTERS_WITH_ONLY_DATASOURCE = ['filter_timegrain', 'filter_timecolumn'];\n\n/**\n * The configuration form for a specific filter.\n * Assigns field values to `filters[filterId]` in the form.\n */\nexport const FiltersConfigForm: React.FC<FiltersConfigFormProps> = ({\n  filterId,\n  filterToEdit,\n  removed,\n  restoreFilter,\n  form,\n  parentFilters,\n}) => {\n  const forceUpdate = useForceUpdate();\n  const formFilter = (form.getFieldValue('filters') || {})[filterId];\n\n  const nativeFilterItems = getChartMetadataRegistry().items;\n  const nativeFilterVizTypes = Object.entries(nativeFilterItems)\n    // @ts-ignore\n    .filter(([, { value }]) =>\n      value.behaviors?.includes(Behavior.NATIVE_FILTER),\n    )\n    .map(([key]) => key);\n\n  // @ts-ignore\n  const hasDatasource = !!nativeFilterItems[formFilter?.filterType]?.value\n    ?.datasourceCount;\n  const hasColumn =\n    hasDatasource &&\n    !FILTERS_WITH_ONLY_DATASOURCE.includes(formFilter?.filterType);\n\n  const hasFilledDatasource =\n    !hasDatasource ||\n    (formFilter?.dataset?.value && (formFilter?.column || !hasColumn));\n\n  useBackendFormUpdate(form, filterId, filterToEdit, hasDatasource, hasColumn);\n\n  const initDatasetId = filterToEdit?.targets[0]?.datasetId;\n  const initColumn = filterToEdit?.targets[0]?.column?.name;\n  const newFormData = getFormData({\n    datasetId: formFilter?.dataset?.value,\n    groupby: hasColumn ? formFilter?.column : undefined,\n    defaultValue: formFilter?.defaultValue,\n    ...formFilter,\n  });\n\n  const onDatasetSelectError = useCallback(\n    ({ error, message }: ClientErrorObject) => {\n      let errorText = message || error || t('An error has occurred');\n      if (message === 'Forbidden') {\n        errorText = t('You do not have permission to edit this dashboard');\n      }\n      addDangerToast(errorText);\n    },\n    [],\n  );\n\n  if (removed) {\n    return <RemovedFilter onClick={() => restoreFilter(filterId)} />;\n  }\n\n  const parentFilterOptions = parentFilters.map(filter => ({\n    value: filter.id,\n    label: filter.title,\n  }));\n\n  return (\n    <>\n      <Typography.Title level={5}>{t('Settings')}</Typography.Title>\n      <StyledContainer>\n        <StyledFormItem\n          name={['filters', filterId, 'name']}\n          label={<StyledLabel>{t('Filter name')}</StyledLabel>}\n          initialValue={filterToEdit?.name}\n          rules={[{ required: !removed, message: t('Name is required') }]}\n          data-test=\"name-input\"\n        >\n          <Input />\n        </StyledFormItem>\n        <StyledFormItem\n          name={['filters', filterId, 'filterType']}\n          rules={[{ required: !removed, message: t('Name is required') }]}\n          initialValue={filterToEdit?.filterType || 'filter_select'}\n          label={<StyledLabel>{t('Filter Type')}</StyledLabel>}\n        >\n          <Select\n            options={nativeFilterVizTypes.map(filterType => ({\n              value: filterType,\n              // @ts-ignore\n              label: nativeFilterItems[filterType]?.value.name,\n            }))}\n            onChange={({ value }: { value: string }) => {\n              setNativeFilterFieldValues(form, filterId, {\n                filterType: value,\n                defaultValue: null,\n              });\n              forceUpdate();\n            }}\n          />\n        </StyledFormItem>\n      </StyledContainer>\n      {hasDatasource && (\n        <>\n          <StyledFormItem\n            name={['filters', filterId, 'dataset']}\n            initialValue={{ value: initDatasetId }}\n            label={<StyledLabel>{t('Datasource')}</StyledLabel>}\n            rules={[\n              { required: !removed, message: t('Datasource is required') },\n            ]}\n            data-test=\"datasource-input\"\n          >\n            <SupersetResourceSelect\n              initialId={initDatasetId}\n              resource=\"dataset\"\n              searchColumn=\"table_name\"\n              transformItem={datasetToSelectOption}\n              isMulti={false}\n              onError={onDatasetSelectError}\n              onChange={e => {\n                // We need reset column when dataset changed\n                const datasetId = formFilter?.dataset?.value;\n                if (datasetId && e?.value !== datasetId) {\n                  setNativeFilterFieldValues(form, filterId, {\n                    column: null,\n                  });\n                }\n                forceUpdate();\n              }}\n            />\n          </StyledFormItem>\n          {hasColumn && (\n            <StyledFormItem\n              // don't show the column select unless we have a dataset\n              // style={{ display: datasetId == null ? undefined : 'none' }}\n              name={['filters', filterId, 'column']}\n              initialValue={initColumn}\n              label={<StyledLabel>{t('Column')}</StyledLabel>}\n              rules={[{ required: !removed, message: t('Field is required') }]}\n              data-test=\"field-input\"\n            >\n              <ColumnSelect\n                form={form}\n                filterId={filterId}\n                datasetId={formFilter?.dataset?.value}\n                onChange={forceUpdate}\n              />\n            </StyledFormItem>\n          )}\n        </>\n      )}\n      {hasFilledDatasource && (\n        <CleanFormItem\n          name={['filters', filterId, 'defaultValueFormData']}\n          hidden\n          initialValue={newFormData}\n        />\n      )}\n      <CleanFormItem\n        name={['filters', filterId, 'defaultValueQueriesData']}\n        hidden\n        initialValue={null}\n      />\n      <StyledFormItem\n        name={['filters', filterId, 'parentFilter']}\n        label={<StyledLabel>{t('Parent filter')}</StyledLabel>}\n        initialValue={parentFilterOptions.find(\n          ({ value }) => value === filterToEdit?.cascadeParentIds[0],\n        )}\n        data-test=\"parent-filter-input\"\n      >\n        <Select\n          placeholder={t('None')}\n          options={parentFilterOptions}\n          isClearable\n        />\n      </StyledFormItem>\n      <StyledFormItem\n        name={['filters', filterId, 'defaultValue']}\n        initialValue={filterToEdit?.defaultValue}\n        data-test=\"default-input\"\n        label={<StyledLabel>{t('Default Value')}</StyledLabel>}\n      >\n        {(hasFilledDatasource || !hasDatasource) && (\n          <DefaultValue\n            setDataMask={({ nativeFilters }) => {\n              setNativeFilterFieldValues(form, filterId, {\n                defaultValue: nativeFilters?.currentState?.value,\n              });\n              forceUpdate();\n            }}\n            filterId={filterId}\n            hasDatasource={hasDatasource}\n            form={form}\n            formData={newFormData}\n          />\n        )}\n      </StyledFormItem>\n      <StyledCheckboxFormItem\n        name={['filters', filterId, 'isInstant']}\n        initialValue={filterToEdit?.isInstant || false}\n        valuePropName=\"checked\"\n        colon={false}\n      >\n        <Checkbox data-test=\"apply-changes-instantly-checkbox\">\n          {t('Apply changes instantly')}\n        </Checkbox>\n      </StyledCheckboxFormItem>\n      <ControlItems\n        filterToEdit={filterToEdit}\n        formFilter={formFilter}\n        filterId={filterId}\n        form={form}\n        forceUpdate={forceUpdate}\n      />\n      <FilterScope\n        updateFormValues={(values: any) =>\n          setNativeFilterFieldValues(form, filterId, values)\n        }\n        pathToFormValue={['filters', filterId]}\n        forceUpdate={forceUpdate}\n        scope={filterToEdit?.scope}\n        formScope={formFilter?.scope}\n        formScoping={formFilter?.scoping}\n      />\n    </>\n  );\n};\n\nexport default FiltersConfigForm;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}