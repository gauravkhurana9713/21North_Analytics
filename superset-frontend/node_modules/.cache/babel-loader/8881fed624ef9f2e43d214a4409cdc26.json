{"ast":null,"code":"import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/common/components/Tooltip';\nimport { useSelector } from 'react-redux';\nimport EditableTitle from '../../components/EditableTitle';\nimport SliceHeaderControls from './SliceHeaderControls';\nimport FiltersBadge from '../containers/FiltersBadge';\nimport Icon from '../../components/Icon';\nimport FilterIndicator from './FiltersBadge/FilterIndicator';import { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst annoationsLoading = t('Annotation layers are still loading.');\nconst annoationsError = t('One ore more annotation layers failed loading.');\nconst CrossFilterIcon = styled(Icon)`\n  fill: ${({ theme }) => theme.colors.grayscale.light5};\n  & circle {\n    fill: ${({ theme }) => theme.colors.primary.base};\n  }\n`;\nconst SliceHeader = ({ innerRef = null, forceRefresh = () => ({}), updateSliceName = () => ({}), toggleExpandSlice = () => ({}), exploreChart = () => ({}), exportCSV = () => ({}), editMode = false, annotationQuery = {}, annotationError = {}, cachedDttm = null, updatedDttm = null, isCached = [], isExpanded = [], sliceName = '', supersetCanExplore = false, supersetCanCSV = false, sliceCanEdit = false, slice, componentId, dashboardId, addSuccessToast, addDangerToast, handleToggleFullSize, isFullSize, chartStatus }) => {\n  // TODO: change to indicator field after it will be implemented\n  const crossFilterValue = useSelector(state => {var _state$dataMask, _state$dataMask$cross, _state$dataMask$cross2, _state$dataMask$cross3;return (_state$dataMask = state.dataMask) == null ? void 0 : (_state$dataMask$cross = _state$dataMask.crossFilters) == null ? void 0 : (_state$dataMask$cross2 = _state$dataMask$cross[slice == null ? void 0 : slice.slice_id]) == null ? void 0 : (_state$dataMask$cross3 = _state$dataMask$cross2.currentState) == null ? void 0 : _state$dataMask$cross3.value;});\n  return ___EmotionJSX(\"div\", { className: \"chart-header\", ref: innerRef },\n  ___EmotionJSX(\"div\", { className: \"header-title\" },\n  ___EmotionJSX(EditableTitle, { title: sliceName || (\n    editMode ?\n    '---' // this makes an empty title clickable\n    : ''), canEdit: editMode, emptyText: \"\", onSaveTitle: updateSliceName, showTooltip: false }),\n  !!_Object$values(annotationQuery).length && ___EmotionJSX(Tooltip, { id: \"annotations-loading-tooltip\", placement: \"top\", title: annoationsLoading },\n  ___EmotionJSX(\"i\", { className: \"fa fa-refresh warning\" })),\n\n  !!_Object$values(annotationError).length && ___EmotionJSX(Tooltip, { id: \"annoation-errors-tooltip\", placement: \"top\", title: annoationsError },\n  ___EmotionJSX(\"i\", { className: \"fa fa-exclamation-circle danger\" }))),\n\n\n  ___EmotionJSX(\"div\", { className: \"header-controls\" },\n  !editMode && ___EmotionJSX(React.Fragment, null,\n  crossFilterValue && ___EmotionJSX(Tooltip, { placement: \"top\", title: ___EmotionJSX(FilterIndicator, { indicator: {\n        value: crossFilterValue,\n        name: t('Emitted values') } }) },\n\n  ___EmotionJSX(CrossFilterIcon, { name: \"cross-filter-badge\" })),\n\n  ___EmotionJSX(FiltersBadge, { chartId: slice.slice_id }),\n  ___EmotionJSX(SliceHeaderControls, { slice: slice, isCached: isCached, isExpanded: isExpanded, cachedDttm: cachedDttm, updatedDttm: updatedDttm, toggleExpandSlice: toggleExpandSlice, forceRefresh: forceRefresh, exploreChart: exploreChart, exportCSV: exportCSV, supersetCanExplore: supersetCanExplore, supersetCanCSV: supersetCanCSV, sliceCanEdit: sliceCanEdit, componentId: componentId, dashboardId: dashboardId, addSuccessToast: addSuccessToast, addDangerToast: addDangerToast, handleToggleFullSize: handleToggleFullSize, isFullSize: isFullSize, chartStatus: chartStatus }))));\n\n\n\n};__signature__(SliceHeader, \"useSelector{crossFilterValue}\", () => [useSelector]);const _default =\nSliceHeader;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(annoationsLoading, \"annoationsLoading\", \"/app/superset-frontend/src/dashboard/components/SliceHeader.tsx\");reactHotLoader.register(annoationsError, \"annoationsError\", \"/app/superset-frontend/src/dashboard/components/SliceHeader.tsx\");reactHotLoader.register(CrossFilterIcon, \"CrossFilterIcon\", \"/app/superset-frontend/src/dashboard/components/SliceHeader.tsx\");reactHotLoader.register(SliceHeader, \"SliceHeader\", \"/app/superset-frontend/src/dashboard/components/SliceHeader.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/SliceHeader.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/SliceHeader.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FC } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport { Tooltip } from 'src/common/components/Tooltip';\nimport { useSelector } from 'react-redux';\nimport EditableTitle from '../../components/EditableTitle';\nimport SliceHeaderControls from './SliceHeaderControls';\nimport FiltersBadge from '../containers/FiltersBadge';\nimport Icon from '../../components/Icon';\nimport { RootState } from '../types';\nimport { Slice } from '../../types/Chart';\nimport FilterIndicator from './FiltersBadge/FilterIndicator';\n\ntype SliceHeaderProps = {\n  innerRef?: string;\n  slice: Slice;\n  isExpanded?: boolean;\n  isCached?: boolean[];\n  cachedDttm?: string[];\n  updatedDttm?: number;\n  updateSliceName?: (arg0: string) => void;\n  toggleExpandSlice?: Function;\n  forceRefresh?: Function;\n  exploreChart?: Function;\n  exportCSV?: Function;\n  editMode?: boolean;\n  isFullSize?: boolean;\n  annotationQuery?: object;\n  annotationError?: object;\n  sliceName?: string;\n  supersetCanExplore?: boolean;\n  supersetCanCSV?: boolean;\n  sliceCanEdit?: boolean;\n  componentId: string;\n  dashboardId: number;\n  filters: object;\n  addSuccessToast: Function;\n  addDangerToast: Function;\n  handleToggleFullSize: Function;\n  chartStatus: string;\n};\n\nconst annoationsLoading = t('Annotation layers are still loading.');\nconst annoationsError = t('One ore more annotation layers failed loading.');\n\nconst CrossFilterIcon = styled(Icon)`\n  fill: ${({ theme }) => theme.colors.grayscale.light5};\n  & circle {\n    fill: ${({ theme }) => theme.colors.primary.base};\n  }\n`;\n\nconst SliceHeader: FC<SliceHeaderProps> = ({\n  innerRef = null,\n  forceRefresh = () => ({}),\n  updateSliceName = () => ({}),\n  toggleExpandSlice = () => ({}),\n  exploreChart = () => ({}),\n  exportCSV = () => ({}),\n  editMode = false,\n  annotationQuery = {},\n  annotationError = {},\n  cachedDttm = null,\n  updatedDttm = null,\n  isCached = [],\n  isExpanded = [],\n  sliceName = '',\n  supersetCanExplore = false,\n  supersetCanCSV = false,\n  sliceCanEdit = false,\n  slice,\n  componentId,\n  dashboardId,\n  addSuccessToast,\n  addDangerToast,\n  handleToggleFullSize,\n  isFullSize,\n  chartStatus,\n}) => {\n  // TODO: change to indicator field after it will be implemented\n  const crossFilterValue = useSelector<RootState, any>(\n    state =>\n      state.dataMask?.crossFilters?.[slice?.slice_id]?.currentState?.value,\n  );\n\n  return (\n    <div className=\"chart-header\" ref={innerRef}>\n      <div className=\"header-title\">\n        <EditableTitle\n          title={\n            sliceName ||\n            (editMode\n              ? '---' // this makes an empty title clickable\n              : '')\n          }\n          canEdit={editMode}\n          emptyText=\"\"\n          onSaveTitle={updateSliceName}\n          showTooltip={false}\n        />\n        {!!Object.values(annotationQuery).length && (\n          <Tooltip\n            id=\"annotations-loading-tooltip\"\n            placement=\"top\"\n            title={annoationsLoading}\n          >\n            <i className=\"fa fa-refresh warning\" />\n          </Tooltip>\n        )}\n        {!!Object.values(annotationError).length && (\n          <Tooltip\n            id=\"annoation-errors-tooltip\"\n            placement=\"top\"\n            title={annoationsError}\n          >\n            <i className=\"fa fa-exclamation-circle danger\" />\n          </Tooltip>\n        )}\n      </div>\n      <div className=\"header-controls\">\n        {!editMode && (\n          <>\n            {crossFilterValue && (\n              <Tooltip\n                placement=\"top\"\n                title={\n                  <FilterIndicator\n                    indicator={{\n                      value: crossFilterValue,\n                      name: t('Emitted values'),\n                    }}\n                  />\n                }\n              >\n                <CrossFilterIcon name=\"cross-filter-badge\" />\n              </Tooltip>\n            )}\n            <FiltersBadge chartId={slice.slice_id} />\n            <SliceHeaderControls\n              slice={slice}\n              isCached={isCached}\n              isExpanded={isExpanded}\n              cachedDttm={cachedDttm}\n              updatedDttm={updatedDttm}\n              toggleExpandSlice={toggleExpandSlice}\n              forceRefresh={forceRefresh}\n              exploreChart={exploreChart}\n              exportCSV={exportCSV}\n              supersetCanExplore={supersetCanExplore}\n              supersetCanCSV={supersetCanCSV}\n              sliceCanEdit={sliceCanEdit}\n              componentId={componentId}\n              dashboardId={dashboardId}\n              addSuccessToast={addSuccessToast}\n              addDangerToast={addDangerToast}\n              handleToggleFullSize={handleToggleFullSize}\n              isFullSize={isFullSize}\n              chartStatus={chartStatus}\n            />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SliceHeader;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}