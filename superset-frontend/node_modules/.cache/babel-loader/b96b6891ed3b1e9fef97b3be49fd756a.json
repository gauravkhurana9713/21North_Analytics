{"ast":null,"code":"import _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _entriesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/entries\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CompactPicker } from 'react-color';\nimport Button from 'src/components/Button';\nimport { parse as mathjsParse } from 'mathjs';\nimport {\nt,\nSupersetClient,\ngetCategoricalSchemeRegistry,\ngetChartMetadataRegistry,\nvalidateNonEmpty } from\n'@superset-ui/core';\n\nimport SelectControl from './SelectControl';\nimport TextControl from './TextControl';\nimport CheckboxControl from './CheckboxControl';\n\nimport {\nANNOTATION_SOURCE_TYPES,\nANNOTATION_TYPES,\nANNOTATION_TYPES_METADATA,\nDEFAULT_ANNOTATION_TYPE,\nrequiresQuery,\nANNOTATION_SOURCE_TYPES_METADATA } from\n'../../../modules/AnnotationTypes';\n\nimport PopoverSection from '../../../components/PopoverSection';\nimport ControlHeader from '../ControlHeader';\nimport './AnnotationLayer.less';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst AUTOMATIC_COLOR = '';\n\nconst propTypes = {\n  name: PropTypes.string,\n  annotationType: PropTypes.string,\n  sourceType: PropTypes.string,\n  color: PropTypes.string,\n  opacity: PropTypes.string,\n  style: PropTypes.string,\n  width: PropTypes.number,\n  showMarkers: PropTypes.bool,\n  hideLine: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  overrides: PropTypes.object,\n  show: PropTypes.bool,\n  titleColumn: PropTypes.string,\n  descriptionColumns: PropTypes.arrayOf(PropTypes.string),\n  timeColumn: PropTypes.string,\n  intervalEndColumn: PropTypes.string,\n  vizType: PropTypes.string,\n\n  error: PropTypes.string,\n  colorScheme: PropTypes.string,\n\n  addAnnotationLayer: PropTypes.func,\n  removeAnnotationLayer: PropTypes.func,\n  close: PropTypes.func };\n\n\nconst defaultProps = {\n  name: '',\n  annotationType: DEFAULT_ANNOTATION_TYPE,\n  sourceType: '',\n  color: AUTOMATIC_COLOR,\n  opacity: '',\n  style: 'solid',\n  width: 1,\n  showMarkers: false,\n  hideLine: false,\n  overrides: {},\n  colorScheme: 'd3Category10',\n  show: true,\n  titleColumn: '',\n  descriptionColumns: [],\n  timeColumn: '',\n  intervalEndColumn: '',\n\n  addAnnotationLayer: () => {},\n  removeAnnotationLayer: () => {},\n  close: () => {} };\n\n\nexport default class AnnotationLayer extends React.PureComponent {\n  constructor(props) {var _context, _context2, _context3, _context4, _context5, _context6, _context7, _context8;\n    super(props);\n    const {\n      name,\n      annotationType,\n      sourceType,\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      value,\n      overrides,\n      show,\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      vizType } =\n    props;\n\n    // Only allow override whole time_range\n    if ('since' in overrides || 'until' in overrides) {\n      overrides.time_range = null;\n      delete overrides.since;\n      delete overrides.until;\n    }\n\n    // Check if annotationType is supported by this chart\n    const metadata = getChartMetadataRegistry().get(vizType);\n    const supportedAnnotationTypes = (metadata == null ? void 0 : metadata.supportedAnnotationTypes) || [];\n    const validAnnotationType = _includesInstanceProperty(supportedAnnotationTypes).call(supportedAnnotationTypes,\n    annotationType) ?\n\n    annotationType :\n    supportedAnnotationTypes[0];\n\n    this.state = {\n      // base\n      name,\n      annotationType: validAnnotationType,\n      sourceType,\n      value,\n      overrides,\n      show,\n      // slice\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      // display\n      color: color || AUTOMATIC_COLOR,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      // refData\n      isNew: !name,\n      isLoadingOptions: true,\n      valueOptions: [] };\n\n    this.submitAnnotation = _bindInstanceProperty(_context = this.submitAnnotation).call(_context, this);\n    this.deleteAnnotation = _bindInstanceProperty(_context2 = this.deleteAnnotation).call(_context2, this);\n    this.applyAnnotation = _bindInstanceProperty(_context3 = this.applyAnnotation).call(_context3, this);\n    this.fetchOptions = _bindInstanceProperty(_context4 = this.fetchOptions).call(_context4, this);\n    this.handleAnnotationType = _bindInstanceProperty(_context5 = this.handleAnnotationType).call(_context5, this);\n    this.handleAnnotationSourceType = _bindInstanceProperty(_context6 = this.handleAnnotationSourceType).call(_context6,\n    this);\n\n    this.handleValue = _bindInstanceProperty(_context7 = this.handleValue).call(_context7, this);\n    this.isValidForm = _bindInstanceProperty(_context8 = this.isValidForm).call(_context8, this);\n  }\n\n  componentDidMount() {\n    const { annotationType, sourceType, isLoadingOptions } = this.state;\n    this.fetchOptions(annotationType, sourceType, isLoadingOptions);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.sourceType !== this.state.sourceType) {\n      this.fetchOptions(this.state.annotationType, this.state.sourceType, true);\n    }\n  }\n\n  getSupportedSourceTypes(annotationType) {var _context9, _context10, _context11, _ANNOTATION_TYPES_MET;\n    // Get vis types that can be source.\n    const sources = _mapInstanceProperty(_context9 = _filterInstanceProperty(_context10 = _entriesInstanceProperty(_context11 = getChartMetadataRegistry()).call(_context11)).call(_context10,\n\n    ({ value: chartMetadata }) =>\n    chartMetadata.canBeAnnotationType(annotationType))).call(_context9,\n\n    ({ key, value: chartMetadata }) => ({\n      value: key,\n      label: chartMetadata.name }));\n\n    // Prepend native source if applicable\n    if ((_ANNOTATION_TYPES_MET = ANNOTATION_TYPES_METADATA[annotationType]) != null && _ANNOTATION_TYPES_MET.supportNativeSource) {\n      sources.unshift(ANNOTATION_SOURCE_TYPES_METADATA.NATIVE);\n    }\n    return sources;\n  }\n\n  isValidFormula(value, annotationType) {\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      try {\n        mathjsParse(value).compile().evaluate({ x: 0 });\n      } catch (err) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isValidForm() {\n    const {\n      name,\n      annotationType,\n      sourceType,\n      value,\n      timeColumn,\n      intervalEndColumn } =\n    this.state;\n    const errors = [\n    validateNonEmpty(name),\n    validateNonEmpty(annotationType),\n    validateNonEmpty(value)];\n\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE) {\n      if (annotationType === ANNOTATION_TYPES.EVENT) {\n        errors.push(validateNonEmpty(timeColumn));\n      }\n      if (annotationType === ANNOTATION_TYPES.INTERVAL) {\n        errors.push(validateNonEmpty(timeColumn));\n        errors.push(validateNonEmpty(intervalEndColumn));\n      }\n    }\n    errors.push(this.isValidFormula(value, annotationType));\n    return !_filterInstanceProperty(errors).call(errors, x => x).length;\n  }\n\n  handleAnnotationType(annotationType) {\n    this.setState({\n      annotationType,\n      sourceType: null,\n      value: null });\n\n  }\n\n  handleAnnotationSourceType(sourceType) {\n    const { sourceType: prevSourceType } = this.state;\n\n    if (prevSourceType !== sourceType) {\n      this.setState({ sourceType, value: null, isLoadingOptions: true });\n    }\n  }\n\n  handleValue(value) {\n    this.setState({\n      value,\n      descriptionColumns: null,\n      intervalEndColumn: null,\n      timeColumn: null,\n      titleColumn: null,\n      overrides: { time_range: null } });\n\n  }\n\n  fetchOptions(annotationType, sourceType, isLoadingOptions) {\n    if (isLoadingOptions) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        SupersetClient.get({\n          endpoint: '/annotationlayermodelview/api/read?' }).\n        then(({ json }) => {var _context12;\n          const layers = json ?\n          _mapInstanceProperty(_context12 = json.result).call(_context12, layer => ({\n            value: layer.id,\n            label: layer.name })) :\n\n          [];\n          this.setState({\n            isLoadingOptions: false,\n            valueOptions: layers });\n\n        });\n      } else if (requiresQuery(sourceType)) {\n        SupersetClient.get({ endpoint: '/superset/user_slices' }).then(\n        ({ json }) => {var _context13;\n          const registry = getChartMetadataRegistry();\n          this.setState({\n            isLoadingOptions: false,\n            valueOptions: _mapInstanceProperty(_context13 = _filterInstanceProperty(json).call(json,\n            x => {\n              const metadata = registry.get(x.viz_type);\n              return (\n                metadata && metadata.canBeAnnotationType(annotationType));\n\n            })).call(_context13,\n            x => ({ value: x.id, label: x.title, slice: x })) });\n\n        });\n\n      } else {\n        this.setState({\n          isLoadingOptions: false,\n          valueOptions: [] });\n\n      }\n    }\n  }\n\n  deleteAnnotation() {\n    this.props.removeAnnotationLayer();\n    this.props.close();\n  }\n\n  applyAnnotation() {\n    if (this.isValidForm()) {\n      const annotationFields = [\n      'name',\n      'annotationType',\n      'sourceType',\n      'color',\n      'opacity',\n      'style',\n      'width',\n      'showMarkers',\n      'hideLine',\n      'value',\n      'overrides',\n      'show',\n      'titleColumn',\n      'descriptionColumns',\n      'timeColumn',\n      'intervalEndColumn'];\n\n      const newAnnotation = {};\n      _forEachInstanceProperty(annotationFields).call(annotationFields, field => {\n        if (this.state[field] !== null) {\n          newAnnotation[field] = this.state[field];\n        }\n      });\n\n      if (newAnnotation.color === AUTOMATIC_COLOR) {\n        newAnnotation.color = null;\n      }\n\n      this.props.addAnnotationLayer(newAnnotation);\n      this.setState({ isNew: false });\n    }\n  }\n\n  submitAnnotation() {\n    this.applyAnnotation();\n    this.props.close();\n  }\n\n  renderOption(option) {\n    return (\n      ___EmotionJSX(\"span\", { className: \"optionWrapper\", title: option.label },\n      option.label));\n\n\n  }\n\n  renderValueConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      valueOptions,\n      isLoadingOptions } =\n    this.state;\n    let label = '';\n    let description = '';\n    if (requiresQuery(sourceType)) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        label = 'Annotation layer';\n        description = 'Select the Annotation Layer you would like to use.';\n      } else {var _context14;\n        label = t('Chart');\n        description = `Use a pre defined Superset Chart as a source for annotations and overlays.\n        your chart must be one of these visualization types:\n        [${_mapInstanceProperty(_context14 = this.getSupportedSourceTypes(annotationType)).call(_context14,\n        x => x.label).\n        join(', ')}]`;\n      }\n    } else if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      label = 'Formula';\n      description = `Expects a formula with depending time parameter 'x'\n        in milliseconds since epoch. mathjs is used to evaluate the formulas.\n        Example: '2x+5'`;\n    }\n    if (requiresQuery(sourceType)) {\n      return (\n        ___EmotionJSX(SelectControl, {\n          name: \"annotation-layer-value\",\n          showHeader: true,\n          hovered: true,\n          description: description,\n          label: label,\n          placeholder: \"\",\n          options: valueOptions,\n          isLoading: isLoadingOptions,\n          value: value,\n          onChange: this.handleValue,\n          validationErrors: !value ? ['Mandatory'] : [],\n          optionRenderer: this.renderOption }));\n\n\n    }\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      return (\n        ___EmotionJSX(TextControl, {\n          name: \"annotation-layer-value\",\n          hovered: true,\n          showHeader: true,\n          description: description,\n          label: label,\n          placeholder: \"\",\n          value: value,\n          onChange: this.handleValue,\n          validationErrors:\n          this.isValidFormula(value, annotationType) ? ['Bad formula.'] : [] }));\n\n\n\n    }\n    return '';\n  }\n\n  renderSliceConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      valueOptions,\n      overrides,\n      titleColumn,\n      timeColumn,\n      intervalEndColumn,\n      descriptionColumns } =\n    this.state;\n    const { slice } = _findInstanceProperty(valueOptions).call(valueOptions, x => x.value === value) || {};\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE && slice) {var _context15, _context16, _context17, _context18;\n      const columns = _mapInstanceProperty(_context15 = _concatInstanceProperty(_context16 = slice.data.groupby || []).call(_context16,\n      slice.data.all_columns || [])).call(_context15,\n      x => ({ value: x, label: x }));\n      const timeColumnOptions = slice.data.include_time ?\n      _concatInstanceProperty(_context17 = [{ value: '__timestamp', label: '__timestamp' }]).call(_context17, columns) :\n      columns;\n      return (\n        ___EmotionJSX(\"div\", { style: { marginRight: '2rem' } },\n        ___EmotionJSX(PopoverSection, {\n          isSelected: true,\n          title: t('Annotation Slice Configuration'),\n          info: t(`This section allows you to configure how to use the slice\n               to generate annotations.`) },\n\n        (annotationType === ANNOTATION_TYPES.EVENT ||\n        annotationType === ANNOTATION_TYPES.INTERVAL) &&\n        ___EmotionJSX(SelectControl, {\n          hovered: true,\n          name: \"annotation-layer-time-column\",\n          label:\n          annotationType === ANNOTATION_TYPES.INTERVAL ?\n          'Interval start column' :\n          'Event time column',\n\n          description: \"This column must contain date/time information.\",\n          validationErrors: !timeColumn ? ['Mandatory'] : [],\n          clearable: false,\n          options: timeColumnOptions,\n          value: timeColumn,\n          onChange: v => this.setState({ timeColumn: v }) }),\n\n\n        annotationType === ANNOTATION_TYPES.INTERVAL &&\n        ___EmotionJSX(SelectControl, {\n          hovered: true,\n          name: \"annotation-layer-intervalEnd\",\n          label: \"Interval End column\",\n          description: \"This column must contain date/time information.\",\n          validationErrors: !intervalEndColumn ? ['Mandatory'] : [],\n          options: columns,\n          value: intervalEndColumn,\n          onChange: v => this.setState({ intervalEndColumn: v }) }),\n\n\n        ___EmotionJSX(SelectControl, {\n          hovered: true,\n          name: \"annotation-layer-title\",\n          label: \"Title Column\",\n          description: \"Pick a title for you annotation.\",\n          options: _concatInstanceProperty(_context18 = [{ value: '', label: 'None' }]).call(_context18, columns),\n          value: titleColumn,\n          onChange: v => this.setState({ titleColumn: v }) }),\n\n        annotationType !== ANNOTATION_TYPES.TIME_SERIES &&\n        ___EmotionJSX(SelectControl, {\n          hovered: true,\n          name: \"annotation-layer-title\",\n          label: \"Description Columns\",\n          description: `Pick one or more columns that should be shown in the\n                  annotation. If you don't select a column all of them will be shown.`,\n          multi: true,\n          options: columns,\n          value: descriptionColumns,\n          onChange: v => this.setState({ descriptionColumns: v }) }),\n\n\n        ___EmotionJSX(\"div\", { style: { marginTop: '1rem' } },\n        ___EmotionJSX(CheckboxControl, {\n          hovered: true,\n          name: \"annotation-override-time_range\",\n          label: \"Override time range\",\n          description: `This controls whether the \"time_range\" field from the current\n                  view should be passed down to the chart containing the annotation data.`,\n          value: 'time_range' in overrides,\n          onChange: v => {\n            delete overrides.time_range;\n            if (v) {\n              this.setState({\n                overrides: { ...overrides, time_range: null } });\n\n            } else {\n              this.setState({ overrides: { ...overrides } });\n            }\n          } }),\n\n        ___EmotionJSX(CheckboxControl, {\n          hovered: true,\n          name: \"annotation-override-timegrain\",\n          label: \"Override time grain\",\n          description: `This controls whether the time grain field from the current\n                  view should be passed down to the chart containing the annotation data.`,\n          value: 'time_grain_sqla' in overrides,\n          onChange: v => {\n            delete overrides.time_grain_sqla;\n            delete overrides.granularity;\n            if (v) {\n              this.setState({\n                overrides: {\n                  ...overrides,\n                  time_grain_sqla: null,\n                  granularity: null } });\n\n\n            } else {\n              this.setState({ overrides: { ...overrides } });\n            }\n          } }),\n\n        ___EmotionJSX(TextControl, {\n          hovered: true,\n          name: \"annotation-layer-timeshift\",\n          label: \"Time Shift\",\n          description: `Time delta in natural language\n                  (example:  24 hours, 7 days, 56 weeks, 365 days)`,\n          placeholder: \"\",\n          value: overrides.time_shift,\n          onChange: (v) =>\n          this.setState({ overrides: { ...overrides, time_shift: v } }) })))));\n\n\n\n\n\n\n    }\n    return '';\n  }\n\n  renderDisplayConfiguration() {var _context19;\n    const {\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      annotationType } =\n    this.state;\n    const colorScheme = _concatInstanceProperty(_context19 = getCategoricalSchemeRegistry().\n    get(this.props.colorScheme).\n    colors).call(_context19);\n    if (\n    color &&\n    color !== AUTOMATIC_COLOR &&\n    !_findInstanceProperty(colorScheme).call(colorScheme, x => x.toLowerCase() === color.toLowerCase()))\n    {\n      colorScheme.push(color);\n    }\n    return (\n      ___EmotionJSX(PopoverSection, {\n        isSelected: true,\n        title: t('Display configuration'),\n        info: t('Configure your how you overlay is displayed here.') },\n\n      ___EmotionJSX(SelectControl, {\n        name: \"annotation-layer-stroke\",\n        label: t('Style')\n        // see '../../../visualizations/nvd3_vis.css'\n        , options: [\n        { value: 'solid', label: 'Solid' },\n        { value: 'dashed', label: 'Dashed' },\n        { value: 'longDashed', label: 'Long dashed' },\n        { value: 'dotted', label: 'Dotted' }],\n\n        value: style,\n        clearable: false,\n        onChange: v => this.setState({ style: v }) }),\n\n      ___EmotionJSX(SelectControl, {\n        name: \"annotation-layer-opacity\",\n        label: t('Opacity')\n        // see '../../../visualizations/nvd3_vis.css'\n        , options: [\n        { value: '', label: 'Solid' },\n        { value: 'opacityLow', label: '0.2' },\n        { value: 'opacityMedium', label: '0.5' },\n        { value: 'opacityHigh', label: '0.8' }],\n\n        value: opacity,\n        onChange: v => this.setState({ opacity: v }) }),\n\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(ControlHeader, { label: t('Color') }),\n      ___EmotionJSX(\"div\", { style: { display: 'flex', flexDirection: 'column' } },\n      ___EmotionJSX(CompactPicker, {\n        color: color,\n        colors: colorScheme,\n        onChangeComplete: v => this.setState({ color: v.hex }) }),\n\n      ___EmotionJSX(Button, {\n        style: { marginTop: '0.5rem', marginBottom: '0.5rem' },\n        buttonStyle: color === AUTOMATIC_COLOR ? 'success' : 'default',\n        buttonSize: \"xsmall\",\n        onClick: () => this.setState({ color: AUTOMATIC_COLOR }) }, \"Automatic Color\"))),\n\n\n\n\n\n      ___EmotionJSX(TextControl, {\n        name: \"annotation-layer-stroke-width\",\n        label: t('Line width'),\n        isInt: true,\n        value: width,\n        onChange: v => this.setState({ width: v }) }),\n\n      annotationType === ANNOTATION_TYPES.TIME_SERIES &&\n      ___EmotionJSX(CheckboxControl, {\n        hovered: true,\n        name: \"annotation-layer-show-markers\",\n        label: \"Show Markers\",\n        description: \"Shows or hides markers for the time series\",\n        value: showMarkers,\n        onChange: v => this.setState({ showMarkers: v }) }),\n\n\n      annotationType === ANNOTATION_TYPES.TIME_SERIES &&\n      ___EmotionJSX(CheckboxControl, {\n        hovered: true,\n        name: \"annotation-layer-hide-line\",\n        label: \"Hide Line\",\n        description: \"Hides the Line for the time series\",\n        value: hideLine,\n        onChange: v => this.setState({ hideLine: v }) })));\n\n\n\n\n  }\n\n  render() {var _context20;\n    const { isNew, name, annotationType, sourceType, show } = this.state;\n    const isValid = this.isValidForm();\n    const metadata = getChartMetadataRegistry().get(this.props.vizType);\n    const supportedAnnotationTypes = metadata ?\n    _mapInstanceProperty(_context20 = metadata.supportedAnnotationTypes).call(_context20,\n    type => ANNOTATION_TYPES_METADATA[type]) :\n\n    [];\n    const supportedSourceTypes = this.getSupportedSourceTypes(annotationType);\n\n    return (\n      ___EmotionJSX(React.Fragment, null,\n      this.props.error &&\n      ___EmotionJSX(\"span\", { style: { color: 'red' } }, \"ERROR: \", this.props.error),\n\n      ___EmotionJSX(\"div\", { style: { display: 'flex', flexDirection: 'row' } },\n      ___EmotionJSX(\"div\", { style: { marginRight: '2rem' } },\n      ___EmotionJSX(PopoverSection, {\n        isSelected: true,\n        title: t('Layer configuration'),\n        info: t('Configure the basics of your Annotation Layer.') },\n\n      ___EmotionJSX(TextControl, {\n        name: \"annotation-layer-name\",\n        label: t('Name'),\n        placeholder: \"\",\n        value: name,\n        onChange: v => this.setState({ name: v }),\n        validationErrors: !name ? [t('Mandatory')] : [] }),\n\n      ___EmotionJSX(CheckboxControl, {\n        name: \"annotation-layer-hide\",\n        label: t('Hide layer'),\n        value: !show,\n        onChange: v => this.setState({ show: !v }) }),\n\n      ___EmotionJSX(SelectControl, {\n        hovered: true,\n        description: t('Choose the annotation layer type'),\n        label: t('Annotation layer type'),\n        name: \"annotation-layer-type\",\n        clearable: false,\n        options: supportedAnnotationTypes,\n        value: annotationType,\n        onChange: this.handleAnnotationType }),\n\n      supportedSourceTypes.length > 0 &&\n      ___EmotionJSX(SelectControl, {\n        hovered: true,\n        description: \"Choose the source of your annotations\",\n        label: \"Annotation Source\",\n        name: \"annotation-source-type\",\n        options: supportedSourceTypes,\n        value: sourceType,\n        onChange: this.handleAnnotationSourceType,\n        validationErrors: !sourceType ? [t('Mandatory')] : [] }),\n\n\n      this.renderValueConfiguration())),\n\n\n      this.renderSliceConfiguration(),\n      this.renderDisplayConfiguration()),\n\n      ___EmotionJSX(\"div\", { style: { display: 'flex', justifyContent: 'space-between' } },\n      isNew ?\n      ___EmotionJSX(Button, { buttonSize: \"small\", onClick: () => this.props.close() },\n      t('Cancel')) :\n\n\n      ___EmotionJSX(Button, { buttonSize: \"small\", onClick: this.deleteAnnotation },\n      t('Remove')),\n\n\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        disabled: !isValid,\n        onClick: this.applyAnnotation },\n\n      t('Apply')),\n\n\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"primary\",\n        disabled: !isValid,\n        onClick: this.submitAnnotation },\n\n      t('OK'))))));\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nAnnotationLayer.propTypes = propTypes;\nAnnotationLayer.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(AUTOMATIC_COLOR, \"AUTOMATIC_COLOR\", \"/app/superset-frontend/src/explore/components/controls/AnnotationLayer.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/explore/components/controls/AnnotationLayer.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/explore/components/controls/AnnotationLayer.jsx\");reactHotLoader.register(AnnotationLayer, \"AnnotationLayer\", \"/app/superset-frontend/src/explore/components/controls/AnnotationLayer.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/AnnotationLayer.jsx"],"names":["React","PropTypes","CompactPicker","Button","parse","mathjsParse","t","SupersetClient","getCategoricalSchemeRegistry","getChartMetadataRegistry","validateNonEmpty","SelectControl","TextControl","CheckboxControl","ANNOTATION_SOURCE_TYPES","ANNOTATION_TYPES","ANNOTATION_TYPES_METADATA","DEFAULT_ANNOTATION_TYPE","requiresQuery","ANNOTATION_SOURCE_TYPES_METADATA","PopoverSection","ControlHeader","AUTOMATIC_COLOR","propTypes","name","string","annotationType","sourceType","color","opacity","style","width","number","showMarkers","bool","hideLine","value","oneOfType","overrides","object","show","titleColumn","descriptionColumns","arrayOf","timeColumn","intervalEndColumn","vizType","error","colorScheme","addAnnotationLayer","func","removeAnnotationLayer","close","defaultProps","AnnotationLayer","PureComponent","constructor","props","time_range","since","until","metadata","get","supportedAnnotationTypes","validAnnotationType","state","isNew","isLoadingOptions","valueOptions","submitAnnotation","deleteAnnotation","applyAnnotation","fetchOptions","handleAnnotationType","handleAnnotationSourceType","handleValue","isValidForm","componentDidMount","componentDidUpdate","prevProps","prevState","getSupportedSourceTypes","sources","chartMetadata","canBeAnnotationType","key","label","supportNativeSource","unshift","NATIVE","isValidFormula","FORMULA","compile","evaluate","x","err","errors","EVENT","push","INTERVAL","length","setState","prevSourceType","endpoint","then","json","layers","result","layer","id","registry","viz_type","title","slice","annotationFields","newAnnotation","field","renderOption","option","renderValueConfiguration","description","join","renderSliceConfiguration","columns","data","groupby","all_columns","timeColumnOptions","include_time","marginRight","v","TIME_SERIES","marginTop","time_grain_sqla","granularity","time_shift","renderDisplayConfiguration","colors","toLowerCase","display","flexDirection","hex","marginBottom","render","isValid","type","supportedSourceTypes","justifyContent"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { CompactPicker } from 'react-color';\nimport Button from 'src/components/Button';\nimport { parse as mathjsParse } from 'mathjs';\nimport {\n  t,\n  SupersetClient,\n  getCategoricalSchemeRegistry,\n  getChartMetadataRegistry,\n  validateNonEmpty,\n} from '@superset-ui/core';\n\nimport SelectControl from './SelectControl';\nimport TextControl from './TextControl';\nimport CheckboxControl from './CheckboxControl';\n\nimport {\n  ANNOTATION_SOURCE_TYPES,\n  ANNOTATION_TYPES,\n  ANNOTATION_TYPES_METADATA,\n  DEFAULT_ANNOTATION_TYPE,\n  requiresQuery,\n  ANNOTATION_SOURCE_TYPES_METADATA,\n} from '../../../modules/AnnotationTypes';\n\nimport PopoverSection from '../../../components/PopoverSection';\nimport ControlHeader from '../ControlHeader';\nimport './AnnotationLayer.less';\n\nconst AUTOMATIC_COLOR = '';\n\nconst propTypes = {\n  name: PropTypes.string,\n  annotationType: PropTypes.string,\n  sourceType: PropTypes.string,\n  color: PropTypes.string,\n  opacity: PropTypes.string,\n  style: PropTypes.string,\n  width: PropTypes.number,\n  showMarkers: PropTypes.bool,\n  hideLine: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  overrides: PropTypes.object,\n  show: PropTypes.bool,\n  titleColumn: PropTypes.string,\n  descriptionColumns: PropTypes.arrayOf(PropTypes.string),\n  timeColumn: PropTypes.string,\n  intervalEndColumn: PropTypes.string,\n  vizType: PropTypes.string,\n\n  error: PropTypes.string,\n  colorScheme: PropTypes.string,\n\n  addAnnotationLayer: PropTypes.func,\n  removeAnnotationLayer: PropTypes.func,\n  close: PropTypes.func,\n};\n\nconst defaultProps = {\n  name: '',\n  annotationType: DEFAULT_ANNOTATION_TYPE,\n  sourceType: '',\n  color: AUTOMATIC_COLOR,\n  opacity: '',\n  style: 'solid',\n  width: 1,\n  showMarkers: false,\n  hideLine: false,\n  overrides: {},\n  colorScheme: 'd3Category10',\n  show: true,\n  titleColumn: '',\n  descriptionColumns: [],\n  timeColumn: '',\n  intervalEndColumn: '',\n\n  addAnnotationLayer: () => {},\n  removeAnnotationLayer: () => {},\n  close: () => {},\n};\n\nexport default class AnnotationLayer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const {\n      name,\n      annotationType,\n      sourceType,\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      value,\n      overrides,\n      show,\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      vizType,\n    } = props;\n\n    // Only allow override whole time_range\n    if ('since' in overrides || 'until' in overrides) {\n      overrides.time_range = null;\n      delete overrides.since;\n      delete overrides.until;\n    }\n\n    // Check if annotationType is supported by this chart\n    const metadata = getChartMetadataRegistry().get(vizType);\n    const supportedAnnotationTypes = metadata?.supportedAnnotationTypes || [];\n    const validAnnotationType = supportedAnnotationTypes.includes(\n      annotationType,\n    )\n      ? annotationType\n      : supportedAnnotationTypes[0];\n\n    this.state = {\n      // base\n      name,\n      annotationType: validAnnotationType,\n      sourceType,\n      value,\n      overrides,\n      show,\n      // slice\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      // display\n      color: color || AUTOMATIC_COLOR,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      // refData\n      isNew: !name,\n      isLoadingOptions: true,\n      valueOptions: [],\n    };\n    this.submitAnnotation = this.submitAnnotation.bind(this);\n    this.deleteAnnotation = this.deleteAnnotation.bind(this);\n    this.applyAnnotation = this.applyAnnotation.bind(this);\n    this.fetchOptions = this.fetchOptions.bind(this);\n    this.handleAnnotationType = this.handleAnnotationType.bind(this);\n    this.handleAnnotationSourceType = this.handleAnnotationSourceType.bind(\n      this,\n    );\n    this.handleValue = this.handleValue.bind(this);\n    this.isValidForm = this.isValidForm.bind(this);\n  }\n\n  componentDidMount() {\n    const { annotationType, sourceType, isLoadingOptions } = this.state;\n    this.fetchOptions(annotationType, sourceType, isLoadingOptions);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.sourceType !== this.state.sourceType) {\n      this.fetchOptions(this.state.annotationType, this.state.sourceType, true);\n    }\n  }\n\n  getSupportedSourceTypes(annotationType) {\n    // Get vis types that can be source.\n    const sources = getChartMetadataRegistry()\n      .entries()\n      .filter(({ value: chartMetadata }) =>\n        chartMetadata.canBeAnnotationType(annotationType),\n      )\n      .map(({ key, value: chartMetadata }) => ({\n        value: key,\n        label: chartMetadata.name,\n      }));\n    // Prepend native source if applicable\n    if (ANNOTATION_TYPES_METADATA[annotationType]?.supportNativeSource) {\n      sources.unshift(ANNOTATION_SOURCE_TYPES_METADATA.NATIVE);\n    }\n    return sources;\n  }\n\n  isValidFormula(value, annotationType) {\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      try {\n        mathjsParse(value).compile().evaluate({ x: 0 });\n      } catch (err) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isValidForm() {\n    const {\n      name,\n      annotationType,\n      sourceType,\n      value,\n      timeColumn,\n      intervalEndColumn,\n    } = this.state;\n    const errors = [\n      validateNonEmpty(name),\n      validateNonEmpty(annotationType),\n      validateNonEmpty(value),\n    ];\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE) {\n      if (annotationType === ANNOTATION_TYPES.EVENT) {\n        errors.push(validateNonEmpty(timeColumn));\n      }\n      if (annotationType === ANNOTATION_TYPES.INTERVAL) {\n        errors.push(validateNonEmpty(timeColumn));\n        errors.push(validateNonEmpty(intervalEndColumn));\n      }\n    }\n    errors.push(this.isValidFormula(value, annotationType));\n    return !errors.filter(x => x).length;\n  }\n\n  handleAnnotationType(annotationType) {\n    this.setState({\n      annotationType,\n      sourceType: null,\n      value: null,\n    });\n  }\n\n  handleAnnotationSourceType(sourceType) {\n    const { sourceType: prevSourceType } = this.state;\n\n    if (prevSourceType !== sourceType) {\n      this.setState({ sourceType, value: null, isLoadingOptions: true });\n    }\n  }\n\n  handleValue(value) {\n    this.setState({\n      value,\n      descriptionColumns: null,\n      intervalEndColumn: null,\n      timeColumn: null,\n      titleColumn: null,\n      overrides: { time_range: null },\n    });\n  }\n\n  fetchOptions(annotationType, sourceType, isLoadingOptions) {\n    if (isLoadingOptions) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        SupersetClient.get({\n          endpoint: '/annotationlayermodelview/api/read?',\n        }).then(({ json }) => {\n          const layers = json\n            ? json.result.map(layer => ({\n                value: layer.id,\n                label: layer.name,\n              }))\n            : [];\n          this.setState({\n            isLoadingOptions: false,\n            valueOptions: layers,\n          });\n        });\n      } else if (requiresQuery(sourceType)) {\n        SupersetClient.get({ endpoint: '/superset/user_slices' }).then(\n          ({ json }) => {\n            const registry = getChartMetadataRegistry();\n            this.setState({\n              isLoadingOptions: false,\n              valueOptions: json\n                .filter(x => {\n                  const metadata = registry.get(x.viz_type);\n                  return (\n                    metadata && metadata.canBeAnnotationType(annotationType)\n                  );\n                })\n                .map(x => ({ value: x.id, label: x.title, slice: x })),\n            });\n          },\n        );\n      } else {\n        this.setState({\n          isLoadingOptions: false,\n          valueOptions: [],\n        });\n      }\n    }\n  }\n\n  deleteAnnotation() {\n    this.props.removeAnnotationLayer();\n    this.props.close();\n  }\n\n  applyAnnotation() {\n    if (this.isValidForm()) {\n      const annotationFields = [\n        'name',\n        'annotationType',\n        'sourceType',\n        'color',\n        'opacity',\n        'style',\n        'width',\n        'showMarkers',\n        'hideLine',\n        'value',\n        'overrides',\n        'show',\n        'titleColumn',\n        'descriptionColumns',\n        'timeColumn',\n        'intervalEndColumn',\n      ];\n      const newAnnotation = {};\n      annotationFields.forEach(field => {\n        if (this.state[field] !== null) {\n          newAnnotation[field] = this.state[field];\n        }\n      });\n\n      if (newAnnotation.color === AUTOMATIC_COLOR) {\n        newAnnotation.color = null;\n      }\n\n      this.props.addAnnotationLayer(newAnnotation);\n      this.setState({ isNew: false });\n    }\n  }\n\n  submitAnnotation() {\n    this.applyAnnotation();\n    this.props.close();\n  }\n\n  renderOption(option) {\n    return (\n      <span className=\"optionWrapper\" title={option.label}>\n        {option.label}\n      </span>\n    );\n  }\n\n  renderValueConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      valueOptions,\n      isLoadingOptions,\n    } = this.state;\n    let label = '';\n    let description = '';\n    if (requiresQuery(sourceType)) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        label = 'Annotation layer';\n        description = 'Select the Annotation Layer you would like to use.';\n      } else {\n        label = t('Chart');\n        description = `Use a pre defined Superset Chart as a source for annotations and overlays.\n        your chart must be one of these visualization types:\n        [${this.getSupportedSourceTypes(annotationType)\n          .map(x => x.label)\n          .join(', ')}]`;\n      }\n    } else if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      label = 'Formula';\n      description = `Expects a formula with depending time parameter 'x'\n        in milliseconds since epoch. mathjs is used to evaluate the formulas.\n        Example: '2x+5'`;\n    }\n    if (requiresQuery(sourceType)) {\n      return (\n        <SelectControl\n          name=\"annotation-layer-value\"\n          showHeader\n          hovered\n          description={description}\n          label={label}\n          placeholder=\"\"\n          options={valueOptions}\n          isLoading={isLoadingOptions}\n          value={value}\n          onChange={this.handleValue}\n          validationErrors={!value ? ['Mandatory'] : []}\n          optionRenderer={this.renderOption}\n        />\n      );\n    }\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      return (\n        <TextControl\n          name=\"annotation-layer-value\"\n          hovered\n          showHeader\n          description={description}\n          label={label}\n          placeholder=\"\"\n          value={value}\n          onChange={this.handleValue}\n          validationErrors={\n            this.isValidFormula(value, annotationType) ? ['Bad formula.'] : []\n          }\n        />\n      );\n    }\n    return '';\n  }\n\n  renderSliceConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      valueOptions,\n      overrides,\n      titleColumn,\n      timeColumn,\n      intervalEndColumn,\n      descriptionColumns,\n    } = this.state;\n    const { slice } = valueOptions.find(x => x.value === value) || {};\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE && slice) {\n      const columns = (slice.data.groupby || [])\n        .concat(slice.data.all_columns || [])\n        .map(x => ({ value: x, label: x }));\n      const timeColumnOptions = slice.data.include_time\n        ? [{ value: '__timestamp', label: '__timestamp' }].concat(columns)\n        : columns;\n      return (\n        <div style={{ marginRight: '2rem' }}>\n          <PopoverSection\n            isSelected\n            title={t('Annotation Slice Configuration')}\n            info={t(`This section allows you to configure how to use the slice\n               to generate annotations.`)}\n          >\n            {(annotationType === ANNOTATION_TYPES.EVENT ||\n              annotationType === ANNOTATION_TYPES.INTERVAL) && (\n              <SelectControl\n                hovered\n                name=\"annotation-layer-time-column\"\n                label={\n                  annotationType === ANNOTATION_TYPES.INTERVAL\n                    ? 'Interval start column'\n                    : 'Event time column'\n                }\n                description=\"This column must contain date/time information.\"\n                validationErrors={!timeColumn ? ['Mandatory'] : []}\n                clearable={false}\n                options={timeColumnOptions}\n                value={timeColumn}\n                onChange={v => this.setState({ timeColumn: v })}\n              />\n            )}\n            {annotationType === ANNOTATION_TYPES.INTERVAL && (\n              <SelectControl\n                hovered\n                name=\"annotation-layer-intervalEnd\"\n                label=\"Interval End column\"\n                description=\"This column must contain date/time information.\"\n                validationErrors={!intervalEndColumn ? ['Mandatory'] : []}\n                options={columns}\n                value={intervalEndColumn}\n                onChange={v => this.setState({ intervalEndColumn: v })}\n              />\n            )}\n            <SelectControl\n              hovered\n              name=\"annotation-layer-title\"\n              label=\"Title Column\"\n              description=\"Pick a title for you annotation.\"\n              options={[{ value: '', label: 'None' }].concat(columns)}\n              value={titleColumn}\n              onChange={v => this.setState({ titleColumn: v })}\n            />\n            {annotationType !== ANNOTATION_TYPES.TIME_SERIES && (\n              <SelectControl\n                hovered\n                name=\"annotation-layer-title\"\n                label=\"Description Columns\"\n                description={`Pick one or more columns that should be shown in the\n                  annotation. If you don't select a column all of them will be shown.`}\n                multi\n                options={columns}\n                value={descriptionColumns}\n                onChange={v => this.setState({ descriptionColumns: v })}\n              />\n            )}\n            <div style={{ marginTop: '1rem' }}>\n              <CheckboxControl\n                hovered\n                name=\"annotation-override-time_range\"\n                label=\"Override time range\"\n                description={`This controls whether the \"time_range\" field from the current\n                  view should be passed down to the chart containing the annotation data.`}\n                value={'time_range' in overrides}\n                onChange={v => {\n                  delete overrides.time_range;\n                  if (v) {\n                    this.setState({\n                      overrides: { ...overrides, time_range: null },\n                    });\n                  } else {\n                    this.setState({ overrides: { ...overrides } });\n                  }\n                }}\n              />\n              <CheckboxControl\n                hovered\n                name=\"annotation-override-timegrain\"\n                label=\"Override time grain\"\n                description={`This controls whether the time grain field from the current\n                  view should be passed down to the chart containing the annotation data.`}\n                value={'time_grain_sqla' in overrides}\n                onChange={v => {\n                  delete overrides.time_grain_sqla;\n                  delete overrides.granularity;\n                  if (v) {\n                    this.setState({\n                      overrides: {\n                        ...overrides,\n                        time_grain_sqla: null,\n                        granularity: null,\n                      },\n                    });\n                  } else {\n                    this.setState({ overrides: { ...overrides } });\n                  }\n                }}\n              />\n              <TextControl\n                hovered\n                name=\"annotation-layer-timeshift\"\n                label=\"Time Shift\"\n                description={`Time delta in natural language\n                  (example:  24 hours, 7 days, 56 weeks, 365 days)`}\n                placeholder=\"\"\n                value={overrides.time_shift}\n                onChange={v =>\n                  this.setState({ overrides: { ...overrides, time_shift: v } })\n                }\n              />\n            </div>\n          </PopoverSection>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  renderDisplayConfiguration() {\n    const {\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      annotationType,\n    } = this.state;\n    const colorScheme = getCategoricalSchemeRegistry()\n      .get(this.props.colorScheme)\n      .colors.concat();\n    if (\n      color &&\n      color !== AUTOMATIC_COLOR &&\n      !colorScheme.find(x => x.toLowerCase() === color.toLowerCase())\n    ) {\n      colorScheme.push(color);\n    }\n    return (\n      <PopoverSection\n        isSelected\n        title={t('Display configuration')}\n        info={t('Configure your how you overlay is displayed here.')}\n      >\n        <SelectControl\n          name=\"annotation-layer-stroke\"\n          label={t('Style')}\n          // see '../../../visualizations/nvd3_vis.css'\n          options={[\n            { value: 'solid', label: 'Solid' },\n            { value: 'dashed', label: 'Dashed' },\n            { value: 'longDashed', label: 'Long dashed' },\n            { value: 'dotted', label: 'Dotted' },\n          ]}\n          value={style}\n          clearable={false}\n          onChange={v => this.setState({ style: v })}\n        />\n        <SelectControl\n          name=\"annotation-layer-opacity\"\n          label={t('Opacity')}\n          // see '../../../visualizations/nvd3_vis.css'\n          options={[\n            { value: '', label: 'Solid' },\n            { value: 'opacityLow', label: '0.2' },\n            { value: 'opacityMedium', label: '0.5' },\n            { value: 'opacityHigh', label: '0.8' },\n          ]}\n          value={opacity}\n          onChange={v => this.setState({ opacity: v })}\n        />\n        <div>\n          <ControlHeader label={t('Color')} />\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <CompactPicker\n              color={color}\n              colors={colorScheme}\n              onChangeComplete={v => this.setState({ color: v.hex })}\n            />\n            <Button\n              style={{ marginTop: '0.5rem', marginBottom: '0.5rem' }}\n              buttonStyle={color === AUTOMATIC_COLOR ? 'success' : 'default'}\n              buttonSize=\"xsmall\"\n              onClick={() => this.setState({ color: AUTOMATIC_COLOR })}\n            >\n              Automatic Color\n            </Button>\n          </div>\n        </div>\n        <TextControl\n          name=\"annotation-layer-stroke-width\"\n          label={t('Line width')}\n          isInt\n          value={width}\n          onChange={v => this.setState({ width: v })}\n        />\n        {annotationType === ANNOTATION_TYPES.TIME_SERIES && (\n          <CheckboxControl\n            hovered\n            name=\"annotation-layer-show-markers\"\n            label=\"Show Markers\"\n            description=\"Shows or hides markers for the time series\"\n            value={showMarkers}\n            onChange={v => this.setState({ showMarkers: v })}\n          />\n        )}\n        {annotationType === ANNOTATION_TYPES.TIME_SERIES && (\n          <CheckboxControl\n            hovered\n            name=\"annotation-layer-hide-line\"\n            label=\"Hide Line\"\n            description=\"Hides the Line for the time series\"\n            value={hideLine}\n            onChange={v => this.setState({ hideLine: v })}\n          />\n        )}\n      </PopoverSection>\n    );\n  }\n\n  render() {\n    const { isNew, name, annotationType, sourceType, show } = this.state;\n    const isValid = this.isValidForm();\n    const metadata = getChartMetadataRegistry().get(this.props.vizType);\n    const supportedAnnotationTypes = metadata\n      ? metadata.supportedAnnotationTypes.map(\n          type => ANNOTATION_TYPES_METADATA[type],\n        )\n      : [];\n    const supportedSourceTypes = this.getSupportedSourceTypes(annotationType);\n\n    return (\n      <>\n        {this.props.error && (\n          <span style={{ color: 'red' }}>ERROR: {this.props.error}</span>\n        )}\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n          <div style={{ marginRight: '2rem' }}>\n            <PopoverSection\n              isSelected\n              title={t('Layer configuration')}\n              info={t('Configure the basics of your Annotation Layer.')}\n            >\n              <TextControl\n                name=\"annotation-layer-name\"\n                label={t('Name')}\n                placeholder=\"\"\n                value={name}\n                onChange={v => this.setState({ name: v })}\n                validationErrors={!name ? [t('Mandatory')] : []}\n              />\n              <CheckboxControl\n                name=\"annotation-layer-hide\"\n                label={t('Hide layer')}\n                value={!show}\n                onChange={v => this.setState({ show: !v })}\n              />\n              <SelectControl\n                hovered\n                description={t('Choose the annotation layer type')}\n                label={t('Annotation layer type')}\n                name=\"annotation-layer-type\"\n                clearable={false}\n                options={supportedAnnotationTypes}\n                value={annotationType}\n                onChange={this.handleAnnotationType}\n              />\n              {supportedSourceTypes.length > 0 && (\n                <SelectControl\n                  hovered\n                  description=\"Choose the source of your annotations\"\n                  label=\"Annotation Source\"\n                  name=\"annotation-source-type\"\n                  options={supportedSourceTypes}\n                  value={sourceType}\n                  onChange={this.handleAnnotationSourceType}\n                  validationErrors={!sourceType ? [t('Mandatory')] : []}\n                />\n              )}\n              {this.renderValueConfiguration()}\n            </PopoverSection>\n          </div>\n          {this.renderSliceConfiguration()}\n          {this.renderDisplayConfiguration()}\n        </div>\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          {isNew ? (\n            <Button buttonSize=\"small\" onClick={() => this.props.close()}>\n              {t('Cancel')}\n            </Button>\n          ) : (\n            <Button buttonSize=\"small\" onClick={this.deleteAnnotation}>\n              {t('Remove')}\n            </Button>\n          )}\n          <div>\n            <Button\n              buttonSize=\"small\"\n              disabled={!isValid}\n              onClick={this.applyAnnotation}\n            >\n              {t('Apply')}\n            </Button>\n\n            <Button\n              buttonSize=\"small\"\n              buttonStyle=\"primary\"\n              disabled={!isValid}\n              onClick={this.submitAnnotation}\n            >\n              {t('OK')}\n            </Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nAnnotationLayer.propTypes = propTypes;\nAnnotationLayer.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}