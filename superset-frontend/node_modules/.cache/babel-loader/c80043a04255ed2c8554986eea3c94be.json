{"ast":null,"code":"import \"core-js/modules/es.string.replace.js\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { styled, SupersetClient, t } from '@superset-ui/core';\n\nimport { Menu, NoAnimationDropdown } from 'src/common/components';\nimport Icon from 'src/components/Icon';\nimport { URL_PARAMS } from 'src/constants';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport CssEditor from './CssEditor';\nimport RefreshIntervalModal from './RefreshIntervalModal';\nimport SaveModal from './SaveModal';\nimport injectCustomCss from '../util/injectCustomCss';\nimport { SAVE_TYPE_NEWDASHBOARD } from '../util/constants';\nimport FilterScopeModal from './filterscope/FilterScopeModal';\nimport downloadAsImage from '../../utils/downloadAsImage';\nimport getDashboardUrl from '../util/getDashboardUrl';\nimport { getActiveFilters } from '../util/activeDashboardFilters';\nimport { getUrlParam } from '../../utils/urlUtils';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardId: PropTypes.number.isRequired,\n  dashboardTitle: PropTypes.string.isRequired,\n  customCss: PropTypes.string.isRequired,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  forceRefreshAllCharts: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number.isRequired,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  startPeriodicRender: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  userCanEdit: PropTypes.bool.isRequired,\n  userCanSave: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object.isRequired,\n  onSave: PropTypes.func.isRequired,\n  showPropertiesModal: PropTypes.func.isRequired,\n  refreshLimit: PropTypes.number,\n  refreshWarning: PropTypes.string,\n  lastModifiedTime: PropTypes.number.isRequired };\n\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  refreshLimit: 0,\n  refreshWarning: null };\n\n\nconst MENU_KEYS = {\n  SAVE_MODAL: 'save-modal',\n  SHARE_DASHBOARD: 'share-dashboard',\n  REFRESH_DASHBOARD: 'refresh-dashboard',\n  AUTOREFRESH_MODAL: 'autorefresh-modal',\n  SET_FILTER_MAPPING: 'set-filter-mapping',\n  EDIT_PROPERTIES: 'edit-properties',\n  EDIT_CSS: 'edit-css',\n  DOWNLOAD_AS_IMAGE: 'download-as-image',\n  TOGGLE_FULLSCREEN: 'toggle-fullscreen' };\n\n\nconst DropdownButton = styled.div`\n  margin-left: ${({ theme }) => theme.gridUnit * 2.5}px;\n`;\n\nconst SCREENSHOT_NODE_SELECTOR = '.dashboard';\n\nclass HeaderActionsDropdown extends React.PureComponent {\n  static discardChanges() {\n    window.location.reload();\n  }\n\n  constructor(props) {var _context, _context2, _context3;\n    super(props);\n    this.state = {\n      css: props.customCss,\n      cssTemplates: [] };\n\n\n    this.changeCss = _bindInstanceProperty(_context = this.changeCss).call(_context, this);\n    this.changeRefreshInterval = _bindInstanceProperty(_context2 = this.changeRefreshInterval).call(_context2, this);\n    this.handleMenuClick = _bindInstanceProperty(_context3 = this.handleMenuClick).call(_context3, this);\n  }\n\n  UNSAFE_componentWillMount() {\n    injectCustomCss(this.state.css);\n\n    SupersetClient.get({ endpoint: '/csstemplateasyncmodelview/api/read' }).\n    then(({ json }) => {var _context4;\n      const cssTemplates = _mapInstanceProperty(_context4 = json.result).call(_context4, row => ({\n        value: row.template_name,\n        css: row.css,\n        label: row.template_name }));\n\n      this.setState({ cssTemplates });\n    }).\n    catch(() => {\n      this.props.addDangerToast(\n      t('An error occurred while fetching available CSS templates'));\n\n    });\n  }\n\n  changeCss(css) {\n    this.setState({ css }, () => {\n      injectCustomCss(css);\n    });\n    this.props.onChange();\n    this.props.updateCss(css);\n  }\n\n  changeRefreshInterval(refreshInterval, isPersistent) {\n    this.props.setRefreshFrequency(refreshInterval, isPersistent);\n    this.props.startPeriodicRender(refreshInterval * 1000);\n  }\n\n  handleMenuClick({ key, domEvent }) {\n    switch (key) {\n      case MENU_KEYS.REFRESH_DASHBOARD:\n        this.props.forceRefreshAllCharts();\n        break;\n      case MENU_KEYS.EDIT_PROPERTIES:\n        this.props.showPropertiesModal();\n        break;\n      case MENU_KEYS.DOWNLOAD_AS_IMAGE:{\n          // menu closes with a delay, we need to hide it manually,\n          // so that we don't capture it on the screenshot\n          const menu = document.querySelector(\n          '.ant-dropdown:not(.ant-dropdown-hidden)');\n\n          menu.style.visibility = 'hidden';\n          downloadAsImage(\n          SCREENSHOT_NODE_SELECTOR,\n          this.props.dashboardTitle)(\n          domEvent).then(() => {\n            menu.style.visibility = 'visible';\n          });\n          break;\n        }\n      case MENU_KEYS.TOGGLE_FULLSCREEN:{\n          const url = getDashboardUrl(\n          window.location.pathname,\n          getActiveFilters(),\n          window.location.hash,\n          getUrlParam(URL_PARAMS.standalone, 'number'));\n\n          window.location.replace(url);\n          break;\n        }\n      default:\n        break;}\n\n  }\n\n  render() {\n    const {\n      dashboardTitle,\n      dashboardId,\n      dashboardInfo,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      editMode,\n      customCss,\n      colorNamespace,\n      colorScheme,\n      layout,\n      expandedSlices,\n      onSave,\n      userCanEdit,\n      userCanSave,\n      isLoading,\n      refreshLimit,\n      refreshWarning,\n      lastModifiedTime,\n      addSuccessToast,\n      addDangerToast } =\n    this.props;\n\n    const emailTitle = t('Superset dashboard');\n    const emailSubject = `${emailTitle} ${dashboardTitle}`;\n    const emailBody = t('Check out this dashboard: ');\n    const url = getDashboardUrl(\n    window.location.pathname,\n    getActiveFilters(),\n    window.location.hash);\n\n\n    const menu =\n    ___EmotionJSX(Menu, {\n      onClick: this.handleMenuClick,\n      selectable: false,\n      \"data-test\": \"header-actions-menu\" },\n\n    userCanSave &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.SAVE_MODAL },\n    ___EmotionJSX(SaveModal, {\n      addSuccessToast: this.props.addSuccessToast,\n      addDangerToast: this.props.addDangerToast,\n      dashboardId: dashboardId,\n      dashboardTitle: dashboardTitle,\n      dashboardInfo: dashboardInfo,\n      saveType: SAVE_TYPE_NEWDASHBOARD,\n      layout: layout,\n      expandedSlices: expandedSlices,\n      refreshFrequency: refreshFrequency,\n      shouldPersistRefreshFrequency: shouldPersistRefreshFrequency,\n      lastModifiedTime: lastModifiedTime,\n      customCss: customCss,\n      colorNamespace: colorNamespace,\n      colorScheme: colorScheme,\n      onSave: onSave,\n      triggerNode:\n      ___EmotionJSX(\"span\", { \"data-test\": \"save-as-menu-item\" }, t('Save as')),\n\n      canOverwrite: userCanEdit })),\n\n\n\n    ___EmotionJSX(ShareMenuItems, {\n      url: url,\n      copyMenuItemTitle: t('Copy dashboard URL'),\n      emailMenuItemTitle: t('Share dashboard by email'),\n      emailSubject: emailSubject,\n      emailBody: emailBody,\n      addSuccessToast: addSuccessToast,\n      addDangerToast: addDangerToast }),\n\n    ___EmotionJSX(Menu.Item, {\n      key: MENU_KEYS.REFRESH_DASHBOARD,\n      \"data-test\": \"refresh-dashboard-menu-item\",\n      disabled: isLoading },\n\n    t('Refresh dashboard')),\n\n    ___EmotionJSX(Menu.Divider, null),\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.AUTOREFRESH_MODAL },\n    ___EmotionJSX(RefreshIntervalModal, {\n      refreshFrequency: refreshFrequency,\n      refreshLimit: refreshLimit,\n      refreshWarning: refreshWarning,\n      onChange: this.changeRefreshInterval,\n      editMode: editMode,\n      triggerNode: ___EmotionJSX(\"span\", null, t('Set auto-refresh interval')) })),\n\n\n\n    editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.SET_FILTER_MAPPING },\n    ___EmotionJSX(FilterScopeModal, {\n      className: \"m-r-5\",\n      triggerNode: t('Set filter mapping') })),\n\n\n\n\n    editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.EDIT_PROPERTIES },\n    t('Edit dashboard properties')),\n\n\n\n    editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.EDIT_CSS },\n    ___EmotionJSX(CssEditor, {\n      triggerNode: ___EmotionJSX(\"span\", null, t('Edit CSS')),\n      initialCss: this.state.css,\n      templates: this.state.cssTemplates,\n      onChange: this.changeCss })),\n\n\n\n\n    !editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.DOWNLOAD_AS_IMAGE },\n    t('Download as image')),\n\n\n\n    !editMode &&\n    ___EmotionJSX(Menu.Item, { key: MENU_KEYS.TOGGLE_FULLSCREEN },\n    t('Toggle fullscreen')));\n\n\n\n\n    return (\n      ___EmotionJSX(NoAnimationDropdown, {\n        overlay: menu,\n        trigger: ['click'],\n        getPopupContainer: (triggerNode) =>\n        triggerNode.closest(SCREENSHOT_NODE_SELECTOR) },\n\n\n      ___EmotionJSX(DropdownButton, { id: \"save-dash-split-button\", role: \"button\" },\n      ___EmotionJSX(Icon, { name: \"more-horiz\" }))));\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nHeaderActionsDropdown.propTypes = propTypes;\nHeaderActionsDropdown.defaultProps = defaultProps;const _default =\n\nHeaderActionsDropdown;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/dashboard/components/HeaderActionsDropdown.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/dashboard/components/HeaderActionsDropdown.jsx\");reactHotLoader.register(MENU_KEYS, \"MENU_KEYS\", \"/app/superset-frontend/src/dashboard/components/HeaderActionsDropdown.jsx\");reactHotLoader.register(DropdownButton, \"DropdownButton\", \"/app/superset-frontend/src/dashboard/components/HeaderActionsDropdown.jsx\");reactHotLoader.register(SCREENSHOT_NODE_SELECTOR, \"SCREENSHOT_NODE_SELECTOR\", \"/app/superset-frontend/src/dashboard/components/HeaderActionsDropdown.jsx\");reactHotLoader.register(HeaderActionsDropdown, \"HeaderActionsDropdown\", \"/app/superset-frontend/src/dashboard/components/HeaderActionsDropdown.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/HeaderActionsDropdown.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/HeaderActionsDropdown.jsx"],"names":["React","PropTypes","styled","SupersetClient","t","Menu","NoAnimationDropdown","Icon","URL_PARAMS","ShareMenuItems","CssEditor","RefreshIntervalModal","SaveModal","injectCustomCss","SAVE_TYPE_NEWDASHBOARD","FilterScopeModal","downloadAsImage","getDashboardUrl","getActiveFilters","getUrlParam","propTypes","addSuccessToast","func","isRequired","addDangerToast","dashboardInfo","object","dashboardId","number","dashboardTitle","string","customCss","colorNamespace","colorScheme","onChange","updateCss","forceRefreshAllCharts","refreshFrequency","shouldPersistRefreshFrequency","bool","setRefreshFrequency","startPeriodicRender","editMode","userCanEdit","userCanSave","isLoading","layout","expandedSlices","onSave","showPropertiesModal","refreshLimit","refreshWarning","lastModifiedTime","defaultProps","undefined","MENU_KEYS","SAVE_MODAL","SHARE_DASHBOARD","REFRESH_DASHBOARD","AUTOREFRESH_MODAL","SET_FILTER_MAPPING","EDIT_PROPERTIES","EDIT_CSS","DOWNLOAD_AS_IMAGE","TOGGLE_FULLSCREEN","DropdownButton","div","theme","gridUnit","SCREENSHOT_NODE_SELECTOR","HeaderActionsDropdown","PureComponent","discardChanges","window","location","reload","constructor","props","state","css","cssTemplates","changeCss","changeRefreshInterval","handleMenuClick","UNSAFE_componentWillMount","get","endpoint","then","json","result","row","value","template_name","label","setState","catch","refreshInterval","isPersistent","key","domEvent","menu","document","querySelector","style","visibility","url","pathname","hash","standalone","replace","render","emailTitle","emailSubject","emailBody","triggerNode","closest"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { styled, SupersetClient, t } from '@superset-ui/core';\n\nimport { Menu, NoAnimationDropdown } from 'src/common/components';\nimport Icon from 'src/components/Icon';\nimport { URL_PARAMS } from 'src/constants';\nimport ShareMenuItems from 'src/dashboard/components/menu/ShareMenuItems';\nimport CssEditor from './CssEditor';\nimport RefreshIntervalModal from './RefreshIntervalModal';\nimport SaveModal from './SaveModal';\nimport injectCustomCss from '../util/injectCustomCss';\nimport { SAVE_TYPE_NEWDASHBOARD } from '../util/constants';\nimport FilterScopeModal from './filterscope/FilterScopeModal';\nimport downloadAsImage from '../../utils/downloadAsImage';\nimport getDashboardUrl from '../util/getDashboardUrl';\nimport { getActiveFilters } from '../util/activeDashboardFilters';\nimport { getUrlParam } from '../../utils/urlUtils';\n\nconst propTypes = {\n  addSuccessToast: PropTypes.func.isRequired,\n  addDangerToast: PropTypes.func.isRequired,\n  dashboardInfo: PropTypes.object.isRequired,\n  dashboardId: PropTypes.number.isRequired,\n  dashboardTitle: PropTypes.string.isRequired,\n  customCss: PropTypes.string.isRequired,\n  colorNamespace: PropTypes.string,\n  colorScheme: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  updateCss: PropTypes.func.isRequired,\n  forceRefreshAllCharts: PropTypes.func.isRequired,\n  refreshFrequency: PropTypes.number.isRequired,\n  shouldPersistRefreshFrequency: PropTypes.bool.isRequired,\n  setRefreshFrequency: PropTypes.func.isRequired,\n  startPeriodicRender: PropTypes.func.isRequired,\n  editMode: PropTypes.bool.isRequired,\n  userCanEdit: PropTypes.bool.isRequired,\n  userCanSave: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  layout: PropTypes.object.isRequired,\n  expandedSlices: PropTypes.object.isRequired,\n  onSave: PropTypes.func.isRequired,\n  showPropertiesModal: PropTypes.func.isRequired,\n  refreshLimit: PropTypes.number,\n  refreshWarning: PropTypes.string,\n  lastModifiedTime: PropTypes.number.isRequired,\n};\n\nconst defaultProps = {\n  colorNamespace: undefined,\n  colorScheme: undefined,\n  refreshLimit: 0,\n  refreshWarning: null,\n};\n\nconst MENU_KEYS = {\n  SAVE_MODAL: 'save-modal',\n  SHARE_DASHBOARD: 'share-dashboard',\n  REFRESH_DASHBOARD: 'refresh-dashboard',\n  AUTOREFRESH_MODAL: 'autorefresh-modal',\n  SET_FILTER_MAPPING: 'set-filter-mapping',\n  EDIT_PROPERTIES: 'edit-properties',\n  EDIT_CSS: 'edit-css',\n  DOWNLOAD_AS_IMAGE: 'download-as-image',\n  TOGGLE_FULLSCREEN: 'toggle-fullscreen',\n};\n\nconst DropdownButton = styled.div`\n  margin-left: ${({ theme }) => theme.gridUnit * 2.5}px;\n`;\n\nconst SCREENSHOT_NODE_SELECTOR = '.dashboard';\n\nclass HeaderActionsDropdown extends React.PureComponent {\n  static discardChanges() {\n    window.location.reload();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      css: props.customCss,\n      cssTemplates: [],\n    };\n\n    this.changeCss = this.changeCss.bind(this);\n    this.changeRefreshInterval = this.changeRefreshInterval.bind(this);\n    this.handleMenuClick = this.handleMenuClick.bind(this);\n  }\n\n  UNSAFE_componentWillMount() {\n    injectCustomCss(this.state.css);\n\n    SupersetClient.get({ endpoint: '/csstemplateasyncmodelview/api/read' })\n      .then(({ json }) => {\n        const cssTemplates = json.result.map(row => ({\n          value: row.template_name,\n          css: row.css,\n          label: row.template_name,\n        }));\n        this.setState({ cssTemplates });\n      })\n      .catch(() => {\n        this.props.addDangerToast(\n          t('An error occurred while fetching available CSS templates'),\n        );\n      });\n  }\n\n  changeCss(css) {\n    this.setState({ css }, () => {\n      injectCustomCss(css);\n    });\n    this.props.onChange();\n    this.props.updateCss(css);\n  }\n\n  changeRefreshInterval(refreshInterval, isPersistent) {\n    this.props.setRefreshFrequency(refreshInterval, isPersistent);\n    this.props.startPeriodicRender(refreshInterval * 1000);\n  }\n\n  handleMenuClick({ key, domEvent }) {\n    switch (key) {\n      case MENU_KEYS.REFRESH_DASHBOARD:\n        this.props.forceRefreshAllCharts();\n        break;\n      case MENU_KEYS.EDIT_PROPERTIES:\n        this.props.showPropertiesModal();\n        break;\n      case MENU_KEYS.DOWNLOAD_AS_IMAGE: {\n        // menu closes with a delay, we need to hide it manually,\n        // so that we don't capture it on the screenshot\n        const menu = document.querySelector(\n          '.ant-dropdown:not(.ant-dropdown-hidden)',\n        );\n        menu.style.visibility = 'hidden';\n        downloadAsImage(\n          SCREENSHOT_NODE_SELECTOR,\n          this.props.dashboardTitle,\n        )(domEvent).then(() => {\n          menu.style.visibility = 'visible';\n        });\n        break;\n      }\n      case MENU_KEYS.TOGGLE_FULLSCREEN: {\n        const url = getDashboardUrl(\n          window.location.pathname,\n          getActiveFilters(),\n          window.location.hash,\n          getUrlParam(URL_PARAMS.standalone, 'number'),\n        );\n        window.location.replace(url);\n        break;\n      }\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const {\n      dashboardTitle,\n      dashboardId,\n      dashboardInfo,\n      refreshFrequency,\n      shouldPersistRefreshFrequency,\n      editMode,\n      customCss,\n      colorNamespace,\n      colorScheme,\n      layout,\n      expandedSlices,\n      onSave,\n      userCanEdit,\n      userCanSave,\n      isLoading,\n      refreshLimit,\n      refreshWarning,\n      lastModifiedTime,\n      addSuccessToast,\n      addDangerToast,\n    } = this.props;\n\n    const emailTitle = t('Superset dashboard');\n    const emailSubject = `${emailTitle} ${dashboardTitle}`;\n    const emailBody = t('Check out this dashboard: ');\n    const url = getDashboardUrl(\n      window.location.pathname,\n      getActiveFilters(),\n      window.location.hash,\n    );\n\n    const menu = (\n      <Menu\n        onClick={this.handleMenuClick}\n        selectable={false}\n        data-test=\"header-actions-menu\"\n      >\n        {userCanSave && (\n          <Menu.Item key={MENU_KEYS.SAVE_MODAL}>\n            <SaveModal\n              addSuccessToast={this.props.addSuccessToast}\n              addDangerToast={this.props.addDangerToast}\n              dashboardId={dashboardId}\n              dashboardTitle={dashboardTitle}\n              dashboardInfo={dashboardInfo}\n              saveType={SAVE_TYPE_NEWDASHBOARD}\n              layout={layout}\n              expandedSlices={expandedSlices}\n              refreshFrequency={refreshFrequency}\n              shouldPersistRefreshFrequency={shouldPersistRefreshFrequency}\n              lastModifiedTime={lastModifiedTime}\n              customCss={customCss}\n              colorNamespace={colorNamespace}\n              colorScheme={colorScheme}\n              onSave={onSave}\n              triggerNode={\n                <span data-test=\"save-as-menu-item\">{t('Save as')}</span>\n              }\n              canOverwrite={userCanEdit}\n            />\n          </Menu.Item>\n        )}\n        <ShareMenuItems\n          url={url}\n          copyMenuItemTitle={t('Copy dashboard URL')}\n          emailMenuItemTitle={t('Share dashboard by email')}\n          emailSubject={emailSubject}\n          emailBody={emailBody}\n          addSuccessToast={addSuccessToast}\n          addDangerToast={addDangerToast}\n        />\n        <Menu.Item\n          key={MENU_KEYS.REFRESH_DASHBOARD}\n          data-test=\"refresh-dashboard-menu-item\"\n          disabled={isLoading}\n        >\n          {t('Refresh dashboard')}\n        </Menu.Item>\n        <Menu.Divider />\n        <Menu.Item key={MENU_KEYS.AUTOREFRESH_MODAL}>\n          <RefreshIntervalModal\n            refreshFrequency={refreshFrequency}\n            refreshLimit={refreshLimit}\n            refreshWarning={refreshWarning}\n            onChange={this.changeRefreshInterval}\n            editMode={editMode}\n            triggerNode={<span>{t('Set auto-refresh interval')}</span>}\n          />\n        </Menu.Item>\n\n        {editMode && (\n          <Menu.Item key={MENU_KEYS.SET_FILTER_MAPPING}>\n            <FilterScopeModal\n              className=\"m-r-5\"\n              triggerNode={t('Set filter mapping')}\n            />\n          </Menu.Item>\n        )}\n\n        {editMode && (\n          <Menu.Item key={MENU_KEYS.EDIT_PROPERTIES}>\n            {t('Edit dashboard properties')}\n          </Menu.Item>\n        )}\n\n        {editMode && (\n          <Menu.Item key={MENU_KEYS.EDIT_CSS}>\n            <CssEditor\n              triggerNode={<span>{t('Edit CSS')}</span>}\n              initialCss={this.state.css}\n              templates={this.state.cssTemplates}\n              onChange={this.changeCss}\n            />\n          </Menu.Item>\n        )}\n\n        {!editMode && (\n          <Menu.Item key={MENU_KEYS.DOWNLOAD_AS_IMAGE}>\n            {t('Download as image')}\n          </Menu.Item>\n        )}\n\n        {!editMode && (\n          <Menu.Item key={MENU_KEYS.TOGGLE_FULLSCREEN}>\n            {t('Toggle fullscreen')}\n          </Menu.Item>\n        )}\n      </Menu>\n    );\n    return (\n      <NoAnimationDropdown\n        overlay={menu}\n        trigger={['click']}\n        getPopupContainer={triggerNode =>\n          triggerNode.closest(SCREENSHOT_NODE_SELECTOR)\n        }\n      >\n        <DropdownButton id=\"save-dash-split-button\" role=\"button\">\n          <Icon name=\"more-horiz\" />\n        </DropdownButton>\n      </NoAnimationDropdown>\n    );\n  }\n}\n\nHeaderActionsDropdown.propTypes = propTypes;\nHeaderActionsDropdown.defaultProps = defaultProps;\n\nexport default HeaderActionsDropdown;\n"]},"metadata":{},"sourceType":"module"}