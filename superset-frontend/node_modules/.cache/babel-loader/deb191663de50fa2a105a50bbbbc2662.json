{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport React, { useState, useMemo } from 'react';\nimport rison from 'rison';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport { createFetchRelated, createErrorHandler, handleDashboardDelete, handleBulkDashboardExport } from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport SubMenu from 'src/components/Menu/SubMenu';\nimport ListView, { FilterOperators } from 'src/components/ListView';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport FacePile from 'src/components/FacePile';\nimport Icons from 'src/components/Icons';\nimport FaveStar from 'src/components/FaveStar';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { Tooltip } from 'src/common/components/Tooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\nimport DashboardCard from './DashboardCard';import { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t('The passwords for the databases below are needed in order to ' +\n'import them together with the dashboards. Please note that the ' +\n'\"Secure Extra\" and \"Certificate\" sections of ' +\n'the database configuration are not present in export files, and ' +\n'should be added manually after the import if they are needed.');\nconst CONFIRM_OVERWRITE_MESSAGE = t('You are importing one or more dashboards that already exist. ' +\n'Overwriting might cause you to lose some of your work. Are you ' +\n'sure you want to overwrite?');\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\nfunction DashboardList(props) {\n  const { addDangerToast, addSuccessToast } = props;\n  const { state: { loading, resourceCount: dashboardCount, resourceCollection: dashboards, bulkSelectEnabled }, setResourceCollection: setDashboards, hasPerm, fetchData, toggleBulkSelect, refreshData } = useListViewResource('dashboard', t('dashboard'), addDangerToast);\n  const dashboardIds = useMemo(() => _mapInstanceProperty(dashboards).call(dashboards, d => d.id), [dashboards]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus('dashboard', dashboardIds, addDangerToast);\n  const [dashboardToEdit, setDashboardToEdit] = useState(null);\n  const [importingDashboard, showImportModal] = useState(false);\n  const [passwordFields, setPasswordFields] = useState([]);\n  const openDashboardImportModal = () => {\n    showImportModal(true);\n  };\n  const closeDashboardImportModal = () => {\n    showImportModal(false);\n  };\n  const handleDashboardImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_read');\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n  function openDashboardEditModal(dashboard) {\n    setDashboardToEdit(dashboard);\n  }\n  function handleDashboardEdit(edits) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${edits.id}` }).\n    then(({ json = {} }) => {\n      setDashboards(_mapInstanceProperty(dashboards).call(dashboards, dashboard => {\n        if (dashboard.id === json.id) {\n          return json.result;\n        }\n        return dashboard;\n      }));\n    }, createErrorHandler(errMsg => addDangerToast(t('An error occurred while fetching dashboards: %s', errMsg))));\n  }\n  function handleBulkDashboardDelete(dashboardsToDelete) {\n    return SupersetClient.delete({\n      endpoint: `/api/v1/dashboard/?q=${rison.encode(_mapInstanceProperty(dashboardsToDelete).call(dashboardsToDelete, ({ id }) => id))}` }).\n    then(({ json = {} }) => {\n      refreshData();\n      addSuccessToast(json.message);\n    }, createErrorHandler(errMsg => addDangerToast(t('There was an issue deleting the selected dashboards: ', errMsg))));\n  }\n  const columns = useMemo(() => [\n  {\n    Cell: ({ row: { original: { id } } }) => ___EmotionJSX(FaveStar, { itemId: id, saveFaveStar: saveFavoriteStatus, isStarred: favoriteStatus[id] }),\n    Header: '',\n    id: 'id',\n    disableSortBy: true,\n    size: 'xs' },\n\n  {\n    Cell: ({ row: { original: { url, dashboard_title: dashboardTitle } } }) => ___EmotionJSX(\"a\", { href: url }, dashboardTitle),\n    Header: t('Title'),\n    accessor: 'dashboard_title' },\n\n  {\n    Cell: ({ row: { original: { changed_by_name: changedByName, changed_by_url: changedByUrl } } }) => ___EmotionJSX(\"a\", { href: changedByUrl }, changedByName),\n    Header: t('Modified by'),\n    accessor: 'changed_by.first_name',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { published } } }) => published ? t('Published') : t('Draft'),\n    Header: t('Status'),\n    accessor: 'published',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { changed_on_delta_humanized: changedOn } } }) => ___EmotionJSX(\"span\", { className: \"no-wrap\" }, changedOn),\n    Header: t('Modified'),\n    accessor: 'changed_on_delta_humanized',\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { created_by: createdBy } } }) => createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n    Header: t('Created by'),\n    accessor: 'created_by',\n    disableSortBy: true,\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original: { owners = [] } } }) => ___EmotionJSX(FacePile, { users: owners }),\n    Header: t('Owners'),\n    accessor: 'owners',\n    disableSortBy: true,\n    size: 'xl' },\n\n  {\n    Cell: ({ row: { original } }) => {\n      const handleDelete = () => handleDashboardDelete(original, refreshData, addSuccessToast, addDangerToast);\n      const handleEdit = () => openDashboardEditModal(original);\n      const handleExport = () => handleBulkDashboardExport([original]);\n      return ___EmotionJSX(Actions, { className: \"actions\" },\n      canDelete && ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: ___EmotionJSX(React.Fragment, null,\n        t('Are you sure you want to delete'), ' ',\n        ___EmotionJSX(\"b\", null, original.dashboard_title), \"?\"),\n        onConfirm: handleDelete },\n      confirmDelete => ___EmotionJSX(Tooltip, { id: \"delete-action-tooltip\", title: t('Delete'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: confirmDelete },\n      ___EmotionJSX(Icons.Trash, { \"data-test\": \"dashboard-list-trash-icon\" })))),\n\n\n\n      canExport && ___EmotionJSX(Tooltip, { id: \"export-action-tooltip\", title: t('Export'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleExport },\n      ___EmotionJSX(Icons.Share, null))),\n\n\n      canEdit && ___EmotionJSX(Tooltip, { id: \"edit-action-tooltip\", title: t('Edit'), placement: \"bottom\" },\n      ___EmotionJSX(\"span\", { role: \"button\", tabIndex: 0, className: \"action-button\", onClick: handleEdit },\n      ___EmotionJSX(Icons.EditAlt, { \"data-test\": \"edit-alt\" }))));\n\n\n\n    },\n    Header: t('Actions'),\n    id: 'actions',\n    hidden: !canEdit && !canDelete && !canExport,\n    disableSortBy: true }],\n\n  [canEdit, canDelete, canExport, favoriteStatus]);\n  const filters = [\n  {\n    Header: t('Owner'),\n    id: 'owners',\n    input: 'select',\n    operator: FilterOperators.relationManyMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('dashboard', 'owners', createErrorHandler(errMsg => addDangerToast(t('An error occurred while fetching dashboard owner values: %s', errMsg))), props.user.userId),\n    paginate: true },\n\n  {\n    Header: t('Created by'),\n    id: 'created_by',\n    input: 'select',\n    operator: FilterOperators.relationOneMany,\n    unfilteredLabel: t('All'),\n    fetchSelects: createFetchRelated('dashboard', 'created_by', createErrorHandler(errMsg => addDangerToast(t('An error occurred while fetching dashboard created by values: %s', errMsg))), props.user.userId),\n    paginate: true },\n\n  {\n    Header: t('Status'),\n    id: 'published',\n    input: 'select',\n    operator: FilterOperators.equals,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Published'), value: true },\n    { label: t('Unpublished'), value: false }] },\n\n\n  {\n    Header: t('Favorite'),\n    id: 'id',\n    urlDisplay: 'favorite',\n    input: 'select',\n    operator: FilterOperators.dashboardIsFav,\n    unfilteredLabel: t('Any'),\n    selects: [\n    { label: t('Yes'), value: true },\n    { label: t('No'), value: false }] },\n\n\n  {\n    Header: t('Search'),\n    id: 'dashboard_title',\n    input: 'search',\n    operator: FilterOperators.titleOrSlug }];\n\n\n  const sortTypes = [\n  {\n    desc: false,\n    id: 'dashboard_title',\n    label: t('Alphabetical'),\n    value: 'alphabetical' },\n\n  {\n    desc: true,\n    id: 'changed_on_delta_humanized',\n    label: t('Recently modified'),\n    value: 'recently_modified' },\n\n  {\n    desc: false,\n    id: 'changed_on_delta_humanized',\n    label: t('Least recently modified'),\n    value: 'least_recently_modified' }];\n\n\n  function renderCard(dashboard) {\n    return ___EmotionJSX(DashboardCard, { dashboard: dashboard, hasPerm: hasPerm, bulkSelectEnabled: bulkSelectEnabled, refreshData: refreshData, loading: loading, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, openDashboardEditModal: openDashboardEditModal, saveFavoriteStatus: saveFavoriteStatus, favoriteStatus: favoriteStatus[dashboard.id] });\n  }\n  const subMenuButtons = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect });\n\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(\"i\", { className: \"fa fa-plus\" }), \" \", t('Dashboard')),\n\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/dashboard/new');\n      } });\n\n  }\n  if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n    subMenuButtons.push({\n      name: ___EmotionJSX(Icons.Import, null),\n      buttonStyle: 'link',\n      onClick: openDashboardImportModal });\n\n  }\n  return ___EmotionJSX(React.Fragment, null,\n  ___EmotionJSX(SubMenu, { name: t('Dashboards'), buttons: subMenuButtons }),\n  ___EmotionJSX(ConfirmStatusChange, { title: t('Please confirm'), description: t('Are you sure you want to delete the selected dashboards?'), onConfirm: handleBulkDashboardDelete },\n  confirmDelete => {\n    const bulkActions = [];\n    if (canDelete) {\n      bulkActions.push({\n        key: 'delete',\n        name: t('Delete'),\n        type: 'danger',\n        onSelect: confirmDelete });\n\n    }\n    if (canExport) {\n      bulkActions.push({\n        key: 'export',\n        name: t('Export'),\n        type: 'primary',\n        onSelect: handleBulkDashboardExport });\n\n    }\n    return ___EmotionJSX(React.Fragment, null,\n    dashboardToEdit && ___EmotionJSX(PropertiesModal, { dashboardId: dashboardToEdit.id, show: true, onHide: () => setDashboardToEdit(null), onSubmit: handleDashboardEdit }),\n    ___EmotionJSX(ListView, { bulkActions: bulkActions, bulkSelectEnabled: bulkSelectEnabled, cardSortSelectOptions: sortTypes, className: \"dashboard-list-view\", columns: columns, count: dashboardCount, data: dashboards, disableBulkSelect: toggleBulkSelect, fetchData: fetchData, filters: filters, initialSort: initialSort, loading: loading, pageSize: PAGE_SIZE, renderCard: renderCard, defaultViewMode: isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW) ?\n      'card' :\n      'table' }));\n\n  }),\n\n\n  ___EmotionJSX(ImportModelsModal, { resourceName: \"dashboard\", resourceLabel: t('dashboard'), passwordsNeededMessage: PASSWORDS_NEEDED_MESSAGE, confirmOverwriteMessage: CONFIRM_OVERWRITE_MESSAGE, addDangerToast: addDangerToast, addSuccessToast: addSuccessToast, onModelImport: handleDashboardImport, show: importingDashboard, onHide: closeDashboardImportModal, passwordFields: passwordFields, setPasswordFields: setPasswordFields }));\n\n}__signature__(DashboardList, \"useListViewResource{{ state: { loading, resourceCount: dashboardCount, resourceCollection: dashboards, bulkSelectEnabled, }, setResourceCollection: setDashboards, hasPerm, fetchData, toggleBulkSelect, refreshData, }}\\nuseMemo{dashboardIds}\\nuseFavoriteStatus{[saveFavoriteStatus, favoriteStatus]}\\nuseState{[dashboardToEdit, setDashboardToEdit](null)}\\nuseState{[importingDashboard, showImportModal](false)}\\nuseState{[passwordFields, setPasswordFields]([])}\\nuseMemo{columns}\", () => [useListViewResource, useFavoriteStatus]);const _default =\nwithToasts(DashboardList);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(PAGE_SIZE, \"PAGE_SIZE\", \"/app/superset-frontend/src/views/CRUD/dashboard/DashboardList.tsx\");reactHotLoader.register(PASSWORDS_NEEDED_MESSAGE, \"PASSWORDS_NEEDED_MESSAGE\", \"/app/superset-frontend/src/views/CRUD/dashboard/DashboardList.tsx\");reactHotLoader.register(CONFIRM_OVERWRITE_MESSAGE, \"CONFIRM_OVERWRITE_MESSAGE\", \"/app/superset-frontend/src/views/CRUD/dashboard/DashboardList.tsx\");reactHotLoader.register(Actions, \"Actions\", \"/app/superset-frontend/src/views/CRUD/dashboard/DashboardList.tsx\");reactHotLoader.register(DashboardList, \"DashboardList\", \"/app/superset-frontend/src/views/CRUD/dashboard/DashboardList.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/views/CRUD/dashboard/DashboardList.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/views/CRUD/dashboard/DashboardList.tsx"],"names":[],"mappings":"ubAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,SAAS,MAAT,EAAiB,cAAjB,EAAiC,CAAjC,QAA0C,mBAA1C;AACA,OAAO,KAAP,IAAgB,QAAhB,EAA0B,OAA1B,QAAyC,OAAzC;AACA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,gBAAT,EAA2B,WAA3B,QAA8C,kBAA9C;AACA,SACE,kBADF,EAEE,kBAFF,EAGE,qBAHF,EAIE,yBAJF,QAKO,sBALP;AAMA,SAAS,mBAAT,EAA8B,iBAA9B,QAAuD,sBAAvD;AACA,OAAO,mBAAP,MAAgC,oCAAhC;AACA,OAAO,OAAP,MAAsC,6BAAtC;AACA,OAAO,QAAP,IAGE,eAHF,QAIO,yBAJP;AAMA,OAAO,UAAP,MAAuB,wCAAvB;AACA,OAAO,QAAP,MAAqB,yBAArB;AACA,OAAO,KAAP,MAAkB,sBAAlB;AACA,OAAO,QAAP,MAAqB,yBAArB;AACA,OAAO,eAAP,MAA4B,0CAA5B;AACA,SAAS,OAAT,QAAwB,+BAAxB;AACA,OAAO,iBAAP,MAA8B,kCAA9B;AAGA,OAAO,aAAP,MAA0B,iBAA1B,C;AAEA,MAAM,SAAS,GAAG,EAAlB;AACA,MAAM,wBAAwB,GAAG,CAAC,CAChC;AACE,iEADF;AAEE,+CAFF;AAGE,kEAHF;AAIE,+DAL8B,CAAlC;AAOA,MAAM,yBAAyB,GAAG,CAAC,CACjC;AACE,iEADF;AAEE,6BAH+B,CAAnC;AA4BA,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG;WACf,CAAC,EAAE,KAAF,EAAD,KAAe,KAAK,CAAC,MAAN,CAAa,SAAb,CAAuB,IAAI;AACpD,CAFD;AAIA,SAAS,aAAT,CAAuB,KAAvB,EAAgD;AAC9C,QAAM,EAAE,cAAF,EAAkB,eAAlB,KAAsC,KAA5C;AAEA,QAAM,EACJ,KAAK,EAAE,EACL,OADK,EAEL,aAAa,EAAE,cAFV,EAGL,kBAAkB,EAAE,UAHf,EAIL,iBAJK,EADH,EAOJ,qBAAqB,EAAE,aAPnB,EAQJ,OARI,EASJ,SATI,EAUJ,gBAVI,EAWJ,WAXI,KAYF,mBAAmB,CACrB,WADqB,EAErB,CAAC,CAAC,WAAD,CAFoB,EAGrB,cAHqB,CAZvB;AAiBA,QAAM,YAAY,GAAG,OAAO,CAAC,MAAM,qBAAA,UAAU,MAAV,CAAA,UAAU,EAAK,CAAC,IAAI,CAAC,CAAC,EAAZ,CAAjB,EAAkC,CAAC,UAAD,CAAlC,CAA5B;AACA,QAAM,CAAC,kBAAD,EAAqB,cAArB,IAAuC,iBAAiB,CAC5D,WAD4D,EAE5D,YAF4D,EAG5D,cAH4D,CAA9D;AAMA,QAAM,CAAC,eAAD,EAAkB,kBAAlB,IAAwC,QAAQ,CACpD,IADoD,CAAtD;AAIA,QAAM,CAAC,kBAAD,EAAqB,eAArB,IAAwC,QAAQ,CAAU,KAAV,CAAtD;AACA,QAAM,CAAC,cAAD,EAAiB,iBAAjB,IAAsC,QAAQ,CAAW,EAAX,CAApD;AAEA,QAAM,wBAAwB,GAAG,MAAK;AACpC,IAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAFD;AAIA,QAAM,yBAAyB,GAAG,MAAK;AACrC,IAAA,eAAe,CAAC,KAAD,CAAf;AACD,GAFD;AAIA,QAAM,qBAAqB,GAAG,MAAK;AACjC,IAAA,eAAe,CAAC,KAAD,CAAf;AACA,IAAA,WAAW;AACZ,GAHD;AAKA,QAAM,SAAS,GAAG,OAAO,CAAC,WAAD,CAAzB;AACA,QAAM,OAAO,GAAG,OAAO,CAAC,WAAD,CAAvB;AACA,QAAM,SAAS,GAAG,OAAO,CAAC,WAAD,CAAzB;AACA,QAAM,SAAS,GAAG,OAAO,CAAC,UAAD,CAAzB;AAEA,QAAM,WAAW,GAAG,CAAC,EAAE,EAAE,EAAE,4BAAN,EAAoC,IAAI,EAAE,IAA1C,EAAD,CAApB;AAEA,WAAS,sBAAT,CAAgC,SAAhC,EAAoD;AAClD,IAAA,kBAAkB,CAAC,SAAD,CAAlB;AACD;AAED,WAAS,mBAAT,CAA6B,KAA7B,EAA6C;AAC3C,WAAO,cAAc,CAAC,GAAf,CAAmB;AACxB,MAAA,QAAQ,EAAE,qBAAqB,KAAK,CAAC,EAAE,EADf,EAAnB;AAEJ,IAAA,IAFI,CAGL,CAAC,EAAE,IAAI,GAAG,EAAT,EAAD,KAAkB;AAChB,MAAA,aAAa,CACX,qBAAA,UAAU,MAAV,CAAA,UAAU,EAAK,SAAS,IAAG;AACzB,YAAI,SAAS,CAAC,EAAV,KAAiB,IAAI,CAAC,EAA1B,EAA8B;AAC5B,iBAAO,IAAI,CAAC,MAAZ;AACD;AACD,eAAO,SAAP;AACD,OALS,CADC,CAAb;AAQD,KAZI,EAaL,kBAAkB,CAAC,MAAM,IACvB,cAAc,CACZ,CAAC,CAAC,iDAAD,EAAoD,MAApD,CADW,CADE,CAbb,CAAP;AAmBD;AAED,WAAS,yBAAT,CAAmC,kBAAnC,EAAkE;AAChE,WAAO,cAAc,CAAC,MAAf,CAAsB;AAC3B,MAAA,QAAQ,EAAE,wBAAwB,KAAK,CAAC,MAAN,CAChC,qBAAA,kBAAkB,MAAlB,CAAA,kBAAkB,EAAK,CAAC,EAAE,EAAF,EAAD,KAAY,EAAjB,CADc,CAEjC,EAH0B,EAAtB;AAIJ,IAAA,IAJI,CAKL,CAAC,EAAE,IAAI,GAAG,EAAT,EAAD,KAAkB;AAChB,MAAA,WAAW;AACX,MAAA,eAAe,CAAC,IAAI,CAAC,OAAN,CAAf;AACD,KARI,EASL,kBAAkB,CAAC,MAAM,IACvB,cAAc,CACZ,CAAC,CAAC,uDAAD,EAA0D,MAA1D,CADW,CADE,CATb,CAAP;AAeD;AAED,QAAM,OAAO,GAAG,OAAO,CACrB,MAAM;AACJ;AACE,IAAA,IAAI,EAAE,CAAC,EACL,GAAG,EAAE,EACH,QAAQ,EAAE,EAAE,EAAF,EADP,EADA,EAAD,KAKJ,cAAC,QAAD,IACE,MAAM,EAAE,EADV,EAEE,YAAY,EAAE,kBAFhB,EAGE,SAAS,EAAE,cAAc,CAAC,EAAD,CAH3B,GANJ;AAYE,IAAA,MAAM,EAAE,EAZV;AAaE,IAAA,EAAE,EAAE,IAbN;AAcE,IAAA,aAAa,EAAE,IAdjB;AAeE,IAAA,IAAI,EAAE,IAfR,EADI;;AAkBJ;AACE,IAAA,IAAI,EAAE,CAAC,EACL,GAAG,EAAE,EACH,QAAQ,EAAE,EAAE,GAAF,EAAO,eAAe,EAAE,cAAxB,EADP,EADA,EAAD,KAIK,qBAAG,IAAI,EAAE,GAAT,IAAe,cAAf,CALb;AAME,IAAA,MAAM,EAAE,CAAC,CAAC,OAAD,CANX;AAOE,IAAA,QAAQ,EAAE,iBAPZ,EAlBI;;AA4BJ;AACE,IAAA,IAAI,EAAE,CAAC,EACL,GAAG,EAAE,EACH,QAAQ,EAAE,EACR,eAAe,EAAE,aADT,EAER,cAAc,EAAE,YAFR,EADP,EADA,EAAD,KAOK,qBAAG,IAAI,EAAE,YAAT,IAAwB,aAAxB,CARb;AASE,IAAA,MAAM,EAAE,CAAC,CAAC,aAAD,CATX;AAUE,IAAA,QAAQ,EAAE,uBAVZ;AAWE,IAAA,IAAI,EAAE,IAXR,EA5BI;;AAyCJ;AACE,IAAA,IAAI,EAAE,CAAC,EACL,GAAG,EAAE,EACH,QAAQ,EAAE,EAAE,SAAF,EADP,EADA,EAAD,KAIM,SAAS,GAAG,CAAC,CAAC,WAAD,CAAJ,GAAoB,CAAC,CAAC,OAAD,CAL5C;AAME,IAAA,MAAM,EAAE,CAAC,CAAC,QAAD,CANX;AAOE,IAAA,QAAQ,EAAE,WAPZ;AAQE,IAAA,IAAI,EAAE,IARR,EAzCI;;AAmDJ;AACE,IAAA,IAAI,EAAE,CAAC,EACL,GAAG,EAAE,EACH,QAAQ,EAAE,EAAE,0BAA0B,EAAE,SAA9B,EADP,EADA,EAAD,KAIK,wBAAM,SAAS,EAAC,SAAhB,IAA2B,SAA3B,CALb;AAME,IAAA,MAAM,EAAE,CAAC,CAAC,UAAD,CANX;AAOE,IAAA,QAAQ,EAAE,4BAPZ;AAQE,IAAA,IAAI,EAAE,IARR,EAnDI;;AA6DJ;AACE,IAAA,IAAI,EAAE,CAAC,EACL,GAAG,EAAE,EACH,QAAQ,EAAE,EAAE,UAAU,EAAE,SAAd,EADP,EADA,EAAD,KAKJ,SAAS,GAAG,GAAG,SAAS,CAAC,UAAU,IAAI,SAAS,CAAC,SAAS,EAAjD,GAAsD,EANnE;AAOE,IAAA,MAAM,EAAE,CAAC,CAAC,YAAD,CAPX;AAQE,IAAA,QAAQ,EAAE,YARZ;AASE,IAAA,aAAa,EAAE,IATjB;AAUE,IAAA,IAAI,EAAE,IAVR,EA7DI;;AAyEJ;AACE,IAAA,IAAI,EAAE,CAAC,EACL,GAAG,EAAE,EACH,QAAQ,EAAE,EAAE,MAAM,GAAG,EAAX,EADP,EADA,EAAD,KAIK,cAAC,QAAD,IAAU,KAAK,EAAE,MAAjB,GALb;AAME,IAAA,MAAM,EAAE,CAAC,CAAC,QAAD,CANX;AAOE,IAAA,QAAQ,EAAE,QAPZ;AAQE,IAAA,aAAa,EAAE,IARjB;AASE,IAAA,IAAI,EAAE,IATR,EAzEI;;AAoFJ;AACE,IAAA,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,QAAF,EAAP,EAAD,KAA+B;AACnC,YAAM,YAAY,GAAG,MACnB,qBAAqB,CACnB,QADmB,EAEnB,WAFmB,EAGnB,eAHmB,EAInB,cAJmB,CADvB;AAOA,YAAM,UAAU,GAAG,MAAM,sBAAsB,CAAC,QAAD,CAA/C;AACA,YAAM,YAAY,GAAG,MAAM,yBAAyB,CAAC,CAAC,QAAD,CAAD,CAApD;AAEA,aACE,cAAC,OAAD,IAAS,SAAS,EAAC,SAAnB;AACG,MAAA,SAAS,IACR,cAAC,mBAAD,IACE,KAAK,EAAE,CAAC,CAAC,gBAAD,CADV,EAEE,WAAW,EACT;AACG,QAAA,CAAC,CAAC,iCAAD,CADJ,EACyC,GADzC;AAEE,iCAAI,QAAQ,CAAC,eAAb,CAFF,MAHJ;AAQE,QAAA,SAAS,EAAE,YARb;AAUG,MAAA,aAAa,IACZ,cAAC,OAAD,IACE,EAAE,EAAC,uBADL,EAEE,KAAK,EAAE,CAAC,CAAC,QAAD,CAFV,EAGE,SAAS,EAAC,QAHZ;AAKE,8BACE,IAAI,EAAC,QADP,EAEE,QAAQ,EAAE,CAFZ,EAGE,SAAS,EAAC,eAHZ,EAIE,OAAO,EAAE,aAJX;AAME,oBAAC,KAAD,CAAO,KAAP,IAAa,aAAU,2BAAvB,GANF,CALF,CAXJ,CAFJ;;;;AA8BG,MAAA,SAAS,IACR,cAAC,OAAD,IACE,EAAE,EAAC,uBADL,EAEE,KAAK,EAAE,CAAC,CAAC,QAAD,CAFV,EAGE,SAAS,EAAC,QAHZ;AAKE,8BACE,IAAI,EAAC,QADP,EAEE,QAAQ,EAAE,CAFZ,EAGE,SAAS,EAAC,eAHZ,EAIE,OAAO,EAAE,YAJX;AAME,oBAAC,KAAD,CAAO,KAAP,OANF,CALF,CA/BJ;;;AA8CG,MAAA,OAAO,IACN,cAAC,OAAD,IACE,EAAE,EAAC,qBADL,EAEE,KAAK,EAAE,CAAC,CAAC,MAAD,CAFV,EAGE,SAAS,EAAC,QAHZ;AAKE,8BACE,IAAI,EAAC,QADP,EAEE,QAAQ,EAAE,CAFZ,EAGE,SAAS,EAAC,eAHZ,EAIE,OAAO,EAAE,UAJX;AAME,oBAAC,KAAD,CAAO,OAAP,IAAe,aAAU,UAAzB,GANF,CALF,CA/CJ,CADF;;;;AAiED,KA7EH;AA8EE,IAAA,MAAM,EAAE,CAAC,CAAC,SAAD,CA9EX;AA+EE,IAAA,EAAE,EAAE,SA/EN;AAgFE,IAAA,MAAM,EAAE,CAAC,OAAD,IAAY,CAAC,SAAb,IAA0B,CAAC,SAhFrC;AAiFE,IAAA,aAAa,EAAE,IAjFjB,EApFI,CADe;;AAyKrB,GAAC,OAAD,EAAU,SAAV,EAAqB,SAArB,EAAgC,cAAhC,CAzKqB,CAAvB;AA4KA,QAAM,OAAO,GAAY;AACvB;AACE,IAAA,MAAM,EAAE,CAAC,CAAC,OAAD,CADX;AAEE,IAAA,EAAE,EAAE,QAFN;AAGE,IAAA,KAAK,EAAE,QAHT;AAIE,IAAA,QAAQ,EAAE,eAAe,CAAC,gBAJ5B;AAKE,IAAA,eAAe,EAAE,CAAC,CAAC,KAAD,CALpB;AAME,IAAA,YAAY,EAAE,kBAAkB,CAC9B,WAD8B,EAE9B,QAF8B,EAG9B,kBAAkB,CAAC,MAAM,IACvB,cAAc,CACZ,CAAC,CACC,6DADD,EAEC,MAFD,CADW,CADE,CAHY,EAW9B,KAAK,CAAC,IAAN,CAAW,MAXmB,CANlC;AAmBE,IAAA,QAAQ,EAAE,IAnBZ,EADuB;;AAsBvB;AACE,IAAA,MAAM,EAAE,CAAC,CAAC,YAAD,CADX;AAEE,IAAA,EAAE,EAAE,YAFN;AAGE,IAAA,KAAK,EAAE,QAHT;AAIE,IAAA,QAAQ,EAAE,eAAe,CAAC,eAJ5B;AAKE,IAAA,eAAe,EAAE,CAAC,CAAC,KAAD,CALpB;AAME,IAAA,YAAY,EAAE,kBAAkB,CAC9B,WAD8B,EAE9B,YAF8B,EAG9B,kBAAkB,CAAC,MAAM,IACvB,cAAc,CACZ,CAAC,CACC,kEADD,EAEC,MAFD,CADW,CADE,CAHY,EAW9B,KAAK,CAAC,IAAN,CAAW,MAXmB,CANlC;AAmBE,IAAA,QAAQ,EAAE,IAnBZ,EAtBuB;;AA2CvB;AACE,IAAA,MAAM,EAAE,CAAC,CAAC,QAAD,CADX;AAEE,IAAA,EAAE,EAAE,WAFN;AAGE,IAAA,KAAK,EAAE,QAHT;AAIE,IAAA,QAAQ,EAAE,eAAe,CAAC,MAJ5B;AAKE,IAAA,eAAe,EAAE,CAAC,CAAC,KAAD,CALpB;AAME,IAAA,OAAO,EAAE;AACP,MAAE,KAAK,EAAE,CAAC,CAAC,WAAD,CAAV,EAAyB,KAAK,EAAE,IAAhC,EADO;AAEP,MAAE,KAAK,EAAE,CAAC,CAAC,aAAD,CAAV,EAA2B,KAAK,EAAE,KAAlC,EAFO,CANX,EA3CuB;;;AAsDvB;AACE,IAAA,MAAM,EAAE,CAAC,CAAC,UAAD,CADX;AAEE,IAAA,EAAE,EAAE,IAFN;AAGE,IAAA,UAAU,EAAE,UAHd;AAIE,IAAA,KAAK,EAAE,QAJT;AAKE,IAAA,QAAQ,EAAE,eAAe,CAAC,cAL5B;AAME,IAAA,eAAe,EAAE,CAAC,CAAC,KAAD,CANpB;AAOE,IAAA,OAAO,EAAE;AACP,MAAE,KAAK,EAAE,CAAC,CAAC,KAAD,CAAV,EAAmB,KAAK,EAAE,IAA1B,EADO;AAEP,MAAE,KAAK,EAAE,CAAC,CAAC,IAAD,CAAV,EAAkB,KAAK,EAAE,KAAzB,EAFO,CAPX,EAtDuB;;;AAkEvB;AACE,IAAA,MAAM,EAAE,CAAC,CAAC,QAAD,CADX;AAEE,IAAA,EAAE,EAAE,iBAFN;AAGE,IAAA,KAAK,EAAE,QAHT;AAIE,IAAA,QAAQ,EAAE,eAAe,CAAC,WAJ5B,EAlEuB,CAAzB;;;AA0EA,QAAM,SAAS,GAAG;AAChB;AACE,IAAA,IAAI,EAAE,KADR;AAEE,IAAA,EAAE,EAAE,iBAFN;AAGE,IAAA,KAAK,EAAE,CAAC,CAAC,cAAD,CAHV;AAIE,IAAA,KAAK,EAAE,cAJT,EADgB;;AAOhB;AACE,IAAA,IAAI,EAAE,IADR;AAEE,IAAA,EAAE,EAAE,4BAFN;AAGE,IAAA,KAAK,EAAE,CAAC,CAAC,mBAAD,CAHV;AAIE,IAAA,KAAK,EAAE,mBAJT,EAPgB;;AAahB;AACE,IAAA,IAAI,EAAE,KADR;AAEE,IAAA,EAAE,EAAE,4BAFN;AAGE,IAAA,KAAK,EAAE,CAAC,CAAC,yBAAD,CAHV;AAIE,IAAA,KAAK,EAAE,yBAJT,EAbgB,CAAlB;;;AAqBA,WAAS,UAAT,CAAoB,SAApB,EAAwC;AACtC,WACE,cAAC,aAAD,IACE,SAAS,EAAE,SADb,EAEE,OAAO,EAAE,OAFX,EAGE,iBAAiB,EAAE,iBAHrB,EAIE,WAAW,EAAE,WAJf,EAKE,OAAO,EAAE,OALX,EAME,cAAc,EAAE,cANlB,EAOE,eAAe,EAAE,eAPnB,EAQE,sBAAsB,EAAE,sBAR1B,EASE,kBAAkB,EAAE,kBATtB,EAUE,cAAc,EAAE,cAAc,CAAC,SAAS,CAAC,EAAX,CAVhC,GADF;AAcD;AAED,QAAM,cAAc,GAA4B,EAAhD;AACA,MAAI,SAAS,IAAI,SAAjB,EAA4B;AAC1B,IAAA,cAAc,CAAC,IAAf,CAAoB;AAClB,MAAA,IAAI,EAAE,CAAC,CAAC,aAAD,CADW;AAElB,MAAA,WAAW,EAAE,WAFK;AAGlB,mBAAa,aAHK;AAIlB,MAAA,OAAO,EAAE,gBAJS,EAApB;;AAMD;AACD,MAAI,SAAJ,EAAe;AACb,IAAA,cAAc,CAAC,IAAf,CAAoB;AAClB,MAAA,IAAI,EACF;AACE,2BAAG,SAAS,EAAC,YAAb,GADF,OACgC,CAAC,CAAC,WAAD,CADjC,CAFgB;;AAMlB,MAAA,WAAW,EAAE,SANK;AAOlB,MAAA,OAAO,EAAE,MAAK;AACZ,QAAA,MAAM,CAAC,QAAP,CAAgB,MAAhB,CAAuB,gBAAvB;AACD,OATiB,EAApB;;AAWD;AACD,MAAI,gBAAgB,CAAC,WAAW,CAAC,gBAAb,CAApB,EAAoD;AAClD,IAAA,cAAc,CAAC,IAAf,CAAoB;AAClB,MAAA,IAAI,EAAE,cAAC,KAAD,CAAO,MAAP,OADY;AAElB,MAAA,WAAW,EAAE,MAFK;AAGlB,MAAA,OAAO,EAAE,wBAHS,EAApB;;AAKD;AACD,SACE;AACE,gBAAC,OAAD,IAAS,IAAI,EAAE,CAAC,CAAC,YAAD,CAAhB,EAAgC,OAAO,EAAE,cAAzC,GADF;AAEE,gBAAC,mBAAD,IACE,KAAK,EAAE,CAAC,CAAC,gBAAD,CADV,EAEE,WAAW,EAAE,CAAC,CACZ,0DADY,CAFhB,EAKE,SAAS,EAAE,yBALb;AAOG,EAAA,aAAa,IAAG;AACf,UAAM,WAAW,GAAiC,EAAlD;AACA,QAAI,SAAJ,EAAe;AACb,MAAA,WAAW,CAAC,IAAZ,CAAiB;AACf,QAAA,GAAG,EAAE,QADU;AAEf,QAAA,IAAI,EAAE,CAAC,CAAC,QAAD,CAFQ;AAGf,QAAA,IAAI,EAAE,QAHS;AAIf,QAAA,QAAQ,EAAE,aAJK,EAAjB;;AAMD;AACD,QAAI,SAAJ,EAAe;AACb,MAAA,WAAW,CAAC,IAAZ,CAAiB;AACf,QAAA,GAAG,EAAE,QADU;AAEf,QAAA,IAAI,EAAE,CAAC,CAAC,QAAD,CAFQ;AAGf,QAAA,IAAI,EAAE,SAHS;AAIf,QAAA,QAAQ,EAAE,yBAJK,EAAjB;;AAMD;AACD,WACE;AACG,IAAA,eAAe,IACd,cAAC,eAAD,IACE,WAAW,EAAE,eAAe,CAAC,EAD/B,EAEE,IAAI,MAFN,EAGE,MAAM,EAAE,MAAM,kBAAkB,CAAC,IAAD,CAHlC,EAIE,QAAQ,EAAE,mBAJZ,GAFJ;AASE,kBAAC,QAAD,IACE,WAAW,EAAE,WADf,EAEE,iBAAiB,EAAE,iBAFrB,EAGE,qBAAqB,EAAE,SAHzB,EAIE,SAAS,EAAC,qBAJZ,EAKE,OAAO,EAAE,OALX,EAME,KAAK,EAAE,cANT,EAOE,IAAI,EAAE,UAPR,EAQE,iBAAiB,EAAE,gBARrB,EASE,SAAS,EAAE,SATb,EAUE,OAAO,EAAE,OAVX,EAWE,WAAW,EAAE,WAXf,EAYE,OAAO,EAAE,OAZX,EAaE,QAAQ,EAAE,SAbZ,EAcE,UAAU,EAAE,UAdd,EAeE,eAAe,EACb,gBAAgB,CAAC,WAAW,CAAC,2BAAb,CAAhB;AACI,YADJ;AAEI,aAlBR,GATF,CADF;;AAiCD,GA1DH,CAFF;;;AA+DE,gBAAC,iBAAD,IACE,YAAY,EAAC,WADf,EAEE,aAAa,EAAE,CAAC,CAAC,WAAD,CAFlB,EAGE,sBAAsB,EAAE,wBAH1B,EAIE,uBAAuB,EAAE,yBAJ3B,EAKE,cAAc,EAAE,cALlB,EAME,eAAe,EAAE,eANnB,EAOE,aAAa,EAAE,qBAPjB,EAQE,IAAI,EAAE,kBARR,EASE,MAAM,EAAE,yBATV,EAUE,cAAc,EAAE,cAVlB,EAWE,iBAAiB,EAAE,iBAXrB,GA/DF,CADF;;AA+ED,C,cA1eQ,a,yeAeH,mB,EAMyC,iB;AAudhC,UAAU,CAAC,aAAD,C,CAAzB,wB,iLAphBM,S,4GACA,wB,2HAOA,yB,4HA4BA,O,0GAIG,a","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport React, { useState, useMemo } from 'react';\nimport rison from 'rison';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\nimport {\n  createFetchRelated,\n  createErrorHandler,\n  handleDashboardDelete,\n  handleBulkDashboardExport,\n} from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport SubMenu, { SubMenuProps } from 'src/components/Menu/SubMenu';\nimport ListView, {\n  ListViewProps,\n  Filters,\n  FilterOperators,\n} from 'src/components/ListView';\nimport Owner from 'src/types/Owner';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport FacePile from 'src/components/FacePile';\nimport Icons from 'src/components/Icons';\nimport FaveStar from 'src/components/FaveStar';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { Tooltip } from 'src/common/components/Tooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\n\nimport Dashboard from 'src/dashboard/containers/Dashboard';\nimport DashboardCard from './DashboardCard';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the dashboards. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more dashboards that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\ninterface DashboardListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n  };\n}\n\ninterface Dashboard {\n  changed_by_name: string;\n  changed_by_url: string;\n  changed_on_delta_humanized: string;\n  changed_by: string;\n  dashboard_title: string;\n  id: number;\n  published: boolean;\n  url: string;\n  thumbnail_url: string;\n  owners: Owner[];\n  created_by: object;\n}\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nfunction DashboardList(props: DashboardListProps) {\n  const { addDangerToast, addSuccessToast } = props;\n\n  const {\n    state: {\n      loading,\n      resourceCount: dashboardCount,\n      resourceCollection: dashboards,\n      bulkSelectEnabled,\n    },\n    setResourceCollection: setDashboards,\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Dashboard>(\n    'dashboard',\n    t('dashboard'),\n    addDangerToast,\n  );\n  const dashboardIds = useMemo(() => dashboards.map(d => d.id), [dashboards]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus(\n    'dashboard',\n    dashboardIds,\n    addDangerToast,\n  );\n\n  const [dashboardToEdit, setDashboardToEdit] = useState<Dashboard | null>(\n    null,\n  );\n\n  const [importingDashboard, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n\n  const openDashboardImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDashboardImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDashboardImport = () => {\n    showImportModal(false);\n    refreshData();\n  };\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_read');\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n\n  function openDashboardEditModal(dashboard: Dashboard) {\n    setDashboardToEdit(dashboard);\n  }\n\n  function handleDashboardEdit(edits: Dashboard) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${edits.id}`,\n    }).then(\n      ({ json = {} }) => {\n        setDashboards(\n          dashboards.map(dashboard => {\n            if (dashboard.id === json.id) {\n              return json.result;\n            }\n            return dashboard;\n          }),\n        );\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('An error occurred while fetching dashboards: %s', errMsg),\n        ),\n      ),\n    );\n  }\n\n  function handleBulkDashboardDelete(dashboardsToDelete: Dashboard[]) {\n    return SupersetClient.delete({\n      endpoint: `/api/v1/dashboard/?q=${rison.encode(\n        dashboardsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected dashboards: ', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { id },\n          },\n        }: any) => (\n          <FaveStar\n            itemId={id}\n            saveFaveStar={saveFavoriteStatus}\n            isStarred={favoriteStatus[id]}\n          />\n        ),\n        Header: '',\n        id: 'id',\n        disableSortBy: true,\n        size: 'xs',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { url, dashboard_title: dashboardTitle },\n          },\n        }: any) => <a href={url}>{dashboardTitle}</a>,\n        Header: t('Title'),\n        accessor: 'dashboard_title',\n      },\n\n      {\n        Cell: ({\n          row: {\n            original: {\n              changed_by_name: changedByName,\n              changed_by_url: changedByUrl,\n            },\n          },\n        }: any) => <a href={changedByUrl}>{changedByName}</a>,\n        Header: t('Modified by'),\n        accessor: 'changed_by.first_name',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { published },\n          },\n        }: any) => (published ? t('Published') : t('Draft')),\n        Header: t('Status'),\n        accessor: 'published',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { changed_on_delta_humanized: changedOn },\n          },\n        }: any) => <span className=\"no-wrap\">{changedOn}</span>,\n        Header: t('Modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { created_by: createdBy },\n          },\n        }: any) =>\n          createdBy ? `${createdBy.first_name} ${createdBy.last_name}` : '',\n        Header: t('Created by'),\n        accessor: 'created_by',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        accessor: 'owners',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleDelete = () =>\n            handleDashboardDelete(\n              original,\n              refreshData,\n              addSuccessToast,\n              addDangerToast,\n            );\n          const handleEdit = () => openDashboardEditModal(original);\n          const handleExport = () => handleBulkDashboardExport([original]);\n\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <ConfirmStatusChange\n                  title={t('Please confirm')}\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{original.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={handleDelete}\n                >\n                  {confirmDelete => (\n                    <Tooltip\n                      id=\"delete-action-tooltip\"\n                      title={t('Delete')}\n                      placement=\"bottom\"\n                    >\n                      <span\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"action-button\"\n                        onClick={confirmDelete}\n                      >\n                        <Icons.Trash data-test=\"dashboard-list-trash-icon\" />\n                      </span>\n                    </Tooltip>\n                  )}\n                </ConfirmStatusChange>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleEdit}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete && !canExport,\n        disableSortBy: true,\n      },\n    ],\n    [canEdit, canDelete, canExport, favoriteStatus],\n  );\n\n  const filters: Filters = [\n    {\n      Header: t('Owner'),\n      id: 'owners',\n      input: 'select',\n      operator: FilterOperators.relationManyMany,\n      unfilteredLabel: t('All'),\n      fetchSelects: createFetchRelated(\n        'dashboard',\n        'owners',\n        createErrorHandler(errMsg =>\n          addDangerToast(\n            t(\n              'An error occurred while fetching dashboard owner values: %s',\n              errMsg,\n            ),\n          ),\n        ),\n        props.user.userId,\n      ),\n      paginate: true,\n    },\n    {\n      Header: t('Created by'),\n      id: 'created_by',\n      input: 'select',\n      operator: FilterOperators.relationOneMany,\n      unfilteredLabel: t('All'),\n      fetchSelects: createFetchRelated(\n        'dashboard',\n        'created_by',\n        createErrorHandler(errMsg =>\n          addDangerToast(\n            t(\n              'An error occurred while fetching dashboard created by values: %s',\n              errMsg,\n            ),\n          ),\n        ),\n        props.user.userId,\n      ),\n      paginate: true,\n    },\n    {\n      Header: t('Status'),\n      id: 'published',\n      input: 'select',\n      operator: FilterOperators.equals,\n      unfilteredLabel: t('Any'),\n      selects: [\n        { label: t('Published'), value: true },\n        { label: t('Unpublished'), value: false },\n      ],\n    },\n    {\n      Header: t('Favorite'),\n      id: 'id',\n      urlDisplay: 'favorite',\n      input: 'select',\n      operator: FilterOperators.dashboardIsFav,\n      unfilteredLabel: t('Any'),\n      selects: [\n        { label: t('Yes'), value: true },\n        { label: t('No'), value: false },\n      ],\n    },\n    {\n      Header: t('Search'),\n      id: 'dashboard_title',\n      input: 'search',\n      operator: FilterOperators.titleOrSlug,\n    },\n  ];\n\n  const sortTypes = [\n    {\n      desc: false,\n      id: 'dashboard_title',\n      label: t('Alphabetical'),\n      value: 'alphabetical',\n    },\n    {\n      desc: true,\n      id: 'changed_on_delta_humanized',\n      label: t('Recently modified'),\n      value: 'recently_modified',\n    },\n    {\n      desc: false,\n      id: 'changed_on_delta_humanized',\n      label: t('Least recently modified'),\n      value: 'least_recently_modified',\n    },\n  ];\n\n  function renderCard(dashboard: Dashboard) {\n    return (\n      <DashboardCard\n        dashboard={dashboard}\n        hasPerm={hasPerm}\n        bulkSelectEnabled={bulkSelectEnabled}\n        refreshData={refreshData}\n        loading={loading}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        openDashboardEditModal={openDashboardEditModal}\n        saveFavoriteStatus={saveFavoriteStatus}\n        favoriteStatus={favoriteStatus[dashboard.id]}\n      />\n    );\n  }\n\n  const subMenuButtons: SubMenuProps['buttons'] = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect,\n    });\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Dashboard')}\n        </>\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/dashboard/new');\n      },\n    });\n  }\n  if (isFeatureEnabled(FeatureFlag.VERSIONED_EXPORT)) {\n    subMenuButtons.push({\n      name: <Icons.Import />,\n      buttonStyle: 'link',\n      onClick: openDashboardImportModal,\n    });\n  }\n  return (\n    <>\n      <SubMenu name={t('Dashboards')} buttons={subMenuButtons} />\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected dashboards?',\n        )}\n        onConfirm={handleBulkDashboardDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              type: 'danger',\n              onSelect: confirmDelete,\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkDashboardExport,\n            });\n          }\n          return (\n            <>\n              {dashboardToEdit && (\n                <PropertiesModal\n                  dashboardId={dashboardToEdit.id}\n                  show\n                  onHide={() => setDashboardToEdit(null)}\n                  onSubmit={handleDashboardEdit}\n                />\n              )}\n              <ListView<Dashboard>\n                bulkActions={bulkActions}\n                bulkSelectEnabled={bulkSelectEnabled}\n                cardSortSelectOptions={sortTypes}\n                className=\"dashboard-list-view\"\n                columns={columns}\n                count={dashboardCount}\n                data={dashboards}\n                disableBulkSelect={toggleBulkSelect}\n                fetchData={fetchData}\n                filters={filters}\n                initialSort={initialSort}\n                loading={loading}\n                pageSize={PAGE_SIZE}\n                renderCard={renderCard}\n                defaultViewMode={\n                  isFeatureEnabled(FeatureFlag.LISTVIEWS_DEFAULT_CARD_VIEW)\n                    ? 'card'\n                    : 'table'\n                }\n              />\n            </>\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"dashboard\"\n        resourceLabel={t('dashboard')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDashboardImport}\n        show={importingDashboard}\n        onHide={closeDashboardImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n      />\n    </>\n  );\n}\n\nexport default withToasts(DashboardList);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}