{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport Dashboard from '../components/Dashboard';\n\nimport {\naddSliceToDashboard,\nremoveSliceFromDashboard } from\n'../actions/dashboardState';\nimport { triggerQuery } from '../../chart/chartAction';\nimport { logEvent } from '../../logger/actions';\nimport { getActiveFilters } from '../util/activeDashboardFilters';\nimport { getAllActiveFilters } from '../util/activeAllDashboardFilters';\n\nfunction mapStateToProps(state) {var _dashboardInfo$metada, _dataMask$ownFilters;\n  const {\n    datasources,\n    sliceEntities,\n    charts,\n    dataMask,\n    dashboardInfo,\n    dashboardState,\n    dashboardLayout,\n    impressionId,\n    nativeFilters } =\n  state;\n\n  return {\n    initMessages: dashboardInfo.common.flash_messages,\n    timeout: dashboardInfo.common.conf.SUPERSET_WEBSERVER_TIMEOUT,\n    userId: dashboardInfo.userId,\n    dashboardInfo,\n    dashboardState,\n    charts,\n    datasources,\n    // filters prop: a map structure for all the active filter_box's values and scope in this dashboard,\n    // for each filter field. map key is [chartId_column]\n    // When dashboard is first loaded into browser,\n    // its value is from preselect_filters that dashboard owner saved in dashboard's meta data\n    // When user start interacting with dashboard, it will be user picked values from all filter_box\n    activeFilters: {\n      ...getActiveFilters(),\n      ...getAllActiveFilters({\n        // eslint-disable-next-line camelcase\n        chartConfiguration: (_dashboardInfo$metada = dashboardInfo.metadata) == null ? void 0 : _dashboardInfo$metada.chart_configuration,\n        nativeFilters: nativeFilters.filters,\n        dataMask,\n        layout: dashboardLayout.present }) },\n\n\n    ownDataCharts: (_dataMask$ownFilters = dataMask.ownFilters) != null ? _dataMask$ownFilters : {},\n    slices: sliceEntities.slices,\n    layout: dashboardLayout.present,\n    impressionId };\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(\n    {\n      addSliceToDashboard,\n      removeSliceFromDashboard,\n      triggerQuery,\n      logEvent },\n\n    dispatch) };\n\n\n}const _default =\n\nconnect(mapStateToProps, mapDispatchToProps)(Dashboard);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/app/superset-frontend/src/dashboard/containers/Dashboard.jsx\");reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/app/superset-frontend/src/dashboard/containers/Dashboard.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/containers/Dashboard.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/containers/Dashboard.jsx"],"names":["bindActionCreators","connect","Dashboard","addSliceToDashboard","removeSliceFromDashboard","triggerQuery","logEvent","getActiveFilters","getAllActiveFilters","mapStateToProps","state","datasources","sliceEntities","charts","dataMask","dashboardInfo","dashboardState","dashboardLayout","impressionId","nativeFilters","initMessages","common","flash_messages","timeout","conf","SUPERSET_WEBSERVER_TIMEOUT","userId","activeFilters","chartConfiguration","metadata","chart_configuration","filters","layout","present","ownDataCharts","ownFilters","slices","mapDispatchToProps","dispatch","actions"],"mappings":"wSAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;;AAEA;AACEC,mBADF;AAEEC,wBAFF;AAGO,2BAHP;AAIA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,mBAAT,QAAoC,mCAApC;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA,cANI;AAOJC,IAAAA,eAPI;AAQJC,IAAAA,YARI;AASJC,IAAAA,aATI;AAUFT,EAAAA,KAVJ;;AAYA,SAAO;AACLU,IAAAA,YAAY,EAAEL,aAAa,CAACM,MAAd,CAAqBC,cAD9B;AAELC,IAAAA,OAAO,EAAER,aAAa,CAACM,MAAd,CAAqBG,IAArB,CAA0BC,0BAF9B;AAGLC,IAAAA,MAAM,EAAEX,aAAa,CAACW,MAHjB;AAILX,IAAAA,aAJK;AAKLC,IAAAA,cALK;AAMLH,IAAAA,MANK;AAOLF,IAAAA,WAPK;AAQL;AACA;AACA;AACA;AACA;AACAgB,IAAAA,aAAa,EAAE;AACb,SAAGpB,gBAAgB,EADN;AAEb,SAAGC,mBAAmB,CAAC;AACrB;AACAoB,QAAAA,kBAAkB,2BAAEb,aAAa,CAACc,QAAhB,qBAAE,sBAAwBC,mBAFvB;AAGrBX,QAAAA,aAAa,EAAEA,aAAa,CAACY,OAHR;AAIrBjB,QAAAA,QAJqB;AAKrBkB,QAAAA,MAAM,EAAEf,eAAe,CAACgB,OALH,EAAD,CAFT,EAbV;;;AAuBLC,IAAAA,aAAa,0BAAEpB,QAAQ,CAACqB,UAAX,mCAAyB,EAvBjC;AAwBLC,IAAAA,MAAM,EAAExB,aAAa,CAACwB,MAxBjB;AAyBLJ,IAAAA,MAAM,EAAEf,eAAe,CAACgB,OAzBnB;AA0BLf,IAAAA,YA1BK,EAAP;;AA4BD;;AAED,SAASmB,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLC,IAAAA,OAAO,EAAEvC,kBAAkB;AACzB;AACEG,MAAAA,mBADF;AAEEC,MAAAA,wBAFF;AAGEC,MAAAA,YAHF;AAIEC,MAAAA,QAJF,EADyB;;AAOzBgC,IAAAA,QAPyB,CADtB,EAAP;;;AAWD,C;;AAEcrC,OAAO,CAACQ,eAAD,EAAkB4B,kBAAlB,CAAP,CAA6CnC,SAA7C,C,CAAf,wB,iLAzDSO,e,8GA2CA4B,kB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport Dashboard from '../components/Dashboard';\n\nimport {\n  addSliceToDashboard,\n  removeSliceFromDashboard,\n} from '../actions/dashboardState';\nimport { triggerQuery } from '../../chart/chartAction';\nimport { logEvent } from '../../logger/actions';\nimport { getActiveFilters } from '../util/activeDashboardFilters';\nimport { getAllActiveFilters } from '../util/activeAllDashboardFilters';\n\nfunction mapStateToProps(state) {\n  const {\n    datasources,\n    sliceEntities,\n    charts,\n    dataMask,\n    dashboardInfo,\n    dashboardState,\n    dashboardLayout,\n    impressionId,\n    nativeFilters,\n  } = state;\n\n  return {\n    initMessages: dashboardInfo.common.flash_messages,\n    timeout: dashboardInfo.common.conf.SUPERSET_WEBSERVER_TIMEOUT,\n    userId: dashboardInfo.userId,\n    dashboardInfo,\n    dashboardState,\n    charts,\n    datasources,\n    // filters prop: a map structure for all the active filter_box's values and scope in this dashboard,\n    // for each filter field. map key is [chartId_column]\n    // When dashboard is first loaded into browser,\n    // its value is from preselect_filters that dashboard owner saved in dashboard's meta data\n    // When user start interacting with dashboard, it will be user picked values from all filter_box\n    activeFilters: {\n      ...getActiveFilters(),\n      ...getAllActiveFilters({\n        // eslint-disable-next-line camelcase\n        chartConfiguration: dashboardInfo.metadata?.chart_configuration,\n        nativeFilters: nativeFilters.filters,\n        dataMask,\n        layout: dashboardLayout.present,\n      }),\n    },\n    ownDataCharts: dataMask.ownFilters ?? {},\n    slices: sliceEntities.slices,\n    layout: dashboardLayout.present,\n    impressionId,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(\n      {\n        addSliceToDashboard,\n        removeSliceFromDashboard,\n        triggerQuery,\n        logEvent,\n      },\n      dispatch,\n    ),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n"]},"metadata":{},"sourceType":"module"}