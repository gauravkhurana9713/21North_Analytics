{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\nimport Icon from 'src//components/Icon';\nimport StyledModal from 'src/common/components/Modal';\nimport { useImportResource } from 'src/views/CRUD/hooks';import { jsx as ___EmotionJSX } from \"@emotion/core\";\nexport const StyledIcon = styled(Icon)`\n  margin: auto ${({ theme }) => theme.gridUnit * 2}px auto 0;\n`;\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s - 1}px;\n`;\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\nconst ImportModelsModal = ({ resourceName, resourceLabel, passwordsNeededMessage, confirmOverwriteMessage, addDangerToast, addSuccessToast, onModelImport, show, onHide, passwordFields = [], setPasswordFields = () => {} }) => {\n  const [isHidden, setIsHidden] = useState(true);\n  const [uploadFile, setUploadFile] = useState(null);\n  const [passwords, setPasswords] = useState({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] = useState(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState(false);\n  const fileInputRef = useRef(null);\n  const clearModal = () => {\n    setUploadFile(null);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    if (fileInputRef && fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  const handleErrorMsg = msg => {\n    clearModal();\n    addDangerToast(msg);\n  };\n  const { state: { alreadyExists, passwordsNeeded }, importResource } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n  }, [passwordsNeeded, setPasswordFields]);\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n  const onUpload = () => {\n    if (uploadFile === null) {\n      return;\n    }\n    importResource(uploadFile, passwords, confirmedOverwrite).then(result => {\n      if (result) {\n        addSuccessToast(t('The import was successful'));\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n  const changeFile = event => {\n    const { files } = event.target;\n    setUploadFile(files && files[0] || null);\n  };\n  const confirmOverwrite = event => {var _event$currentTarget$, _event$currentTarget;\n    const targetValue = (_event$currentTarget$ = (_event$currentTarget = event.currentTarget) == null ? void 0 : _event$currentTarget.value) != null ? _event$currentTarget$ : '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n  const renderPasswordFields = () => {\n    if (passwordFields.length === 0) {\n      return null;\n    }\n    return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(\"h5\", null, \"Database passwords\"),\n    ___EmotionJSX(HelperMessage, null, passwordsNeededMessage),\n    _mapInstanceProperty(passwordFields).call(passwordFields, fileName => ___EmotionJSX(StyledInputContainer, { key: `password-for-${fileName}` },\n    ___EmotionJSX(\"div\", { className: \"control-label\" },\n    fileName,\n    ___EmotionJSX(\"span\", { className: \"required\" }, \"*\")),\n\n    ___EmotionJSX(\"input\", { name: `password-${fileName}`, autoComplete: `password-${fileName}`, type: \"password\", value: passwords[fileName], onChange: event => setPasswords({ ...passwords, [fileName]: event.target.value }) }))));\n\n\n  };\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n    return ___EmotionJSX(React.Fragment, null,\n    ___EmotionJSX(StyledInputContainer, null,\n    ___EmotionJSX(\"div\", { className: \"confirm-overwrite\" }, confirmOverwriteMessage),\n    ___EmotionJSX(\"div\", { className: \"control-label\" },\n    t('Type \"%s\" to confirm', t('OVERWRITE'))),\n\n    ___EmotionJSX(\"input\", { \"data-test\": \"overwrite-modal-input\", id: \"overwrite\", type: \"text\", onChange: confirmOverwrite })));\n\n\n  };\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n  return ___EmotionJSX(StyledModal, { name: \"model\", className: \"import-model-modal\", disablePrimaryButton: uploadFile === null || needsOverwriteConfirm && !confirmedOverwrite, onHandledPrimaryAction: onUpload, onHide: hide, primaryButtonName: needsOverwriteConfirm ? t('Overwrite') : t('Import'), primaryButtonType: needsOverwriteConfirm ? 'danger' : 'primary', width: \"750px\", show: show, title: ___EmotionJSX(\"h4\", null, t('Import %s', resourceLabel)) },\n  ___EmotionJSX(StyledInputContainer, null,\n  ___EmotionJSX(\"div\", { className: \"control-label\" },\n  ___EmotionJSX(\"label\", { htmlFor: \"modelFile\" },\n  t('File'),\n  ___EmotionJSX(\"span\", { className: \"required\" }, \"*\"))),\n\n\n  ___EmotionJSX(\"input\", { ref: fileInputRef, \"data-test\": \"model-file-input\", name: \"modelFile\", id: \"modelFile\", type: \"file\", accept: \".yaml,.json,.yml,.zip\", onChange: changeFile })),\n\n  renderPasswordFields(),\n  renderOverwriteConfirmation());\n\n};__signature__(ImportModelsModal, \"useState{[isHidden, setIsHidden](true)}\\nuseState{[uploadFile, setUploadFile](null)}\\nuseState{[passwords, setPasswords]({})}\\nuseState{[needsOverwriteConfirm, setNeedsOverwriteConfirm](false)}\\nuseState{[confirmedOverwrite, setConfirmedOverwrite](false)}\\nuseRef{fileInputRef}\\nuseImportResource{{ state: { alreadyExists, passwordsNeeded }, importResource, }}\\nuseEffect{}\\nuseEffect{}\", () => [useImportResource]);const _default =\nImportModelsModal;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(StyledIcon, \"StyledIcon\", \"/app/superset-frontend/src/components/ImportModal/index.tsx\");reactHotLoader.register(HelperMessage, \"HelperMessage\", \"/app/superset-frontend/src/components/ImportModal/index.tsx\");reactHotLoader.register(StyledInputContainer, \"StyledInputContainer\", \"/app/superset-frontend/src/components/ImportModal/index.tsx\");reactHotLoader.register(ImportModelsModal, \"ImportModelsModal\", \"/app/superset-frontend/src/components/ImportModal/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/components/ImportModal/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/components/ImportModal/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { FunctionComponent, useEffect, useRef, useState } from 'react';\nimport { styled, t } from '@superset-ui/core';\n\nimport Icon from 'src//components/Icon';\nimport StyledModal from 'src/common/components/Modal';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport { ImportResourceName } from 'src/views/CRUD/types';\n\nexport const StyledIcon = styled(Icon)`\n  margin: auto ${({ theme }) => theme.gridUnit * 2}px auto 0;\n`;\n\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s - 1}px;\n`;\n\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nexport interface ImportModelsModalProps {\n  resourceName: ImportResourceName;\n  resourceLabel: string;\n  passwordsNeededMessage: string;\n  confirmOverwriteMessage: string;\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onModelImport: () => void;\n  show: boolean;\n  onHide: () => void;\n  passwordFields?: string[];\n  setPasswordFields?: (passwordFields: string[]) => void;\n}\n\nconst ImportModelsModal: FunctionComponent<ImportModelsModalProps> = ({\n  resourceName,\n  resourceLabel,\n  passwordsNeededMessage,\n  confirmOverwriteMessage,\n  addDangerToast,\n  addSuccessToast,\n  onModelImport,\n  show,\n  onHide,\n  passwordFields = [],\n  setPasswordFields = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [uploadFile, setUploadFile] = useState<File | null>(null);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] = useState<boolean>(\n    false,\n  );\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const clearModal = () => {\n    setUploadFile(null);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    if (fileInputRef && fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleErrorMsg = (msg: string) => {\n    clearModal();\n    addDangerToast(msg);\n  };\n\n  const {\n    state: { alreadyExists, passwordsNeeded },\n    importResource,\n  } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n  }, [passwordsNeeded, setPasswordFields]);\n\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n\n  const onUpload = () => {\n    if (uploadFile === null) {\n      return;\n    }\n\n    importResource(uploadFile, passwords, confirmedOverwrite).then(result => {\n      if (result) {\n        addSuccessToast(t('The import was successful'));\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n\n  const changeFile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { files } = event.target as HTMLInputElement;\n    setUploadFile((files && files[0]) || null);\n  };\n\n  const confirmOverwrite = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const renderPasswordFields = () => {\n    if (passwordFields.length === 0) {\n      return null;\n    }\n\n    return (\n      <>\n        <h5>Database passwords</h5>\n        <HelperMessage>{passwordsNeededMessage}</HelperMessage>\n        {passwordFields.map(fileName => (\n          <StyledInputContainer key={`password-for-${fileName}`}>\n            <div className=\"control-label\">\n              {fileName}\n              <span className=\"required\">*</span>\n            </div>\n            <input\n              name={`password-${fileName}`}\n              autoComplete={`password-${fileName}`}\n              type=\"password\"\n              value={passwords[fileName]}\n              onChange={event =>\n                setPasswords({ ...passwords, [fileName]: event.target.value })\n              }\n            />\n          </StyledInputContainer>\n        ))}\n      </>\n    );\n  };\n\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n\n    return (\n      <>\n        <StyledInputContainer>\n          <div className=\"confirm-overwrite\">{confirmOverwriteMessage}</div>\n          <div className=\"control-label\">\n            {t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          </div>\n          <input\n            data-test=\"overwrite-modal-input\"\n            id=\"overwrite\"\n            type=\"text\"\n            onChange={confirmOverwrite}\n          />\n        </StyledInputContainer>\n      </>\n    );\n  };\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <StyledModal\n      name=\"model\"\n      className=\"import-model-modal\"\n      disablePrimaryButton={\n        uploadFile === null || (needsOverwriteConfirm && !confirmedOverwrite)\n      }\n      onHandledPrimaryAction={onUpload}\n      onHide={hide}\n      primaryButtonName={needsOverwriteConfirm ? t('Overwrite') : t('Import')}\n      primaryButtonType={needsOverwriteConfirm ? 'danger' : 'primary'}\n      width=\"750px\"\n      show={show}\n      title={<h4>{t('Import %s', resourceLabel)}</h4>}\n    >\n      <StyledInputContainer>\n        <div className=\"control-label\">\n          <label htmlFor=\"modelFile\">\n            {t('File')}\n            <span className=\"required\">*</span>\n          </label>\n        </div>\n        <input\n          ref={fileInputRef}\n          data-test=\"model-file-input\"\n          name=\"modelFile\"\n          id=\"modelFile\"\n          type=\"file\"\n          accept=\".yaml,.json,.yml,.zip\"\n          onChange={changeFile}\n        />\n      </StyledInputContainer>\n      {renderPasswordFields()}\n      {renderOverwriteConfirmation()}\n    </StyledModal>\n  );\n};\n\nexport default ImportModelsModal;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}