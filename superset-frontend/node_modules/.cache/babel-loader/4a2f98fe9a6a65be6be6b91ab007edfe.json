{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Behavior, ensureIsArray, GenericDataType, t, tn } from '@superset-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { Select } from 'src/common/components';\nimport { Styles, StyledSelect } from '../common';import { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst { Option } = Select;\nexport default function PluginFilterTimeColumn(props) {var _context;\n  const { behaviors, data, formData, height, width, setDataMask } = props;\n  const { defaultValue, currentValue, inputRef } = formData;\n  const [value, setValue] = useState(defaultValue != null ? defaultValue : []);\n  const handleChange = value => {\n    const resultValue = ensureIsArray(value);\n    setValue(resultValue);\n    const dataMask = {\n      extraFormData: {\n        override_form_data: {\n          granularity_sqla: resultValue.length ? resultValue[0] : null } },\n\n\n      currentState: {\n        value: resultValue.length ? resultValue : null } };\n\n\n    const dataMaskObject = {};\n    if (_includesInstanceProperty(behaviors).call(behaviors, Behavior.NATIVE_FILTER)) {\n      dataMaskObject.nativeFilters = dataMask;\n    }\n    if (_includesInstanceProperty(behaviors).call(behaviors, Behavior.CROSS_FILTER)) {\n      dataMaskObject.crossFilters = dataMask;\n    }\n    setDataMask(dataMaskObject);\n  };\n  useEffect(() => {\n    handleChange(currentValue != null ? currentValue : null);\n  }, [_JSON$stringify(currentValue)]);\n  useEffect(() => {\n    handleChange(defaultValue != null ? defaultValue : null);\n    // I think after Config Modal update some filter it re-creates default value for all other filters\n    // so we can process it like this `JSON.stringify` or start to use `Immer`\n  }, [_JSON$stringify(defaultValue)]);\n  const timeColumns = _filterInstanceProperty(_context = data || []).call(_context, row => row.dtype === GenericDataType.TEMPORAL);\n  const placeholderText = timeColumns.length === 0 ?\n  t('No time columns') :\n  tn('%s option', '%s options', timeColumns.length, timeColumns.length);\n  return ___EmotionJSX(Styles, { height: height, width: width },\n  ___EmotionJSX(StyledSelect, { allowClear: true, value: value, placeholder: placeholderText\n    // @ts-ignore\n    , onChange: handleChange, ref: inputRef },\n  _mapInstanceProperty(timeColumns).call(timeColumns, row => {\n    const { column_name: columnName, verbose_name: verboseName } = row;\n    return ___EmotionJSX(Option, { key: columnName, value: columnName },\n    verboseName != null ? verboseName : columnName);\n\n  })));\n\n\n}__signature__(PluginFilterTimeColumn, \"useState{[value, setValue](defaultValue ?? [])}\\nuseEffect{}\\nuseEffect{}\");;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Option, \"Option\", \"/app/superset-frontend/src/filters/components/TimeColumn/TimeColumnFilterPlugin.tsx\");reactHotLoader.register(PluginFilterTimeColumn, \"PluginFilterTimeColumn\", \"/app/superset-frontend/src/filters/components/TimeColumn/TimeColumnFilterPlugin.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/filters/components/TimeColumn/TimeColumnFilterPlugin.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  Behavior,\n  DataMask,\n  ensureIsArray,\n  GenericDataType,\n  t,\n  tn,\n} from '@superset-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { Select } from 'src/common/components';\nimport { Styles, StyledSelect } from '../common';\nimport { PluginFilterTimeColumnProps } from './types';\n\nconst { Option } = Select;\n\nexport default function PluginFilterTimeColumn(\n  props: PluginFilterTimeColumnProps,\n) {\n  const { behaviors, data, formData, height, width, setDataMask } = props;\n  const { defaultValue, currentValue, inputRef } = formData;\n\n  const [value, setValue] = useState<string[]>(defaultValue ?? []);\n\n  const handleChange = (value?: string[] | string | null) => {\n    const resultValue: string[] = ensureIsArray<string>(value);\n    setValue(resultValue);\n\n    const dataMask = {\n      extraFormData: {\n        override_form_data: {\n          granularity_sqla: resultValue.length ? resultValue[0] : null,\n        },\n      },\n      currentState: {\n        value: resultValue.length ? resultValue : null,\n      },\n    };\n\n    const dataMaskObject: DataMask = {};\n    if (behaviors.includes(Behavior.NATIVE_FILTER)) {\n      dataMaskObject.nativeFilters = dataMask;\n    }\n\n    if (behaviors.includes(Behavior.CROSS_FILTER)) {\n      dataMaskObject.crossFilters = dataMask;\n    }\n\n    setDataMask(dataMaskObject);\n  };\n\n  useEffect(() => {\n    handleChange(currentValue ?? null);\n  }, [JSON.stringify(currentValue)]);\n\n  useEffect(() => {\n    handleChange(defaultValue ?? null);\n    // I think after Config Modal update some filter it re-creates default value for all other filters\n    // so we can process it like this `JSON.stringify` or start to use `Immer`\n  }, [JSON.stringify(defaultValue)]);\n\n  const timeColumns = (data || []).filter(\n    row => row.dtype === GenericDataType.TEMPORAL,\n  );\n\n  const placeholderText =\n    timeColumns.length === 0\n      ? t('No time columns')\n      : tn('%s option', '%s options', timeColumns.length, timeColumns.length);\n  return (\n    <Styles height={height} width={width}>\n      <StyledSelect\n        allowClear\n        value={value}\n        placeholder={placeholderText}\n        // @ts-ignore\n        onChange={handleChange}\n        ref={inputRef}\n      >\n        {timeColumns.map(\n          (row: { column_name: string; verbose_name: string | null }) => {\n            const { column_name: columnName, verbose_name: verboseName } = row;\n            return (\n              <Option key={columnName} value={columnName}>\n                {verboseName ?? columnName}\n              </Option>\n            );\n          },\n        )}\n      </StyledSelect>\n    </Styles>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}