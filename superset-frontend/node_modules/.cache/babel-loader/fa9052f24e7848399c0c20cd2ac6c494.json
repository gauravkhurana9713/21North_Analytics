{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};export var FilterOperators;\n(function (FilterOperators) {\n  FilterOperators[\"startsWith\"] = \"sw\";\n  FilterOperators[\"endsWith\"] = \"ew\";\n  FilterOperators[\"contains\"] = \"ct\";\n  FilterOperators[\"equals\"] = \"eq\";\n  FilterOperators[\"notStartsWith\"] = \"nsw\";\n  FilterOperators[\"notEndsWith\"] = \"new\";\n  FilterOperators[\"notContains\"] = \"nct\";\n  FilterOperators[\"notEquals\"] = \"neq\";\n  FilterOperators[\"greaterThan\"] = \"gt\";\n  FilterOperators[\"lessThan\"] = \"lt\";\n  FilterOperators[\"relationManyMany\"] = \"rel_m_m\";\n  FilterOperators[\"relationOneMany\"] = \"rel_o_m\";\n  FilterOperators[\"titleOrSlug\"] = \"title_or_slug\";\n  FilterOperators[\"nameOrDescription\"] = \"name_or_description\";\n  FilterOperators[\"allText\"] = \"all_text\";\n  FilterOperators[\"chartAllText\"] = \"chart_all_text\";\n  FilterOperators[\"datasetIsNullOrEmpty\"] = \"dataset_is_null_or_empty\";\n  FilterOperators[\"between\"] = \"between\";\n  FilterOperators[\"dashboardIsFav\"] = \"dashboard_is_favorite\";\n  FilterOperators[\"chartIsFav\"] = \"chart_is_favorite\";\n})(FilterOperators || (FilterOperators = {}));;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FilterOperators, \"FilterOperators\", \"/app/superset-frontend/src/components/ListView/types.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/components/ListView/types.ts"],"names":[],"mappings":"uSA0GA,OAAA,IAAY,eAAZ;AAAA,CAAA,UAAY,eAAZ,EAA2B;AACzB,EAAA,eAAA,CAAA,YAAA,CAAA,GAAA,IAAA;AACA,EAAA,eAAA,CAAA,UAAA,CAAA,GAAA,IAAA;AACA,EAAA,eAAA,CAAA,UAAA,CAAA,GAAA,IAAA;AACA,EAAA,eAAA,CAAA,QAAA,CAAA,GAAA,IAAA;AACA,EAAA,eAAA,CAAA,eAAA,CAAA,GAAA,KAAA;AACA,EAAA,eAAA,CAAA,aAAA,CAAA,GAAA,KAAA;AACA,EAAA,eAAA,CAAA,aAAA,CAAA,GAAA,KAAA;AACA,EAAA,eAAA,CAAA,WAAA,CAAA,GAAA,KAAA;AACA,EAAA,eAAA,CAAA,aAAA,CAAA,GAAA,IAAA;AACA,EAAA,eAAA,CAAA,UAAA,CAAA,GAAA,IAAA;AACA,EAAA,eAAA,CAAA,kBAAA,CAAA,GAAA,SAAA;AACA,EAAA,eAAA,CAAA,iBAAA,CAAA,GAAA,SAAA;AACA,EAAA,eAAA,CAAA,aAAA,CAAA,GAAA,eAAA;AACA,EAAA,eAAA,CAAA,mBAAA,CAAA,GAAA,qBAAA;AACA,EAAA,eAAA,CAAA,SAAA,CAAA,GAAA,UAAA;AACA,EAAA,eAAA,CAAA,cAAA,CAAA,GAAA,gBAAA;AACA,EAAA,eAAA,CAAA,sBAAA,CAAA,GAAA,0BAAA;AACA,EAAA,eAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,eAAA,CAAA,gBAAA,CAAA,GAAA,uBAAA;AACA,EAAA,eAAA,CAAA,YAAA,CAAA,GAAA,mBAAA;AACD,CArBD,EAAY,eAAe,KAAf,eAAe,GAAA,EAAA,CAA3B,E,iLAAY,e","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ReactNode } from 'react';\n\nexport interface SortColumn {\n  id: string;\n  desc?: boolean;\n}\n\nexport type SortColumns = SortColumn[];\n\nexport interface SelectOption {\n  label: string;\n  value: any;\n}\n\nexport interface CardSortSelectOption {\n  desc: boolean;\n  id: any;\n  label: string;\n  value: any;\n}\n\ntype FilterOperator =\n  | 'sw'\n  | 'ew'\n  | 'ct'\n  | 'eq'\n  | 'nsw'\n  | 'new'\n  | 'nct'\n  | 'neq'\n  | 'gt'\n  | 'lt'\n  | 'rel_m_m'\n  | 'rel_o_m'\n  | 'title_or_slug'\n  | 'name_or_description'\n  | 'all_text'\n  | 'chart_all_text'\n  | 'dataset_is_null_or_empty'\n  | 'between'\n  | 'dashboard_is_favorite'\n  | 'chart_is_favorite';\n\nexport interface Filter {\n  Header: ReactNode;\n  id: string;\n  urlDisplay?: string;\n  operator?: FilterOperator;\n  input?:\n    | 'text'\n    | 'textarea'\n    | 'select'\n    | 'checkbox'\n    | 'search'\n    | 'datetime_range';\n  unfilteredLabel?: string;\n  selects?: SelectOption[];\n  onFilterOpen?: () => void;\n  fetchSelects?: (\n    filterValue?: string,\n    pageIndex?: number,\n    pageSize?: number,\n  ) => Promise<SelectOption[]>;\n  paginate?: boolean;\n}\n\nexport type Filters = Filter[];\n\nexport type ViewModeType = 'card' | 'table';\n\nexport interface FilterValue {\n  id: string;\n  urlDisplay?: string;\n  operator?: string;\n  value: string | boolean | number | null | undefined | string[] | number[];\n}\n\nexport interface FetchDataConfig {\n  pageIndex: number;\n  pageSize: number;\n  sortBy: SortColumns;\n  filters: FilterValue[];\n}\n\nexport interface InternalFilter extends FilterValue {\n  Header?: string;\n}\n\nexport enum FilterOperators {\n  startsWith = 'sw',\n  endsWith = 'ew',\n  contains = 'ct',\n  equals = 'eq',\n  notStartsWith = 'nsw',\n  notEndsWith = 'new',\n  notContains = 'nct',\n  notEquals = 'neq',\n  greaterThan = 'gt',\n  lessThan = 'lt',\n  relationManyMany = 'rel_m_m',\n  relationOneMany = 'rel_o_m',\n  titleOrSlug = 'title_or_slug',\n  nameOrDescription = 'name_or_description',\n  allText = 'all_text',\n  chartAllText = 'chart_all_text',\n  datasetIsNullOrEmpty = 'dataset_is_null_or_empty',\n  between = 'between',\n  dashboardIsFav = 'dashboard_is_favorite',\n  chartIsFav = 'chart_is_favorite',\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}