{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _someInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/some\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _reduceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/reduce\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { t, styled, getChartControlPanelRegistry } from '@superset-ui/core';\nimport { InfoTooltipWithTrigger } from '@superset-ui/chart-controls';\nimport Tabs from 'src/common/components/Tabs';\nimport Collapse from 'src/common/components/Collapse';\nimport { PluginContext } from 'src/components/DynamicPlugins';\nimport Loading from 'src/components/Loading';\nimport { getSectionsToRender } from 'src/explore/controlUtils';\nimport { exploreActions } from 'src/explore/actions/exploreActions';\nimport ControlRow from './ControlRow';\nimport Control from './Control';import { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst Styles = styled.div`\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  overflow-x: visible;\n  overflow-y: auto;\n  #controlSections {\n    min-height: 100%;\n    overflow: visible;\n  }\n  .nav-tabs {\n    flex: 0 0 1;\n  }\n  .tab-content {\n    overflow: auto;\n    flex: 1 1 100%;\n  }\n  .Select__menu {\n    max-width: 100%;\n  }\n`;\nconst ControlPanelsTabs = styled(Tabs)`\n  .ant-tabs-nav-list {\n    width: ${({ fullWidth }) => fullWidth ? '100%' : '50%'};\n  }\n  .ant-tabs-content-holder {\n    overflow: visible;\n  }\n  .ant-tabs-tabpane {\n    height: 100%;\n  }\n`;\nexport class ControlPanelsContainer extends React.Component {\n  constructor(props) {var _context, _context2;\n    super(props);\n    this.renderControl = _bindInstanceProperty(_context = this.renderControl).call(_context, this);\n    this.renderControlPanelSection = _bindInstanceProperty(_context2 = this.renderControlPanelSection).call(_context2, this);\n  }\n  sectionsToRender() {\n    return getSectionsToRender(this.props.form_data.viz_type, this.props.datasource_type);\n  }\n  sectionsToExpand(sections) {\n    return _reduceInstanceProperty(sections).call(sections, (acc, section) => section.expanded ? [...acc, String(section.label)] : acc, []);\n  }\n  renderControl({ name, config }) {\n    const { actions, controls } = this.props;\n    const { visibility } = config;\n    // If the control item is not an object, we have to look up the control data from\n    // the centralized controls file.\n    // When it is an object we read control data straight from `config` instead\n    const controlData = {\n      ...config,\n      ...controls[name],\n      name };\n\n    const { validationErrors, ...restProps } = controlData;\n    // if visibility check says the config is not visible, don't render it\n    if (visibility && !visibility.call(config, this.props, controlData)) {\n      return null;\n    }\n    return ___EmotionJSX(Control, _extends({ key: `control-${name}`, name: name, validationErrors: validationErrors, actions: actions }, restProps));\n  }\n  renderControlPanelSection(section) {var _context3, _context4;\n    const { controls } = this.props;\n    const { label, description } = section;\n    // Section label can be a ReactNode but in some places we want to\n    // have a string ID. Using forced type conversion for now,\n    // should probably add a `id` field to sections in the future.\n    const sectionId = String(label);\n    const hasErrors = _someInstanceProperty(_context3 = section.controlSetRows).call(_context3, rows => _someInstanceProperty(rows).call(rows, item => {\n      const controlName = typeof item === 'string' ?\n      item :\n      item && 'name' in item ?\n      item.name :\n      null;\n      return controlName &&\n      controlName in controls &&\n      controls[controlName].validationErrors &&\n      controls[controlName].validationErrors.length > 0;\n    }));\n    const PanelHeader = () => ___EmotionJSX(\"span\", null,\n    ___EmotionJSX(\"span\", null, label), ' ',\n    description &&\n    // label is only used in tooltip id (should probably call this prop `id`)\n    ___EmotionJSX(InfoTooltipWithTrigger, { label: sectionId, tooltip: description }),\n    hasErrors && ___EmotionJSX(InfoTooltipWithTrigger, { label: \"validation-errors\", bsStyle: \"danger\", tooltip: \"This section contains validation errors\" }));\n\n    return ___EmotionJSX(Collapse.Panel, { className: \"control-panel-section\", header: PanelHeader(), key: sectionId },\n    _mapInstanceProperty(_context4 = section.controlSetRows).call(_context4, (controlSets, i) => {var _context5;\n      const renderedControls = _filterInstanceProperty(_context5 = _mapInstanceProperty(controlSets).call(controlSets,\n      controlItem => {\n        if (!controlItem) {\n          // When the item is invalid\n          return null;\n        }\n        if ( /*#__PURE__*/React.isValidElement(controlItem)) {\n          // When the item is a React element\n          return controlItem;\n        }\n        if (controlItem.name &&\n        controlItem.config &&\n        controlItem.name !== 'datasource') {\n          return this.renderControl(controlItem);\n        }\n        return null;\n      })).call(_context5,\n      x => x !== null);\n      // don't show the row if it is empty\n      if (renderedControls.length === 0) {\n        return null;\n      }\n      return ___EmotionJSX(ControlRow, { key: `controlsetrow-${i}`, controls: renderedControls });\n    }));\n\n  }\n  render() {var _context6;\n    const controlPanelRegistry = getChartControlPanelRegistry();\n    if (!controlPanelRegistry.has(this.props.form_data.viz_type) &&\n    this.context.loading) {\n      return ___EmotionJSX(Loading, null);\n    }\n    const querySectionsToRender = [];\n    const displaySectionsToRender = [];\n    _forEachInstanceProperty(_context6 = this.sectionsToRender()).call(_context6, section => {var _context7;\n      // if at least one control in the section is not `renderTrigger`\n      // or asks to be displayed at the Data tab\n      if (section.tabOverride === 'data' ||\n      _someInstanceProperty(_context7 = section.controlSetRows).call(_context7, rows => _someInstanceProperty(rows).call(rows, control => control &&\n      typeof control === 'object' &&\n      'config' in control &&\n      control.config && (\n      !control.config.renderTrigger ||\n      control.config.tabOverride === 'data')))) {\n        querySectionsToRender.push(section);\n      } else\n      {\n        displaySectionsToRender.push(section);\n      }\n    });\n    const showCustomizeTab = displaySectionsToRender.length > 0;\n    const expandedQuerySections = this.sectionsToExpand(querySectionsToRender);\n    const expandedCustomSections = this.sectionsToExpand(displaySectionsToRender);\n    return ___EmotionJSX(Styles, null,\n    ___EmotionJSX(ControlPanelsTabs, { id: \"controlSections\", \"data-test\": \"control-tabs\", fullWidth: showCustomizeTab },\n    ___EmotionJSX(Tabs.TabPane, { key: \"query\", tab: t('Data') },\n    ___EmotionJSX(Collapse, { bordered: true, defaultActiveKey: expandedQuerySections, expandIconPosition: \"right\", ghost: true },\n    _mapInstanceProperty(querySectionsToRender).call(querySectionsToRender, this.renderControlPanelSection))),\n\n\n    showCustomizeTab && ___EmotionJSX(Tabs.TabPane, { key: \"display\", tab: t('Customize') },\n    ___EmotionJSX(Collapse, { bordered: true, defaultActiveKey: expandedCustomSections, expandIconPosition: \"right\", ghost: true },\n    _mapInstanceProperty(displaySectionsToRender).call(displaySectionsToRender, this.renderControlPanelSection)))));\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}} // trigger updates to the component when async plugins load\nControlPanelsContainer.contextType = PluginContext;const _default =\nconnect(function mapStateToProps(state) {\n  const { explore, charts } = state;\n  const chartKey = _Object$keys(charts)[0];\n  const chart = charts[chartKey];\n  return {\n    chart,\n    isDatasourceMetaLoading: explore.isDatasourceMetaLoading,\n    controls: explore.controls,\n    exploreState: explore };\n\n}, function mapDispatchToProps(dispatch) {\n  return {\n    actions: bindActionCreators(exploreActions, dispatch) };\n\n})(ControlPanelsContainer);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Styles, \"Styles\", \"/app/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(ControlPanelsTabs, \"ControlPanelsTabs\", \"/app/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(ControlPanelsContainer, \"ControlPanelsContainer\", \"/app/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/explore/components/ControlPanelsContainer.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/ControlPanelsContainer.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport {\n  t,\n  styled,\n  getChartControlPanelRegistry,\n  QueryFormData,\n  DatasourceType,\n} from '@superset-ui/core';\nimport {\n  ControlPanelSectionConfig,\n  ControlState,\n  CustomControlItem,\n  ExpandedControlItem,\n  InfoTooltipWithTrigger,\n} from '@superset-ui/chart-controls';\n\nimport Tabs from 'src/common/components/Tabs';\nimport Collapse from 'src/common/components/Collapse';\nimport { PluginContext } from 'src/components/DynamicPlugins';\nimport Loading from 'src/components/Loading';\n\nimport { getSectionsToRender } from 'src/explore/controlUtils';\nimport {\n  ExploreActions,\n  exploreActions,\n} from 'src/explore/actions/exploreActions';\nimport { ExplorePageState } from 'src/explore/reducers/getInitialState';\nimport { ChartState } from 'src/explore/types';\n\nimport ControlRow from './ControlRow';\nimport Control from './Control';\n\nexport type ControlPanelsContainerProps = {\n  actions: ExploreActions;\n  datasource_type: DatasourceType;\n  exploreState: ExplorePageState['explore'];\n  chart: ChartState;\n  controls: Record<string, ControlState>;\n  form_data: QueryFormData;\n  isDatasourceMetaLoading: boolean;\n};\n\nexport type ExpandedControlPanelSectionConfig = Omit<\n  ControlPanelSectionConfig,\n  'controlSetRows'\n> & {\n  controlSetRows: ExpandedControlItem[][];\n};\n\nconst Styles = styled.div`\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n  overflow-x: visible;\n  overflow-y: auto;\n  #controlSections {\n    min-height: 100%;\n    overflow: visible;\n  }\n  .nav-tabs {\n    flex: 0 0 1;\n  }\n  .tab-content {\n    overflow: auto;\n    flex: 1 1 100%;\n  }\n  .Select__menu {\n    max-width: 100%;\n  }\n`;\n\nconst ControlPanelsTabs = styled(Tabs)`\n  .ant-tabs-nav-list {\n    width: ${({ fullWidth }) => (fullWidth ? '100%' : '50%')};\n  }\n  .ant-tabs-content-holder {\n    overflow: visible;\n  }\n  .ant-tabs-tabpane {\n    height: 100%;\n  }\n`;\n\nexport class ControlPanelsContainer extends React.Component<ControlPanelsContainerProps> {\n  // trigger updates to the component when async plugins load\n  static contextType = PluginContext;\n\n  constructor(props: ControlPanelsContainerProps) {\n    super(props);\n    this.renderControl = this.renderControl.bind(this);\n    this.renderControlPanelSection = this.renderControlPanelSection.bind(this);\n  }\n\n  sectionsToRender(): ExpandedControlPanelSectionConfig[] {\n    return getSectionsToRender(\n      this.props.form_data.viz_type,\n      this.props.datasource_type,\n    );\n  }\n\n  sectionsToExpand(sections: ControlPanelSectionConfig[]) {\n    return sections.reduce(\n      (acc, section) =>\n        section.expanded ? [...acc, String(section.label)] : acc,\n      [] as string[],\n    );\n  }\n\n  renderControl({ name, config }: CustomControlItem) {\n    const { actions, controls } = this.props;\n    const { visibility } = config;\n\n    // If the control item is not an object, we have to look up the control data from\n    // the centralized controls file.\n    // When it is an object we read control data straight from `config` instead\n    const controlData = {\n      ...config,\n      ...controls[name],\n      name,\n    };\n    const { validationErrors, ...restProps } = controlData as ControlState & {\n      validationErrors?: any[];\n    };\n\n    // if visibility check says the config is not visible, don't render it\n    if (visibility && !visibility.call(config, this.props, controlData)) {\n      return null;\n    }\n    return (\n      <Control\n        key={`control-${name}`}\n        name={name}\n        validationErrors={validationErrors}\n        actions={actions}\n        {...restProps}\n      />\n    );\n  }\n\n  renderControlPanelSection(section: ExpandedControlPanelSectionConfig) {\n    const { controls } = this.props;\n    const { label, description } = section;\n\n    // Section label can be a ReactNode but in some places we want to\n    // have a string ID. Using forced type conversion for now,\n    // should probably add a `id` field to sections in the future.\n    const sectionId = String(label);\n\n    const hasErrors = section.controlSetRows.some(rows =>\n      rows.some(item => {\n        const controlName =\n          typeof item === 'string'\n            ? item\n            : item && 'name' in item\n            ? item.name\n            : null;\n        return (\n          controlName &&\n          controlName in controls &&\n          controls[controlName].validationErrors &&\n          controls[controlName].validationErrors.length > 0\n        );\n      }),\n    );\n    const PanelHeader = () => (\n      <span>\n        <span>{label}</span>{' '}\n        {description && (\n          // label is only used in tooltip id (should probably call this prop `id`)\n          <InfoTooltipWithTrigger label={sectionId} tooltip={description} />\n        )}\n        {hasErrors && (\n          <InfoTooltipWithTrigger\n            label=\"validation-errors\"\n            bsStyle=\"danger\"\n            tooltip=\"This section contains validation errors\"\n          />\n        )}\n      </span>\n    );\n\n    return (\n      <Collapse.Panel\n        className=\"control-panel-section\"\n        header={PanelHeader()}\n        key={sectionId}\n      >\n        {section.controlSetRows.map((controlSets, i) => {\n          const renderedControls = controlSets\n            .map(controlItem => {\n              if (!controlItem) {\n                // When the item is invalid\n                return null;\n              }\n              if (React.isValidElement(controlItem)) {\n                // When the item is a React element\n                return controlItem;\n              }\n              if (\n                controlItem.name &&\n                controlItem.config &&\n                controlItem.name !== 'datasource'\n              ) {\n                return this.renderControl(controlItem);\n              }\n              return null;\n            })\n            .filter(x => x !== null);\n          // don't show the row if it is empty\n          if (renderedControls.length === 0) {\n            return null;\n          }\n          return (\n            <ControlRow\n              key={`controlsetrow-${i}`}\n              controls={renderedControls}\n            />\n          );\n        })}\n      </Collapse.Panel>\n    );\n  }\n\n  render() {\n    const controlPanelRegistry = getChartControlPanelRegistry();\n    if (\n      !controlPanelRegistry.has(this.props.form_data.viz_type) &&\n      this.context.loading\n    ) {\n      return <Loading />;\n    }\n\n    const querySectionsToRender: ExpandedControlPanelSectionConfig[] = [];\n    const displaySectionsToRender: ExpandedControlPanelSectionConfig[] = [];\n    this.sectionsToRender().forEach(section => {\n      // if at least one control in the section is not `renderTrigger`\n      // or asks to be displayed at the Data tab\n      if (\n        section.tabOverride === 'data' ||\n        section.controlSetRows.some(rows =>\n          rows.some(\n            control =>\n              control &&\n              typeof control === 'object' &&\n              'config' in control &&\n              control.config &&\n              (!control.config.renderTrigger ||\n                control.config.tabOverride === 'data'),\n          ),\n        )\n      ) {\n        querySectionsToRender.push(section);\n      } else {\n        displaySectionsToRender.push(section);\n      }\n    });\n\n    const showCustomizeTab = displaySectionsToRender.length > 0;\n    const expandedQuerySections = this.sectionsToExpand(querySectionsToRender);\n    const expandedCustomSections = this.sectionsToExpand(\n      displaySectionsToRender,\n    );\n    return (\n      <Styles>\n        <ControlPanelsTabs\n          id=\"controlSections\"\n          data-test=\"control-tabs\"\n          fullWidth={showCustomizeTab}\n        >\n          <Tabs.TabPane key=\"query\" tab={t('Data')}>\n            <Collapse\n              bordered\n              defaultActiveKey={expandedQuerySections}\n              expandIconPosition=\"right\"\n              ghost\n            >\n              {querySectionsToRender.map(this.renderControlPanelSection)}\n            </Collapse>\n          </Tabs.TabPane>\n          {showCustomizeTab && (\n            <Tabs.TabPane key=\"display\" tab={t('Customize')}>\n              <Collapse\n                bordered\n                defaultActiveKey={expandedCustomSections}\n                expandIconPosition=\"right\"\n                ghost\n              >\n                {displaySectionsToRender.map(this.renderControlPanelSection)}\n              </Collapse>\n            </Tabs.TabPane>\n          )}\n        </ControlPanelsTabs>\n      </Styles>\n    );\n  }\n}\n\nexport default connect(\n  function mapStateToProps(state: ExplorePageState) {\n    const { explore, charts } = state;\n    const chartKey = Object.keys(charts)[0];\n    const chart = charts[chartKey];\n    return {\n      chart,\n      isDatasourceMetaLoading: explore.isDatasourceMetaLoading,\n      controls: explore.controls,\n      exploreState: explore,\n    };\n  },\n  function mapDispatchToProps(dispatch) {\n    return {\n      actions: bindActionCreators(exploreActions, dispatch),\n    };\n  },\n)(ControlPanelsContainer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}