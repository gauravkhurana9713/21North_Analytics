{"ast":null,"code":"import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'src/components/Button';\nimport { t, styled, css } from '@superset-ui/core';\nimport Collapse from 'src/common/components/Collapse';\nimport TableElement from './TableElement';\nimport TableSelector from '../../components/TableSelector';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst propTypes = {\n  queryEditor: PropTypes.object.isRequired,\n  height: PropTypes.number,\n  tables: PropTypes.array,\n  actions: PropTypes.object,\n  database: PropTypes.object,\n  offline: PropTypes.bool };\n\n\nconst defaultProps = {\n  actions: {},\n  height: 500,\n  offline: false,\n  tables: [] };\n\n\nconst StyledScrollbarContainer = styled.div`\n  flex: 1 1 auto;\n  overflow: auto;\n`;\n\nconst StyledScrollbarContent = styled.div`\n  height: ${props => props.contentHeight}px;\n`;\n\nexport default class SqlEditorLeftBar extends React.PureComponent {\n  constructor(props) {var _context, _context2, _context3, _context4, _context5, _context6, _context7;\n    super(props);\n    this.resetState = _bindInstanceProperty(_context = this.resetState).call(_context, this);\n    this.onSchemaChange = _bindInstanceProperty(_context2 = this.onSchemaChange).call(_context2, this);\n    this.onSchemasLoad = _bindInstanceProperty(_context3 = this.onSchemasLoad).call(_context3, this);\n    this.onTablesLoad = _bindInstanceProperty(_context4 = this.onTablesLoad).call(_context4, this);\n    this.onDbChange = _bindInstanceProperty(_context5 = this.onDbChange).call(_context5, this);\n    this.getDbList = _bindInstanceProperty(_context6 = this.getDbList).call(_context6, this);\n    this.onTableChange = _bindInstanceProperty(_context7 = this.onTableChange).call(_context7, this);\n  }\n\n  onSchemaChange(schema) {\n    this.props.actions.queryEditorSetSchema(this.props.queryEditor, schema);\n  }\n\n  onSchemasLoad(schemas) {\n    this.props.actions.queryEditorSetSchemaOptions(\n    this.props.queryEditor,\n    schemas);\n\n  }\n\n  onTablesLoad(tables) {\n    this.props.actions.queryEditorSetTableOptions(\n    this.props.queryEditor,\n    tables);\n\n  }\n\n  onDbChange(db) {\n    this.props.actions.queryEditorSetDb(this.props.queryEditor, db.id);\n    this.props.actions.queryEditorSetFunctionNames(\n    this.props.queryEditor,\n    db.id);\n\n  }\n\n  onTableChange(tableName, schemaName) {\n    this.props.actions.addTable(this.props.queryEditor, tableName, schemaName);\n  }\n\n  getDbList(dbs) {\n    this.props.actions.setDatabases(dbs);\n  }\n\n  dbMutator(data) {var _context8;\n    const options = _mapInstanceProperty(_context8 = data.result).call(_context8, db => ({\n      value: db.id,\n      label: db.database_name }));\n\n    this.props.actions.setDatabases(data.result);\n    if (data.result.length === 0) {\n      this.props.actions.addDangerToast(\n      t(\"It seems you don't have access to any database\"));\n\n    }\n    return options;\n  }\n\n  resetState() {\n    this.props.actions.resetState();\n  }\n\n  changeTable(tableOpt) {\n    if (!tableOpt) {\n      return;\n    }\n    const schemaName = tableOpt.value.schema;\n    const tableName = tableOpt.value.table;\n    this.props.actions.queryEditorSetSchema(this.props.queryEditor, schemaName);\n    this.props.actions.addTable(this.props.queryEditor, tableName, schemaName);\n  }\n\n  render() {var _context9, _context10, _context11;\n    const shouldShowReset = window.location.search === '?reset=1';\n    const tableMetaDataHeight = this.props.height - 130; // 130 is the height of the selects above\n    const qe = this.props.queryEditor;\n    return (\n      ___EmotionJSX(\"div\", { className: \"SqlEditorLeftBar\" },\n      ___EmotionJSX(TableSelector, {\n        database: this.props.database,\n        dbId: qe.dbId,\n        getDbList: this.getDbList,\n        handleError: this.props.actions.addDangerToast,\n        onDbChange: this.onDbChange,\n        onSchemaChange: this.onSchemaChange,\n        onSchemasLoad: this.onSchemasLoad,\n        onTableChange: this.onTableChange,\n        onTablesLoad: this.onTablesLoad,\n        schema: qe.schema,\n        sqlLabMode: true,\n        tableNameSticky: false }),\n\n      ___EmotionJSX(\"div\", { className: \"divider\" }),\n      ___EmotionJSX(StyledScrollbarContainer, null,\n      ___EmotionJSX(StyledScrollbarContent, { contentHeight: tableMetaDataHeight },\n      ___EmotionJSX(Collapse, {\n        activeKey: _mapInstanceProperty(_context9 = _filterInstanceProperty(_context10 = this.props.tables).call(_context10,\n        ({ expanded }) => expanded)).call(_context9,\n        ({ id }) => id),\n        css: theme => css`\n                .ant-collapse-item {\n                  margin-bottom: ${theme.gridUnit * 3}px;\n                }\n                .ant-collapse-header {\n                  padding: 0px !important;\n                  display: flex;\n                  align-items: center;\n                }\n                .ant-collapse-content-box {\n                  padding: 0px ${theme.gridUnit * 4}px 0px 0px !important;\n                }\n                .ant-collapse-arrow {\n                  top: ${theme.gridUnit * 2}px !important;\n                  color: ${theme.colors.primary.dark1} !important;\n                  &: hover {\n                    color: ${theme.colors.primary.dark2} !important;\n                  }\n                }\n              `,\n        expandIconPosition: \"right\",\n        ghost: true },\n\n      _mapInstanceProperty(_context11 = this.props.tables).call(_context11, (table) =>\n      ___EmotionJSX(TableElement, {\n        table: table,\n        key: table.id,\n        actions: this.props.actions,\n        onClick: this.toggleTable }))))),\n\n\n\n\n\n      shouldShowReset &&\n      ___EmotionJSX(Button, {\n        buttonSize: \"small\",\n        buttonStyle: \"danger\",\n        onClick: this.resetState },\n\n      ___EmotionJSX(\"i\", { className: \"fa fa-bomb\" }), \" \", t('Reset state'))));\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nSqlEditorLeftBar.propTypes = propTypes;\nSqlEditorLeftBar.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/SqlLab/components/SqlEditorLeftBar.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/SqlLab/components/SqlEditorLeftBar.jsx\");reactHotLoader.register(StyledScrollbarContainer, \"StyledScrollbarContainer\", \"/app/superset-frontend/src/SqlLab/components/SqlEditorLeftBar.jsx\");reactHotLoader.register(StyledScrollbarContent, \"StyledScrollbarContent\", \"/app/superset-frontend/src/SqlLab/components/SqlEditorLeftBar.jsx\");reactHotLoader.register(SqlEditorLeftBar, \"SqlEditorLeftBar\", \"/app/superset-frontend/src/SqlLab/components/SqlEditorLeftBar.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/SqlLab/components/SqlEditorLeftBar.jsx"],"names":["React","PropTypes","Button","t","styled","css","Collapse","TableElement","TableSelector","propTypes","queryEditor","object","isRequired","height","number","tables","array","actions","database","offline","bool","defaultProps","StyledScrollbarContainer","div","StyledScrollbarContent","props","contentHeight","SqlEditorLeftBar","PureComponent","constructor","resetState","onSchemaChange","onSchemasLoad","onTablesLoad","onDbChange","getDbList","onTableChange","schema","queryEditorSetSchema","schemas","queryEditorSetSchemaOptions","queryEditorSetTableOptions","db","queryEditorSetDb","id","queryEditorSetFunctionNames","tableName","schemaName","addTable","dbs","setDatabases","dbMutator","data","options","result","value","label","database_name","length","addDangerToast","changeTable","tableOpt","table","render","shouldShowReset","window","location","search","tableMetaDataHeight","qe","dbId","expanded","theme","gridUnit","colors","primary","dark1","dark2","toggleTable"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'src/components/Button';\nimport { t, styled, css } from '@superset-ui/core';\nimport Collapse from 'src/common/components/Collapse';\nimport TableElement from './TableElement';\nimport TableSelector from '../../components/TableSelector';\n\nconst propTypes = {\n  queryEditor: PropTypes.object.isRequired,\n  height: PropTypes.number,\n  tables: PropTypes.array,\n  actions: PropTypes.object,\n  database: PropTypes.object,\n  offline: PropTypes.bool,\n};\n\nconst defaultProps = {\n  actions: {},\n  height: 500,\n  offline: false,\n  tables: [],\n};\n\nconst StyledScrollbarContainer = styled.div`\n  flex: 1 1 auto;\n  overflow: auto;\n`;\n\nconst StyledScrollbarContent = styled.div`\n  height: ${props => props.contentHeight}px;\n`;\n\nexport default class SqlEditorLeftBar extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.resetState = this.resetState.bind(this);\n    this.onSchemaChange = this.onSchemaChange.bind(this);\n    this.onSchemasLoad = this.onSchemasLoad.bind(this);\n    this.onTablesLoad = this.onTablesLoad.bind(this);\n    this.onDbChange = this.onDbChange.bind(this);\n    this.getDbList = this.getDbList.bind(this);\n    this.onTableChange = this.onTableChange.bind(this);\n  }\n\n  onSchemaChange(schema) {\n    this.props.actions.queryEditorSetSchema(this.props.queryEditor, schema);\n  }\n\n  onSchemasLoad(schemas) {\n    this.props.actions.queryEditorSetSchemaOptions(\n      this.props.queryEditor,\n      schemas,\n    );\n  }\n\n  onTablesLoad(tables) {\n    this.props.actions.queryEditorSetTableOptions(\n      this.props.queryEditor,\n      tables,\n    );\n  }\n\n  onDbChange(db) {\n    this.props.actions.queryEditorSetDb(this.props.queryEditor, db.id);\n    this.props.actions.queryEditorSetFunctionNames(\n      this.props.queryEditor,\n      db.id,\n    );\n  }\n\n  onTableChange(tableName, schemaName) {\n    this.props.actions.addTable(this.props.queryEditor, tableName, schemaName);\n  }\n\n  getDbList(dbs) {\n    this.props.actions.setDatabases(dbs);\n  }\n\n  dbMutator(data) {\n    const options = data.result.map(db => ({\n      value: db.id,\n      label: db.database_name,\n    }));\n    this.props.actions.setDatabases(data.result);\n    if (data.result.length === 0) {\n      this.props.actions.addDangerToast(\n        t(\"It seems you don't have access to any database\"),\n      );\n    }\n    return options;\n  }\n\n  resetState() {\n    this.props.actions.resetState();\n  }\n\n  changeTable(tableOpt) {\n    if (!tableOpt) {\n      return;\n    }\n    const schemaName = tableOpt.value.schema;\n    const tableName = tableOpt.value.table;\n    this.props.actions.queryEditorSetSchema(this.props.queryEditor, schemaName);\n    this.props.actions.addTable(this.props.queryEditor, tableName, schemaName);\n  }\n\n  render() {\n    const shouldShowReset = window.location.search === '?reset=1';\n    const tableMetaDataHeight = this.props.height - 130; // 130 is the height of the selects above\n    const qe = this.props.queryEditor;\n    return (\n      <div className=\"SqlEditorLeftBar\">\n        <TableSelector\n          database={this.props.database}\n          dbId={qe.dbId}\n          getDbList={this.getDbList}\n          handleError={this.props.actions.addDangerToast}\n          onDbChange={this.onDbChange}\n          onSchemaChange={this.onSchemaChange}\n          onSchemasLoad={this.onSchemasLoad}\n          onTableChange={this.onTableChange}\n          onTablesLoad={this.onTablesLoad}\n          schema={qe.schema}\n          sqlLabMode\n          tableNameSticky={false}\n        />\n        <div className=\"divider\" />\n        <StyledScrollbarContainer>\n          <StyledScrollbarContent contentHeight={tableMetaDataHeight}>\n            <Collapse\n              activeKey={this.props.tables\n                .filter(({ expanded }) => expanded)\n                .map(({ id }) => id)}\n              css={theme => css`\n                .ant-collapse-item {\n                  margin-bottom: ${theme.gridUnit * 3}px;\n                }\n                .ant-collapse-header {\n                  padding: 0px !important;\n                  display: flex;\n                  align-items: center;\n                }\n                .ant-collapse-content-box {\n                  padding: 0px ${theme.gridUnit * 4}px 0px 0px !important;\n                }\n                .ant-collapse-arrow {\n                  top: ${theme.gridUnit * 2}px !important;\n                  color: ${theme.colors.primary.dark1} !important;\n                  &: hover {\n                    color: ${theme.colors.primary.dark2} !important;\n                  }\n                }\n              `}\n              expandIconPosition=\"right\"\n              ghost\n            >\n              {this.props.tables.map(table => (\n                <TableElement\n                  table={table}\n                  key={table.id}\n                  actions={this.props.actions}\n                  onClick={this.toggleTable}\n                />\n              ))}\n            </Collapse>\n          </StyledScrollbarContent>\n        </StyledScrollbarContainer>\n        {shouldShowReset && (\n          <Button\n            buttonSize=\"small\"\n            buttonStyle=\"danger\"\n            onClick={this.resetState}\n          >\n            <i className=\"fa fa-bomb\" /> {t('Reset state')}\n          </Button>\n        )}\n      </div>\n    );\n  }\n}\n\nSqlEditorLeftBar.propTypes = propTypes;\nSqlEditorLeftBar.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}