{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// ParentSize uses resize observer so the dashboard will update size\n// when its container size changes, due to e.g., builder side panel opening\nimport { ParentSize } from '@vx/responsive';\nimport { TabContainer, TabContent, TabPane } from 'react-bootstrap';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport DashboardGrid from 'src/dashboard/containers/DashboardGrid';\nimport getLeafComponentIdFromPath from 'src/dashboard/util/getLeafComponentIdFromPath';\nimport { DASHBOARD_GRID_ID, DASHBOARD_ROOT_DEPTH } from 'src/dashboard/util/constants';\nimport { getRootLevelTabIndex } from './utils';import { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst DashboardContainer = ({ topLevelTabs, handleChangeTab }) => {\n  const dashboardLayout = useSelector(state => state.dashboardLayout.present);\n  const directPathToChild = useSelector(state => state.dashboardState.directPathToChild);\n  const [tabIndex, setTabIndex] = useState(getRootLevelTabIndex(dashboardLayout, directPathToChild));\n  useEffect(() => {\n    setTabIndex(getRootLevelTabIndex(dashboardLayout, directPathToChild));\n  }, [getLeafComponentIdFromPath(directPathToChild)]);\n  const childIds = topLevelTabs ?\n  topLevelTabs.children :\n  [DASHBOARD_GRID_ID];\n  return ___EmotionJSX(\"div\", { className: \"grid-container\", \"data-test\": \"grid-container\" },\n  ___EmotionJSX(ParentSize, null,\n  ({ width }) =>\n  /*\n    We use a TabContainer irrespective of whether top-level tabs exist to maintain\n    a consistent React component tree. This avoids expensive mounts/unmounts of\n    the entire dashboard upon adding/removing top-level tabs, which would otherwise\n    happen because of React's diffing algorithm\n  */\n  ___EmotionJSX(TabContainer, { id: DASHBOARD_GRID_ID, activeKey: Math.min(tabIndex, childIds.length - 1), onSelect: handleChangeTab\n    // @ts-ignore\n    , animation: true, mountOnEnter: true, unmountOnExit: false },\n  ___EmotionJSX(TabContent, null,\n  _mapInstanceProperty(childIds).call(childIds, (id, index) =>\n  // Matching the key of the first TabPane irrespective of topLevelTabs\n  // lets us keep the same React component tree when !!topLevelTabs changes.\n  // This avoids expensive mounts/unmounts of the entire dashboard.\n  ___EmotionJSX(TabPane, { key: index === 0 ? DASHBOARD_GRID_ID : id, eventKey: index },\n  ___EmotionJSX(DashboardGrid, { gridComponent: dashboardLayout[id]\n    // see isValidChild for why tabs do not increment the depth of their children\n    , depth: DASHBOARD_ROOT_DEPTH + 1 // (topLevelTabs ? 0 : 1)}\n    , width: width, isComponentVisible: index === tabIndex })))))));\n\n\n\n\n\n};__signature__(DashboardContainer, \"useSelector{dashboardLayout}\\nuseSelector{directPathToChild}\\nuseState{[tabIndex, setTabIndex](getRootLevelTabIndex(dashboardLayout, directPathToChild))}\\nuseEffect{}\", () => [useSelector, useSelector]);const _default =\nDashboardContainer;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(DashboardContainer, \"DashboardContainer\", \"/app/superset-frontend/src/dashboard/components/DashboardBuilder/DashboardContainer.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/DashboardBuilder/DashboardContainer.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/DashboardBuilder/DashboardContainer.tsx"],"names":[],"mappings":"ubAAA;;;;;;;;;;;;;;;;;AAiBG;AACH;AACA;AACA,SAAS,UAAT,QAA2B,gBAA3B;AACA,SAAS,YAAT,EAAuB,UAAvB,EAAmC,OAAnC,QAAkD,iBAAlD;AACA,OAAO,KAAP,IAAoC,SAApC,EAA+C,QAA/C,QAA+D,OAA/D;AACA,SAAS,WAAT,QAA4B,aAA5B;AACA,OAAO,aAAP,MAA0B,wCAA1B;AACA,OAAO,0BAAP,MAAuC,+CAAvC;AAEA,SACE,iBADF,EAEE,oBAFF,QAGO,8BAHP;AAIA,SAAS,oBAAT,QAAqC,SAArC,C;AAOA,MAAM,kBAAkB,GAAgC,CAAC,EACvD,YADuD,EAEvD,eAFuD,EAAD,KAGnD;AACH,QAAM,eAAe,GAAG,WAAW,CACjC,KAAK,IAAI,KAAK,CAAC,eAAN,CAAsB,OADE,CAAnC;AAGA,QAAM,iBAAiB,GAAG,WAAW,CACnC,KAAK,IAAI,KAAK,CAAC,cAAN,CAAqB,iBADK,CAArC;AAGA,QAAM,CAAC,QAAD,EAAW,WAAX,IAA0B,QAAQ,CACtC,oBAAoB,CAAC,eAAD,EAAkB,iBAAlB,CADkB,CAAxC;AAIA,EAAA,SAAS,CAAC,MAAK;AACb,IAAA,WAAW,CAAC,oBAAoB,CAAC,eAAD,EAAkB,iBAAlB,CAArB,CAAX;AACD,GAFQ,EAEN,CAAC,0BAA0B,CAAC,iBAAD,CAA3B,CAFM,CAAT;AAIA,QAAM,QAAQ,GAAa,YAAY;AACnC,EAAA,YAAY,CAAC,QADsB;AAEnC,GAAC,iBAAD,CAFJ;AAIA,SACE,uBAAK,SAAS,EAAC,gBAAf,EAAgC,aAAU,gBAA1C;AACE,gBAAC,UAAD;AACG,GAAC,EAAE,KAAF,EAAD;AACC;;;;;AAKE;AACF,gBAAC,YAAD,IACE,EAAE,EAAE,iBADN,EAEE,SAAS,EAAE,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,QAAQ,CAAC,MAAT,GAAkB,CAArC,CAFb,EAGE,QAAQ,EAAE;AACV;AAJF,MAKE,SAAS,MALX,EAME,YAAY,MANd,EAOE,aAAa,EAAE,KAPjB;AASE,gBAAC,UAAD;AACG,uBAAA,QAAQ,MAAR,CAAA,QAAQ,EAAK,CAAC,EAAD,EAAK,KAAL;AACZ;AACA;AACA;AACA,gBAAC,OAAD,IACE,GAAG,EAAE,KAAK,KAAK,CAAV,GAAc,iBAAd,GAAkC,EADzC,EAEE,QAAQ,EAAE,KAFZ;AAIE,gBAAC,aAAD,IACE,aAAa,EAAE,eAAe,CAAC,EAAD;AAC9B;AAFF,MAGE,KAAK,EAAE,oBAAoB,GAAG,CAHhC,CAGmC;AAHnC,MAIE,KAAK,EAAE,KAJT,EAKE,kBAAkB,EAAE,KAAK,KAAK,QALhC,GAJF,CAJO,CADX,CATF,CARJ,CADF,CADF;;;;;;AA2CD,CAjED,C,cAAM,kB,mLAIoB,W,EAGE,W;AA4Db,kB,CAAf,wB,iLAnEM,kB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// ParentSize uses resize observer so the dashboard will update size\n// when its container size changes, due to e.g., builder side panel opening\nimport { ParentSize } from '@vx/responsive';\nimport { TabContainer, TabContent, TabPane } from 'react-bootstrap';\nimport React, { FC, SyntheticEvent, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport DashboardGrid from 'src/dashboard/containers/DashboardGrid';\nimport getLeafComponentIdFromPath from 'src/dashboard/util/getLeafComponentIdFromPath';\nimport { DashboardLayout, LayoutItem, RootState } from 'src/dashboard/types';\nimport {\n  DASHBOARD_GRID_ID,\n  DASHBOARD_ROOT_DEPTH,\n} from 'src/dashboard/util/constants';\nimport { getRootLevelTabIndex } from './utils';\n\ntype DashboardContainerProps = {\n  topLevelTabs?: LayoutItem;\n  handleChangeTab: (event: SyntheticEvent<TabContainer, Event>) => void;\n};\n\nconst DashboardContainer: FC<DashboardContainerProps> = ({\n  topLevelTabs,\n  handleChangeTab,\n}) => {\n  const dashboardLayout = useSelector<RootState, DashboardLayout>(\n    state => state.dashboardLayout.present,\n  );\n  const directPathToChild = useSelector<RootState, string[]>(\n    state => state.dashboardState.directPathToChild,\n  );\n  const [tabIndex, setTabIndex] = useState(\n    getRootLevelTabIndex(dashboardLayout, directPathToChild),\n  );\n\n  useEffect(() => {\n    setTabIndex(getRootLevelTabIndex(dashboardLayout, directPathToChild));\n  }, [getLeafComponentIdFromPath(directPathToChild)]);\n\n  const childIds: string[] = topLevelTabs\n    ? topLevelTabs.children\n    : [DASHBOARD_GRID_ID];\n\n  return (\n    <div className=\"grid-container\" data-test=\"grid-container\">\n      <ParentSize>\n        {({ width }) => (\n          /*\n            We use a TabContainer irrespective of whether top-level tabs exist to maintain\n            a consistent React component tree. This avoids expensive mounts/unmounts of\n            the entire dashboard upon adding/removing top-level tabs, which would otherwise\n            happen because of React's diffing algorithm\n          */\n          <TabContainer\n            id={DASHBOARD_GRID_ID}\n            activeKey={Math.min(tabIndex, childIds.length - 1)}\n            onSelect={handleChangeTab}\n            // @ts-ignore\n            animation\n            mountOnEnter\n            unmountOnExit={false}\n          >\n            <TabContent>\n              {childIds.map((id, index) => (\n                // Matching the key of the first TabPane irrespective of topLevelTabs\n                // lets us keep the same React component tree when !!topLevelTabs changes.\n                // This avoids expensive mounts/unmounts of the entire dashboard.\n                <TabPane\n                  key={index === 0 ? DASHBOARD_GRID_ID : id}\n                  eventKey={index}\n                >\n                  <DashboardGrid\n                    gridComponent={dashboardLayout[id]}\n                    // see isValidChild for why tabs do not increment the depth of their children\n                    depth={DASHBOARD_ROOT_DEPTH + 1} // (topLevelTabs ? 0 : 1)}\n                    width={width}\n                    isComponentVisible={index === tabIndex}\n                  />\n                </TabPane>\n              ))}\n            </TabContent>\n          </TabContainer>\n        )}\n      </ParentSize>\n    </div>\n  );\n};\n\nexport default DashboardContainer;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}