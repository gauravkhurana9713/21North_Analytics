{"ast":null,"code":"import _someInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/some\";import _extends from \"@babel/runtime-corejs3/helpers/extends\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup } from 'react-bootstrap';\nimport { NativeSelect as Select } from 'src/components/Select';\nimport { Input } from 'src/common/components';\nimport { t, SupersetClient, styled } from '@superset-ui/core';\n\nimport adhocMetricType from 'src/explore/components/controls/MetricControl/adhocMetricType';\nimport {\nOPERATORS,\nOPERATORS_OPTIONS,\nTABLE_ONLY_OPERATORS,\nDRUID_ONLY_OPERATORS,\nHAVING_OPERATORS,\nMULTI_OPERATORS,\nCUSTOM_OPERATORS,\nDISABLE_INPUT_OPERATORS } from\n'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport columnType from './columnType';\nimport AdhocFilter, { EXPRESSION_TYPES, CLAUSES } from './AdhocFilter';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst SelectWithLabel = styled(Select)`\n  .ant-select-selector::after {\n    content: '${({ labelText }) => labelText || '\\\\A0'}';\n    display: inline-block;\n    white-space: nowrap;\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    width: max-content;\n  }\n`;\n\nconst propTypes = {\n  adhocFilter: PropTypes.instanceOf(AdhocFilter).isRequired,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(\n  PropTypes.oneOfType([\n  columnType,\n  PropTypes.shape({ saved_metric_name: PropTypes.string.isRequired }),\n  adhocMetricType])).\n\n  isRequired,\n  onHeightChange: PropTypes.func.isRequired,\n  datasource: PropTypes.object,\n  partitionColumn: PropTypes.string,\n  popoverRef: PropTypes.object };\n\n\nconst defaultProps = {\n  datasource: {} };\n\n\nfunction translateOperator(operator) {\n  if (operator === OPERATORS['==']) {\n    return 'equals';\n  }\n  if (operator === OPERATORS['!=']) {\n    return 'not equal to';\n  }\n  if (operator === OPERATORS.LIKE) {\n    return 'LIKE';\n  }\n  if (operator === OPERATORS['LATEST PARTITION']) {\n    return 'use latest_partition template';\n  }\n  return operator;\n}\n\nexport default class AdhocFilterEditPopoverSimpleTabContent extends React.Component {\n  constructor(props) {var _context, _context2, _context3, _context4, _context5, _context6, _context7;\n    super(props);\n    this.onSubjectChange = _bindInstanceProperty(_context = this.onSubjectChange).call(_context, this);\n    this.onOperatorChange = _bindInstanceProperty(_context2 = this.onOperatorChange).call(_context2, this);\n    this.onComparatorChange = _bindInstanceProperty(_context3 = this.onComparatorChange).call(_context3, this);\n    this.onInputComparatorChange = _bindInstanceProperty(_context4 = this.onInputComparatorChange).call(_context4, this);\n    this.isOperatorRelevant = _bindInstanceProperty(_context5 = this.isOperatorRelevant).call(_context5, this);\n    this.refreshComparatorSuggestions = _bindInstanceProperty(_context6 = this.refreshComparatorSuggestions).call(_context6,\n    this);\n\n    this.clearSuggestionSearch = _bindInstanceProperty(_context7 = this.clearSuggestionSearch).call(_context7, this);\n\n    this.state = {\n      suggestions: [],\n      abortActiveRequest: null,\n      currentSuggestionSearch: '' };\n\n\n    this.selectProps = {\n      name: 'select-column',\n      showSearch: true };\n\n  }\n\n  UNSAFE_componentWillMount() {\n    this.refreshComparatorSuggestions();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.adhocFilter.subject !== this.props.adhocFilter.subject) {\n      this.refreshComparatorSuggestions();\n    }\n  }\n\n  onSubjectChange(id) {var _context8;\n    const option = _findInstanceProperty(_context8 = this.props.options).call(_context8,\n    option => option.id === id || option.optionName === id);\n\n\n    let subject;\n    let clause;\n    // infer the new clause based on what subject was selected.\n    if (option && option.column_name) {\n      subject = option.column_name;\n      clause = CLAUSES.WHERE;\n    } else if (option && (option.saved_metric_name || option.label)) {\n      subject = option.saved_metric_name || option.label;\n      clause = CLAUSES.HAVING;\n    }\n    const { operator } = this.props.adhocFilter;\n    this.props.onChange(\n    this.props.adhocFilter.duplicateWith({\n      subject,\n      clause,\n      operator:\n      operator && this.isOperatorRelevant(operator, subject) ?\n      operator :\n      null,\n      expressionType: EXPRESSION_TYPES.SIMPLE }));\n\n\n  }\n\n  onOperatorChange(operator) {\n    const currentComparator = this.props.adhocFilter.comparator;\n    let newComparator;\n    // convert between list of comparators and individual comparators\n    // (e.g. `in ('North America', 'Africa')` to `== 'North America'`)\n    if (MULTI_OPERATORS.has(operator)) {var _context9;\n      newComparator = _Array$isArray(currentComparator) ?\n      currentComparator :\n      _filterInstanceProperty(_context9 = [currentComparator]).call(_context9, element => element);\n    } else {\n      newComparator = _Array$isArray(currentComparator) ?\n      currentComparator[0] :\n      currentComparator;\n    }\n\n    if (operator && CUSTOM_OPERATORS.has(operator)) {\n      this.props.onChange(\n      this.props.adhocFilter.duplicateWith({\n        subject: this.props.adhocFilter.subject,\n        clause: CLAUSES.WHERE,\n        operator,\n        expressionType: EXPRESSION_TYPES.SQL,\n        datasource: this.props.datasource }));\n\n\n    } else {\n      this.props.onChange(\n      this.props.adhocFilter.duplicateWith({\n        operator,\n        comparator: newComparator,\n        expressionType: EXPRESSION_TYPES.SIMPLE }));\n\n\n    }\n  }\n\n  onInputComparatorChange(event) {\n    this.onComparatorChange(event.target.value);\n  }\n\n  onComparatorChange(comparator) {\n    this.props.onChange(\n    this.props.adhocFilter.duplicateWith({\n      comparator,\n      expressionType: EXPRESSION_TYPES.SIMPLE }));\n\n\n  }\n\n  refreshComparatorSuggestions() {\n    const { datasource } = this.props;\n    const col = this.props.adhocFilter.subject;\n    const having = this.props.adhocFilter.clause === CLAUSES.HAVING;\n\n    if (col && datasource && datasource.filter_select && !having) {\n      if (this.state.abortActiveRequest) {\n        this.state.abortActiveRequest();\n      }\n\n      const controller = new AbortController();\n      const { signal } = controller;\n      this.setState({ abortActiveRequest: controller.abort, loading: true });\n\n      SupersetClient.get({\n        signal,\n        endpoint: `/superset/filter/${datasource.type}/${datasource.id}/${col}/` }).\n\n      then(({ json }) => {\n        this.setState(() => ({\n          suggestions: json,\n          abortActiveRequest: null,\n          loading: false }));\n\n      }).\n      catch(() => {\n        this.setState(() => ({\n          suggestions: [],\n          abortActiveRequest: null,\n          loading: false }));\n\n      });\n    }\n  }\n\n  isOperatorRelevant(operator, subject) {\n    if (operator && CUSTOM_OPERATORS.has(operator)) {\n      const { partitionColumn } = this.props;\n      return partitionColumn && subject && subject === partitionColumn;\n    }\n\n    return !(\n    this.props.datasource.type === 'druid' &&\n    _indexOfInstanceProperty(TABLE_ONLY_OPERATORS).call(TABLE_ONLY_OPERATORS, operator) >= 0 ||\n    this.props.datasource.type === 'table' &&\n    _indexOfInstanceProperty(DRUID_ONLY_OPERATORS).call(DRUID_ONLY_OPERATORS, operator) >= 0 ||\n    this.props.adhocFilter.clause === CLAUSES.HAVING &&\n    _indexOfInstanceProperty(HAVING_OPERATORS).call(HAVING_OPERATORS, operator) === -1);\n\n  }\n\n  focusComparator(ref, shouldFocus) {\n    if (ref && shouldFocus) {\n      ref.focus();\n    }\n  }\n\n  optionsRemaining() {var _ref;\n    const { suggestions } = this.state;\n    const { comparator } = this.props.adhocFilter;\n    // if select is multi/value is array, we show the options not selected\n    const valuesFromSuggestionsLength = _Array$isArray(comparator) ?\n    _filterInstanceProperty(comparator).call(comparator, v => _includesInstanceProperty(suggestions).call(suggestions, v)).length :\n    0;\n    return (_ref = (suggestions == null ? void 0 : suggestions.length) - valuesFromSuggestionsLength) != null ? _ref : 0;\n  }\n\n  createSuggestionsPlaceholder() {\n    const optionsRemaining = this.optionsRemaining();\n    const placeholder = t('%s option(s)', optionsRemaining);\n    return optionsRemaining ? placeholder : '';\n  }\n\n  renderSubjectOptionLabel(option) {\n    return ___EmotionJSX(FilterDefinitionOption, { option: option });\n  }\n\n  clearSuggestionSearch() {\n    this.setState({ currentSuggestionSearch: '' });\n  }\n\n  render() {var _context12, _context13, _context14;\n    const { adhocFilter, options, datasource } = this.props;\n    const { currentSuggestionSearch } = this.state;\n    let columns = options;\n    const { subject, operator, comparator } = adhocFilter;\n    const subjectSelectProps = {\n      value: subject != null ? subject : undefined,\n      onChange: this.onSubjectChange,\n      notFoundContent: t(\n      'No such column found. To filter on a metric, try the Custom SQL tab.'),\n\n      filterOption: (input, option) => {var _context10;return (\n          _indexOfInstanceProperty(_context10 = option.filterBy.toLowerCase()).call(_context10, input.toLowerCase()) >= 0);},\n      autoFocus: !subject };\n\n\n    if (datasource.type === 'druid') {\n      subjectSelectProps.placeholder = t(\n      '%s column(s) and metric(s)',\n      columns.length);\n\n    } else {\n      // we cannot support simple ad-hoc filters for metrics because we don't know what type\n      // the value should be cast to (without knowing the output type of the aggregate, which\n      // becomes a rather complicated problem)\n      subjectSelectProps.placeholder =\n      adhocFilter.clause === CLAUSES.WHERE ?\n      t('%s column(s)', columns.length) :\n      t('To filter on a metric, use Custom SQL tab.');\n      columns = _filterInstanceProperty(options).call(options, option => option.column_name);\n    }\n\n    const operatorSelectProps = {\n      placeholder: t(\n      '%s operator(s)',\n      _filterInstanceProperty(OPERATORS_OPTIONS).call(OPERATORS_OPTIONS, op => this.isOperatorRelevant(op, subject)).\n      length),\n\n      // like AGGREGTES_OPTIONS, operator options are string\n      value: operator,\n      onChange: this.onOperatorChange,\n      filterOption: (input, option) => {var _context11;return (\n          _indexOfInstanceProperty(_context11 = option.value.toLowerCase()).call(_context11, input.toLowerCase()) >= 0);},\n      autoFocus: !!subjectSelectProps.value && !operator };\n\n\n    const focusComparator =\n    !!subjectSelectProps.value && !!operatorSelectProps.value;\n    const comparatorSelectProps = {\n      allowClear: true,\n      showSearch: true,\n      mode: MULTI_OPERATORS.has(operator) && 'tags',\n      tokenSeparators: [',', '\\n', '\\t', ';'],\n      loading: this.state.loading,\n      value: comparator,\n      onChange: this.onComparatorChange,\n      notFoundContent: t('Type a value here'),\n      disabled: _includesInstanceProperty(DISABLE_INPUT_OPERATORS).call(DISABLE_INPUT_OPERATORS, operator),\n      placeholder: this.createSuggestionsPlaceholder(),\n      labelText: (comparator == null ? void 0 : comparator.length) > 0 && this.createSuggestionsPlaceholder(),\n      autoFocus: focusComparator };\n\n\n    return (\n      ___EmotionJSX(React.Fragment, null,\n      ___EmotionJSX(FormGroup, { className: \"adhoc-filter-simple-column-dropdown\" },\n      ___EmotionJSX(Select, _extends({},\n      this.selectProps,\n      subjectSelectProps, {\n        name: \"filter-column\",\n        getPopupContainer: triggerNode => triggerNode.parentNode }),\n\n      _mapInstanceProperty(columns).call(columns, (column) =>\n      ___EmotionJSX(Select.Option, {\n        value: column.id || column.optionName,\n        filterBy:\n        column.saved_metric_name || column.column_name || column.label,\n\n        key: column.id || column.optionName },\n\n      this.renderSubjectOptionLabel(column))))),\n\n\n\n\n      ___EmotionJSX(FormGroup, null,\n      ___EmotionJSX(Select, _extends({},\n      this.selectProps,\n      operatorSelectProps, {\n        getPopupContainer: triggerNode => triggerNode.parentNode,\n        name: \"filter-operator\" }),\n\n      _mapInstanceProperty(_context12 = _filterInstanceProperty(OPERATORS_OPTIONS).call(OPERATORS_OPTIONS, (op) =>\n      this.isOperatorRelevant(op, subject))).call(_context12,\n      (option) =>\n      ___EmotionJSX(Select.Option, { value: option, key: option },\n      translateOperator(option))))),\n\n\n\n\n      ___EmotionJSX(FormGroup, { \"data-test\": \"adhoc-filter-simple-value\" },\n      MULTI_OPERATORS.has(operator) ||\n      this.state.suggestions.length > 0 ?\n      ___EmotionJSX(SelectWithLabel, _extends({\n        name: \"filter-value\" },\n      comparatorSelectProps, {\n        getPopupContainer: triggerNode => triggerNode.parentNode,\n        onSearch: val => this.setState({ currentSuggestionSearch: val }),\n        onSelect: this.clearSuggestionSearch,\n        onBlur: this.clearSuggestionSearch }),\n\n      _mapInstanceProperty(_context13 = this.state.suggestions).call(_context13, (suggestion) =>\n      ___EmotionJSX(Select.Option, { value: suggestion, key: suggestion },\n      suggestion)),\n\n\n\n\n      currentSuggestionSearch &&\n      !_someInstanceProperty(_context14 = this.state.suggestions).call(_context14,\n      suggestion => suggestion === currentSuggestionSearch) &&\n\n      ___EmotionJSX(Select.Option, { value: currentSuggestionSearch },\n      currentSuggestionSearch)) :\n\n\n\n\n      ___EmotionJSX(Input, {\n        name: \"filter-value\",\n        ref: ref => this.focusComparator(ref, focusComparator),\n        onChange: this.onInputComparatorChange,\n        value: comparator,\n        placeholder: t('Filter value (case sensitive)'),\n        disabled: _includesInstanceProperty(DISABLE_INPUT_OPERATORS).call(DISABLE_INPUT_OPERATORS, operator) }))));\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}AdhocFilterEditPopoverSimpleTabContent.propTypes = propTypes;\nAdhocFilterEditPopoverSimpleTabContent.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SelectWithLabel, \"SelectWithLabel\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent.jsx\");reactHotLoader.register(translateOperator, \"translateOperator\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent.jsx\");reactHotLoader.register(AdhocFilterEditPopoverSimpleTabContent, \"AdhocFilterEditPopoverSimpleTabContent\", \"/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/FilterControl/AdhocFilterEditPopoverSimpleTabContent.jsx"],"names":["React","PropTypes","FormGroup","NativeSelect","Select","Input","t","SupersetClient","styled","adhocMetricType","OPERATORS","OPERATORS_OPTIONS","TABLE_ONLY_OPERATORS","DRUID_ONLY_OPERATORS","HAVING_OPERATORS","MULTI_OPERATORS","CUSTOM_OPERATORS","DISABLE_INPUT_OPERATORS","FilterDefinitionOption","columnType","AdhocFilter","EXPRESSION_TYPES","CLAUSES","SelectWithLabel","labelText","theme","colors","grayscale","light1","propTypes","adhocFilter","instanceOf","isRequired","onChange","func","options","arrayOf","oneOfType","shape","saved_metric_name","string","onHeightChange","datasource","object","partitionColumn","popoverRef","defaultProps","translateOperator","operator","LIKE","AdhocFilterEditPopoverSimpleTabContent","Component","constructor","props","onSubjectChange","onOperatorChange","onComparatorChange","onInputComparatorChange","isOperatorRelevant","refreshComparatorSuggestions","clearSuggestionSearch","state","suggestions","abortActiveRequest","currentSuggestionSearch","selectProps","name","showSearch","UNSAFE_componentWillMount","componentDidUpdate","prevProps","subject","id","option","optionName","clause","column_name","WHERE","label","HAVING","duplicateWith","expressionType","SIMPLE","currentComparator","comparator","newComparator","has","element","SQL","event","target","value","col","having","filter_select","controller","AbortController","signal","setState","abort","loading","get","endpoint","type","then","json","catch","focusComparator","ref","shouldFocus","focus","optionsRemaining","valuesFromSuggestionsLength","v","length","createSuggestionsPlaceholder","placeholder","renderSubjectOptionLabel","render","columns","subjectSelectProps","undefined","notFoundContent","filterOption","input","filterBy","toLowerCase","autoFocus","operatorSelectProps","op","comparatorSelectProps","allowClear","mode","tokenSeparators","disabled","triggerNode","parentNode","column","val","suggestion"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup } from 'react-bootstrap';\nimport { NativeSelect as Select } from 'src/components/Select';\nimport { Input } from 'src/common/components';\nimport { t, SupersetClient, styled } from '@superset-ui/core';\n\nimport adhocMetricType from 'src/explore/components/controls/MetricControl/adhocMetricType';\nimport {\n  OPERATORS,\n  OPERATORS_OPTIONS,\n  TABLE_ONLY_OPERATORS,\n  DRUID_ONLY_OPERATORS,\n  HAVING_OPERATORS,\n  MULTI_OPERATORS,\n  CUSTOM_OPERATORS,\n  DISABLE_INPUT_OPERATORS,\n} from 'src/explore/constants';\nimport FilterDefinitionOption from 'src/explore/components/controls/MetricControl/FilterDefinitionOption';\nimport columnType from './columnType';\nimport AdhocFilter, { EXPRESSION_TYPES, CLAUSES } from './AdhocFilter';\n\nconst SelectWithLabel = styled(Select)`\n  .ant-select-selector::after {\n    content: '${({ labelText }) => labelText || '\\\\A0'}';\n    display: inline-block;\n    white-space: nowrap;\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n    width: max-content;\n  }\n`;\n\nconst propTypes = {\n  adhocFilter: PropTypes.instanceOf(AdhocFilter).isRequired,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      columnType,\n      PropTypes.shape({ saved_metric_name: PropTypes.string.isRequired }),\n      adhocMetricType,\n    ]),\n  ).isRequired,\n  onHeightChange: PropTypes.func.isRequired,\n  datasource: PropTypes.object,\n  partitionColumn: PropTypes.string,\n  popoverRef: PropTypes.object,\n};\n\nconst defaultProps = {\n  datasource: {},\n};\n\nfunction translateOperator(operator) {\n  if (operator === OPERATORS['==']) {\n    return 'equals';\n  }\n  if (operator === OPERATORS['!=']) {\n    return 'not equal to';\n  }\n  if (operator === OPERATORS.LIKE) {\n    return 'LIKE';\n  }\n  if (operator === OPERATORS['LATEST PARTITION']) {\n    return 'use latest_partition template';\n  }\n  return operator;\n}\n\nexport default class AdhocFilterEditPopoverSimpleTabContent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onSubjectChange = this.onSubjectChange.bind(this);\n    this.onOperatorChange = this.onOperatorChange.bind(this);\n    this.onComparatorChange = this.onComparatorChange.bind(this);\n    this.onInputComparatorChange = this.onInputComparatorChange.bind(this);\n    this.isOperatorRelevant = this.isOperatorRelevant.bind(this);\n    this.refreshComparatorSuggestions = this.refreshComparatorSuggestions.bind(\n      this,\n    );\n    this.clearSuggestionSearch = this.clearSuggestionSearch.bind(this);\n\n    this.state = {\n      suggestions: [],\n      abortActiveRequest: null,\n      currentSuggestionSearch: '',\n    };\n\n    this.selectProps = {\n      name: 'select-column',\n      showSearch: true,\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.refreshComparatorSuggestions();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.adhocFilter.subject !== this.props.adhocFilter.subject) {\n      this.refreshComparatorSuggestions();\n    }\n  }\n\n  onSubjectChange(id) {\n    const option = this.props.options.find(\n      option => option.id === id || option.optionName === id,\n    );\n\n    let subject;\n    let clause;\n    // infer the new clause based on what subject was selected.\n    if (option && option.column_name) {\n      subject = option.column_name;\n      clause = CLAUSES.WHERE;\n    } else if (option && (option.saved_metric_name || option.label)) {\n      subject = option.saved_metric_name || option.label;\n      clause = CLAUSES.HAVING;\n    }\n    const { operator } = this.props.adhocFilter;\n    this.props.onChange(\n      this.props.adhocFilter.duplicateWith({\n        subject,\n        clause,\n        operator:\n          operator && this.isOperatorRelevant(operator, subject)\n            ? operator\n            : null,\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n      }),\n    );\n  }\n\n  onOperatorChange(operator) {\n    const currentComparator = this.props.adhocFilter.comparator;\n    let newComparator;\n    // convert between list of comparators and individual comparators\n    // (e.g. `in ('North America', 'Africa')` to `== 'North America'`)\n    if (MULTI_OPERATORS.has(operator)) {\n      newComparator = Array.isArray(currentComparator)\n        ? currentComparator\n        : [currentComparator].filter(element => element);\n    } else {\n      newComparator = Array.isArray(currentComparator)\n        ? currentComparator[0]\n        : currentComparator;\n    }\n\n    if (operator && CUSTOM_OPERATORS.has(operator)) {\n      this.props.onChange(\n        this.props.adhocFilter.duplicateWith({\n          subject: this.props.adhocFilter.subject,\n          clause: CLAUSES.WHERE,\n          operator,\n          expressionType: EXPRESSION_TYPES.SQL,\n          datasource: this.props.datasource,\n        }),\n      );\n    } else {\n      this.props.onChange(\n        this.props.adhocFilter.duplicateWith({\n          operator,\n          comparator: newComparator,\n          expressionType: EXPRESSION_TYPES.SIMPLE,\n        }),\n      );\n    }\n  }\n\n  onInputComparatorChange(event) {\n    this.onComparatorChange(event.target.value);\n  }\n\n  onComparatorChange(comparator) {\n    this.props.onChange(\n      this.props.adhocFilter.duplicateWith({\n        comparator,\n        expressionType: EXPRESSION_TYPES.SIMPLE,\n      }),\n    );\n  }\n\n  refreshComparatorSuggestions() {\n    const { datasource } = this.props;\n    const col = this.props.adhocFilter.subject;\n    const having = this.props.adhocFilter.clause === CLAUSES.HAVING;\n\n    if (col && datasource && datasource.filter_select && !having) {\n      if (this.state.abortActiveRequest) {\n        this.state.abortActiveRequest();\n      }\n\n      const controller = new AbortController();\n      const { signal } = controller;\n      this.setState({ abortActiveRequest: controller.abort, loading: true });\n\n      SupersetClient.get({\n        signal,\n        endpoint: `/superset/filter/${datasource.type}/${datasource.id}/${col}/`,\n      })\n        .then(({ json }) => {\n          this.setState(() => ({\n            suggestions: json,\n            abortActiveRequest: null,\n            loading: false,\n          }));\n        })\n        .catch(() => {\n          this.setState(() => ({\n            suggestions: [],\n            abortActiveRequest: null,\n            loading: false,\n          }));\n        });\n    }\n  }\n\n  isOperatorRelevant(operator, subject) {\n    if (operator && CUSTOM_OPERATORS.has(operator)) {\n      const { partitionColumn } = this.props;\n      return partitionColumn && subject && subject === partitionColumn;\n    }\n\n    return !(\n      (this.props.datasource.type === 'druid' &&\n        TABLE_ONLY_OPERATORS.indexOf(operator) >= 0) ||\n      (this.props.datasource.type === 'table' &&\n        DRUID_ONLY_OPERATORS.indexOf(operator) >= 0) ||\n      (this.props.adhocFilter.clause === CLAUSES.HAVING &&\n        HAVING_OPERATORS.indexOf(operator) === -1)\n    );\n  }\n\n  focusComparator(ref, shouldFocus) {\n    if (ref && shouldFocus) {\n      ref.focus();\n    }\n  }\n\n  optionsRemaining() {\n    const { suggestions } = this.state;\n    const { comparator } = this.props.adhocFilter;\n    // if select is multi/value is array, we show the options not selected\n    const valuesFromSuggestionsLength = Array.isArray(comparator)\n      ? comparator.filter(v => suggestions.includes(v)).length\n      : 0;\n    return suggestions?.length - valuesFromSuggestionsLength ?? 0;\n  }\n\n  createSuggestionsPlaceholder() {\n    const optionsRemaining = this.optionsRemaining();\n    const placeholder = t('%s option(s)', optionsRemaining);\n    return optionsRemaining ? placeholder : '';\n  }\n\n  renderSubjectOptionLabel(option) {\n    return <FilterDefinitionOption option={option} />;\n  }\n\n  clearSuggestionSearch() {\n    this.setState({ currentSuggestionSearch: '' });\n  }\n\n  render() {\n    const { adhocFilter, options, datasource } = this.props;\n    const { currentSuggestionSearch } = this.state;\n    let columns = options;\n    const { subject, operator, comparator } = adhocFilter;\n    const subjectSelectProps = {\n      value: subject ?? undefined,\n      onChange: this.onSubjectChange,\n      notFoundContent: t(\n        'No such column found. To filter on a metric, try the Custom SQL tab.',\n      ),\n      filterOption: (input, option) =>\n        option.filterBy.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n      autoFocus: !subject,\n    };\n\n    if (datasource.type === 'druid') {\n      subjectSelectProps.placeholder = t(\n        '%s column(s) and metric(s)',\n        columns.length,\n      );\n    } else {\n      // we cannot support simple ad-hoc filters for metrics because we don't know what type\n      // the value should be cast to (without knowing the output type of the aggregate, which\n      // becomes a rather complicated problem)\n      subjectSelectProps.placeholder =\n        adhocFilter.clause === CLAUSES.WHERE\n          ? t('%s column(s)', columns.length)\n          : t('To filter on a metric, use Custom SQL tab.');\n      columns = options.filter(option => option.column_name);\n    }\n\n    const operatorSelectProps = {\n      placeholder: t(\n        '%s operator(s)',\n        OPERATORS_OPTIONS.filter(op => this.isOperatorRelevant(op, subject))\n          .length,\n      ),\n      // like AGGREGTES_OPTIONS, operator options are string\n      value: operator,\n      onChange: this.onOperatorChange,\n      filterOption: (input, option) =>\n        option.value.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n      autoFocus: !!subjectSelectProps.value && !operator,\n    };\n\n    const focusComparator =\n      !!subjectSelectProps.value && !!operatorSelectProps.value;\n    const comparatorSelectProps = {\n      allowClear: true,\n      showSearch: true,\n      mode: MULTI_OPERATORS.has(operator) && 'tags',\n      tokenSeparators: [',', '\\n', '\\t', ';'],\n      loading: this.state.loading,\n      value: comparator,\n      onChange: this.onComparatorChange,\n      notFoundContent: t('Type a value here'),\n      disabled: DISABLE_INPUT_OPERATORS.includes(operator),\n      placeholder: this.createSuggestionsPlaceholder(),\n      labelText: comparator?.length > 0 && this.createSuggestionsPlaceholder(),\n      autoFocus: focusComparator,\n    };\n\n    return (\n      <>\n        <FormGroup className=\"adhoc-filter-simple-column-dropdown\">\n          <Select\n            {...this.selectProps}\n            {...subjectSelectProps}\n            name=\"filter-column\"\n            getPopupContainer={triggerNode => triggerNode.parentNode}\n          >\n            {columns.map(column => (\n              <Select.Option\n                value={column.id || column.optionName}\n                filterBy={\n                  column.saved_metric_name || column.column_name || column.label\n                }\n                key={column.id || column.optionName}\n              >\n                {this.renderSubjectOptionLabel(column)}\n              </Select.Option>\n            ))}\n          </Select>\n        </FormGroup>\n        <FormGroup>\n          <Select\n            {...this.selectProps}\n            {...operatorSelectProps}\n            getPopupContainer={triggerNode => triggerNode.parentNode}\n            name=\"filter-operator\"\n          >\n            {OPERATORS_OPTIONS.filter(op =>\n              this.isOperatorRelevant(op, subject),\n            ).map(option => (\n              <Select.Option value={option} key={option}>\n                {translateOperator(option)}\n              </Select.Option>\n            ))}\n          </Select>\n        </FormGroup>\n        <FormGroup data-test=\"adhoc-filter-simple-value\">\n          {MULTI_OPERATORS.has(operator) ||\n          this.state.suggestions.length > 0 ? (\n            <SelectWithLabel\n              name=\"filter-value\"\n              {...comparatorSelectProps}\n              getPopupContainer={triggerNode => triggerNode.parentNode}\n              onSearch={val => this.setState({ currentSuggestionSearch: val })}\n              onSelect={this.clearSuggestionSearch}\n              onBlur={this.clearSuggestionSearch}\n            >\n              {this.state.suggestions.map(suggestion => (\n                <Select.Option value={suggestion} key={suggestion}>\n                  {suggestion}\n                </Select.Option>\n              ))}\n\n              {/* enable selecting an option not included in suggestions */}\n              {currentSuggestionSearch &&\n                !this.state.suggestions.some(\n                  suggestion => suggestion === currentSuggestionSearch,\n                ) && (\n                  <Select.Option value={currentSuggestionSearch}>\n                    {currentSuggestionSearch}\n                  </Select.Option>\n                )}\n            </SelectWithLabel>\n          ) : (\n            <Input\n              name=\"filter-value\"\n              ref={ref => this.focusComparator(ref, focusComparator)}\n              onChange={this.onInputComparatorChange}\n              value={comparator}\n              placeholder={t('Filter value (case sensitive)')}\n              disabled={DISABLE_INPUT_OPERATORS.includes(operator)}\n            />\n          )}\n        </FormGroup>\n      </>\n    );\n  }\n}\nAdhocFilterEditPopoverSimpleTabContent.propTypes = propTypes;\nAdhocFilterEditPopoverSimpleTabContent.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}