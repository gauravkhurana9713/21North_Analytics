{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { DataMaskType } from './types';\nimport { FeatureFlag, isFeatureEnabled } from '../featureFlags';\nexport const UPDATE_DATA_MASK = 'UPDATE_DATA_MASK';\nexport const SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE = 'SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE';\nexport const SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL = 'SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL';\nexport function updateDataMask(filterId, dataMask) {\n  const { nativeFilters, crossFilters, ownFilters } = dataMask;\n  const filteredDataMask = { ownFilters };\n  if (isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) && nativeFilters) {\n    filteredDataMask.nativeFilters = nativeFilters;\n  }\n  if (isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) && crossFilters) {\n    filteredDataMask.crossFilters = crossFilters;\n  }\n  return {\n    type: UPDATE_DATA_MASK,\n    filterId,\n    ...filteredDataMask };\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(UPDATE_DATA_MASK, \"UPDATE_DATA_MASK\", \"/app/superset-frontend/src/dataMask/actions.ts\");reactHotLoader.register(SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE, \"SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE\", \"/app/superset-frontend/src/dataMask/actions.ts\");reactHotLoader.register(SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL, \"SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL\", \"/app/superset-frontend/src/dataMask/actions.ts\");reactHotLoader.register(updateDataMask, \"updateDataMask\", \"/app/superset-frontend/src/dataMask/actions.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dataMask/actions.ts"],"names":[],"mappings":"wSAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,SAAS,YAAT,QAAyC,SAAzC;AAEA,SAAS,WAAT,EAAsB,gBAAtB,QAA8C,iBAA9C;AAEA,OAAO,MAAM,gBAAgB,GAAG,kBAAzB;AASP,OAAO,MAAM,wCAAwC,GACnD,0CADK;AAOP,OAAO,MAAM,oCAAoC,GAC/C,sCADK;AAOP,OAAM,SAAU,cAAV,CACJ,QADI,EAEJ,QAFI,EAMH;AAED,QAAM,EAAE,aAAF,EAAiB,YAAjB,EAA+B,UAA/B,KAA8C,QAApD;AACA,QAAM,gBAAgB,GAIlB,EAAE,UAAF,EAJJ;AAKA,MAAI,gBAAgB,CAAC,WAAW,CAAC,wBAAb,CAAhB,IAA0D,aAA9D,EAA6E;AAC3E,IAAA,gBAAgB,CAAC,aAAjB,GAAiC,aAAjC;AACD;AACD,MAAI,gBAAgB,CAAC,WAAW,CAAC,uBAAb,CAAhB,IAAyD,YAA7D,EAA2E;AACzE,IAAA,gBAAgB,CAAC,YAAjB,GAAgC,YAAhC;AACD;AACD,SAAO;AACL,IAAA,IAAI,EAAE,gBADD;AAEL,IAAA,QAFK;AAGL,OAAG,gBAHE,EAAP;;AAKD,C,iLAhDY,gB,gGASA,wC,wHAOA,oC,oHAOG,c","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { DataMaskType, MaskWithId } from './types';\nimport { FilterConfiguration } from '../dashboard/components/nativeFilters/types';\nimport { FeatureFlag, isFeatureEnabled } from '../featureFlags';\n\nexport const UPDATE_DATA_MASK = 'UPDATE_DATA_MASK';\nexport interface UpdateDataMask {\n  type: typeof UPDATE_DATA_MASK;\n  filterId: string;\n  [DataMaskType.NativeFilters]?: Omit<MaskWithId, 'id'>;\n  [DataMaskType.CrossFilters]?: Omit<MaskWithId, 'id'>;\n  [DataMaskType.OwnFilters]?: Omit<MaskWithId, 'id'>;\n}\n\nexport const SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE =\n  'SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE';\nexport interface SetDataMaskForFilterConfigComplete {\n  type: typeof SET_DATA_MASK_FOR_FILTER_CONFIG_COMPLETE;\n  filterConfig: FilterConfiguration;\n  unitName: DataMaskType;\n}\nexport const SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL =\n  'SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL';\nexport interface SetDataMaskForFilterConfigFail {\n  type: typeof SET_DATA_MASK_FOR_FILTER_CONFIG_FAIL;\n  filterConfig: FilterConfiguration;\n}\n\nexport function updateDataMask(\n  filterId: string,\n  dataMask: {\n    nativeFilters?: Omit<MaskWithId, 'id'>;\n    crossFilters?: Omit<MaskWithId, 'id'>;\n    ownFilters?: Omit<MaskWithId, 'id'>;\n  },\n): UpdateDataMask {\n  const { nativeFilters, crossFilters, ownFilters } = dataMask;\n  const filteredDataMask: {\n    nativeFilters?: Omit<MaskWithId, 'id'>;\n    crossFilters?: Omit<MaskWithId, 'id'>;\n    ownFilters?: Omit<MaskWithId, 'id'>;\n  } = { ownFilters };\n  if (isFeatureEnabled(FeatureFlag.DASHBOARD_NATIVE_FILTERS) && nativeFilters) {\n    filteredDataMask.nativeFilters = nativeFilters;\n  }\n  if (isFeatureEnabled(FeatureFlag.DASHBOARD_CROSS_FILTERS) && crossFilters) {\n    filteredDataMask.crossFilters = crossFilters;\n  }\n  return {\n    type: UPDATE_DATA_MASK,\n    filterId,\n    ...filteredDataMask,\n  };\n}\n\nexport type AnyDataMaskAction =\n  | UpdateDataMask\n  | SetDataMaskForFilterConfigFail\n  | SetDataMaskForFilterConfigComplete;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}