"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _core = require("@superset-ui/core");

var _chartControls = require("@superset-ui/chart-controls");

var _i18n = _interopRequireDefault(require("./i18n"));

var _consts = require("./consts");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable camelcase */

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
(0, _core.addLocaleData)(_i18n.default);
const QueryModeLabel = {
  [_core.QueryMode.aggregate]: (0, _core.t)('Aggregate'),
  [_core.QueryMode.raw]: (0, _core.t)('Raw Records')
};

function getQueryMode(controls) {
  var _controls$query_mode, _controls$all_columns;

  const mode = controls == null ? void 0 : (_controls$query_mode = controls.query_mode) == null ? void 0 : _controls$query_mode.value;

  if (mode === _core.QueryMode.aggregate || mode === _core.QueryMode.raw) {
    return mode;
  }

  const rawColumns = controls == null ? void 0 : (_controls$all_columns = controls.all_columns) == null ? void 0 : _controls$all_columns.value;
  const hasRawColumns = rawColumns && rawColumns.length > 0;
  return hasRawColumns ? _core.QueryMode.raw : _core.QueryMode.aggregate;
}
/**
 * Visibility check
 */


function isQueryMode(mode) {
  return ({
    controls
  }) => getQueryMode(controls) === mode;
}

const isAggMode = isQueryMode(_core.QueryMode.aggregate);
const isRawMode = isQueryMode(_core.QueryMode.raw);
const queryMode = {
  type: 'RadioButtonControl',
  label: (0, _core.t)('Query Mode'),
  default: null,
  options: [{
    label: QueryModeLabel[_core.QueryMode.aggregate],
    value: _core.QueryMode.aggregate
  }, {
    label: QueryModeLabel[_core.QueryMode.raw],
    value: _core.QueryMode.raw
  }],
  mapStateToProps: ({
    controls
  }) => ({
    value: getQueryMode(controls)
  })
};
const all_columns = {
  type: 'SelectControl',
  label: (0, _core.t)('Columns'),
  description: (0, _core.t)('Columns to display'),
  multi: true,
  freeForm: true,
  allowAll: true,
  commaChoosesOption: false,
  default: [],
  optionRenderer: c => /*#__PURE__*/_react.default.createElement(_chartControls.ColumnOption, {
    showType: true,
    column: c
  }),
  valueRenderer: c => /*#__PURE__*/_react.default.createElement(_chartControls.ColumnOption, {
    column: c
  }),
  valueKey: 'column_name',
  mapStateToProps: ({
    datasource,
    controls
  }) => ({
    options: (datasource == null ? void 0 : datasource.columns) || [],
    queryMode: getQueryMode(controls)
  }),
  visibility: isRawMode
};
const percent_metrics = {
  type: 'MetricsControl',
  label: (0, _core.t)('Percentage Metrics'),
  description: (0, _core.t)('Metrics for which percentage of total are to be displayed. Calculated from only data within the row limit.'),
  multi: true,
  visibility: isAggMode,
  mapStateToProps: ({
    datasource,
    controls
  }) => ({
    columns: (datasource == null ? void 0 : datasource.columns) || [],
    savedMetrics: (datasource == null ? void 0 : datasource.metrics) || [],
    datasourceType: datasource == null ? void 0 : datasource.type,
    queryMode: getQueryMode(controls)
  }),
  default: [],
  validators: []
};
const config = {
  controlPanelSections: [_chartControls.sections.legacyTimeseriesTime, {
    label: (0, _core.t)('Query'),
    expanded: true,
    controlSetRows: [[{
      name: 'query_mode',
      config: queryMode
    }], [{
      name: 'groupby',
      override: {
        visibility: isAggMode
      }
    }], [{
      name: 'metrics',
      override: {
        validators: [],
        visibility: isAggMode
      }
    }, {
      name: 'all_columns',
      config: all_columns
    }], [{
      name: 'percent_metrics',
      config: percent_metrics
    }], [{
      name: 'timeseries_limit_metric',
      override: {
        visibility: isAggMode
      }
    }, {
      name: 'order_by_cols',
      config: {
        type: 'SelectControl',
        label: (0, _core.t)('Ordering'),
        description: (0, _core.t)('Order results by selected columns'),
        multi: true,
        default: [],
        mapStateToProps: ({
          datasource
        }) => ({
          choices: (datasource == null ? void 0 : datasource.order_by_choices) || []
        }),
        visibility: isRawMode
      }
    }], [{
      name: 'server_pagination',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Server pagination'),
        description: (0, _core.t)('Enable server side pagination of results (experimental feature)'),
        default: false
      }
    }], [{
      name: 'row_limit',
      override: {
        visibility: ({
          controls
        }) => !controls.server_pagination.value
      }
    }, {
      name: 'server_page_length',
      config: {
        type: 'SelectControl',
        freeForm: true,
        label: (0, _core.t)('Server Page Length'),
        default: 10,
        choices: _consts.PAGE_SIZE_OPTIONS,
        description: (0, _core.t)('Rows per page, 0 means no pagination'),
        visibility: ({
          controls
        }) => Boolean(controls.server_pagination.value)
      }
    }], [{
      name: 'include_time',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Include Time'),
        description: (0, _core.t)('Whether to include the time granularity as defined in the time section'),
        default: false,
        visibility: isAggMode
      }
    }, {
      name: 'order_desc',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Sort Descending'),
        default: true,
        description: (0, _core.t)('Whether to sort descending or ascending'),
        visibility: isAggMode
      }
    }], ['adhoc_filters']]
  }, {
    label: (0, _core.t)('Options'),
    expanded: true,
    controlSetRows: [[{
      name: 'table_timestamp_format',
      config: {
        type: 'SelectControl',
        freeForm: true,
        label: (0, _core.t)('Table Timestamp Format'),
        default: _core.smartDateFormatter.id,
        renderTrigger: true,
        validators: [_core.validateNonEmpty],
        clearable: false,
        choices: _chartControls.D3_TIME_FORMAT_OPTIONS,
        description: (0, _core.t)('Timestamp Format')
      }
    }], [{
      name: 'page_length',
      config: {
        type: 'SelectControl',
        freeForm: true,
        renderTrigger: true,
        label: (0, _core.t)('Page Length'),
        default: null,
        choices: _consts.PAGE_SIZE_OPTIONS,
        description: (0, _core.t)('Rows per page, 0 means no pagination'),
        visibility: ({
          controls
        }) => !controls.server_pagination.value
      }
    }, null], [{
      name: 'include_search',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Search Box'),
        renderTrigger: true,
        default: false,
        description: (0, _core.t)('Whether to include a client-side search box')
      }
    }, {
      name: 'table_filter',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Emit Filter Events'),
        renderTrigger: true,
        default: false,
        description: (0, _core.t)('Whether to apply filter to dashboards when table cells are clicked')
      }
    }], [{
      name: 'align_pn',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Align +/-'),
        renderTrigger: true,
        default: false,
        description: (0, _core.t)('Whether to align the background chart for +/- values')
      }
    }, {
      name: 'color_pn',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Color +/-'),
        renderTrigger: true,
        default: true,
        description: (0, _core.t)('Whether to color +/- values')
      }
    }], [{
      name: 'show_cell_bars',
      config: {
        type: 'CheckboxControl',
        label: (0, _core.t)('Show Cell Bars'),
        renderTrigger: true,
        default: true,
        description: (0, _core.t)('Enable to display bar chart background elements in table columns')
      }
    }, null]]
  }]
};
var _default = config;
exports.default = _default;